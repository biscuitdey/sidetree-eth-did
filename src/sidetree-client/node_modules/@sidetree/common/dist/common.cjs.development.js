'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var base64url = _interopDefault(require('base64url'));
var crypto = require('crypto');

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Holds metadata for a particular Sidetree version needed by the orchestration layer classes across all versions of the Sidetree.
 */
var AbstractVersionMetadata = function AbstractVersionMetadata() {};

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Return code for a content fetch.
 */
var FetchResultCode;

(function (FetchResultCode) {
  FetchResultCode["CasNotReachable"] = "cas_not_reachable";
  FetchResultCode["InvalidHash"] = "content_hash_invalid";
  FetchResultCode["MaxSizeExceeded"] = "content_exceeds_maximum_allowed_size";
  FetchResultCode["MaxSizeNotSpecified"] = "content_max_size_not_specified";
  FetchResultCode["NotAFile"] = "content_not_a_file";
  FetchResultCode["NotFound"] = "content_not_found";
  FetchResultCode["Success"] = "success";
})(FetchResultCode || (FetchResultCode = {}));

var FetchResultCode$1 = FetchResultCode;

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sidetree operation types.
 */
var OperationType;

(function (OperationType) {
  OperationType["Create"] = "create";
  OperationType["Update"] = "update";
  OperationType["Deactivate"] = "deactivate";
  OperationType["Recover"] = "recover";
})(OperationType || (OperationType = {}));

var OperationType$1 = OperationType;

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sidetree public key purpose.
 */
var PublicKeyPurpose;

(function (PublicKeyPurpose) {
  PublicKeyPurpose["Auth"] = "auth";
  PublicKeyPurpose["General"] = "general";
  PublicKeyPurpose["KeyAgreement"] = "agreement";
  PublicKeyPurpose["AssertionMethod"] = "assertion";
  PublicKeyPurpose["CapabilityDelegation"] = "delegation";
  PublicKeyPurpose["CapabilityInvocation"] = "invocation";
})(PublicKeyPurpose || (PublicKeyPurpose = {}));

var PublicKeyPurpose$1 = PublicKeyPurpose;

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Possible Sidetree response status.
 */
var ResponseStatus;

(function (ResponseStatus) {
  ResponseStatus["BadRequest"] = "bad-request";
  ResponseStatus["NotFound"] = "not-found";
  ResponseStatus["ServerError"] = "server-error";
  ResponseStatus["Succeeded"] = "succeeded";
})(ResponseStatus || (ResponseStatus = {}));

var ResponseStatus$1 = ResponseStatus;

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The state of a transaction that is being processed.
 */
var TransactionProcessingStatus;

(function (TransactionProcessingStatus) {
  TransactionProcessingStatus["Pending"] = "pending";
  TransactionProcessingStatus["Processed"] = "processed";
})(TransactionProcessingStatus || (TransactionProcessingStatus = {}));

var TransactionProcessingStatus$1 = TransactionProcessingStatus;

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error codes used by Sidetree core service.
 */
var CoreErrorCode = {
  BlockchainGetFeeResponseNotOk: 'blockchain_get_fee_response_not_ok',
  BlockchainGetLatestTimeResponseNotOk: 'blockchain_get_latest_time_response_not_ok',
  BlockchainGetLockResponseNotOk: 'blockchain_get_lock_response_not_ok',
  BlockchainGetWriterLockResponseNotOk: 'blockchain_get_writer_lock_response_not_ok',
  BlockchainReadInvalidArguments: 'blockchain_read_invalid_arguments',
  BlockchainReadResponseNotOk: 'blockchain_read_response_not_ok',
  BlockchainWriteResponseNotOk: 'blockchain_write_response_not_ok',
  VersionManagerBatchWriterNotFound: 'version_manager_batch_writer_not_found',
  VersionManagerDocumentComposerNotFound: 'version_manager_document_composer_not_found',
  VersionManagerOperationProcessorNotFound: 'version_manager_operation_processor_not_found',
  VersionManagerRequestHandlerNotFound: 'version_manager_request_handler_not_found',
  VersionManagerTransactionProcessorNotFound: 'version_manager_transaction_processor_not_found',
  VersionManagerTransactionSelectorNotFound: 'version_manager_transaction_selector_not_found',
  VersionManagerVersionStringNotFound: 'version_manager_version_string_not_found',
  VersionManagerVersionMetadataIncorrectType: 'version_manager_version_metadata_incorrect_type'
};

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error codes used ONLY by this version of the protocol.
 */
var ErrorCode = {
  AnchoredDataIncorrectFormat: 'anchored_data_incorrect_format',
  AnchoredDataNumberOfOperationsGreaterThanMax: 'anchored_data_number_of_operations_greater_than_max',
  AnchoredDataNumberOfOperationsNotPositiveInteger: 'anchored_data_number_of_operations_not_positive_integer',
  AnchorFileCreatePropertyNotArray: 'anchor_file_create_property_not_array',
  AnchorFileDecompressionFailure: 'anchor_file_decompression_failed',
  AnchorFileHasUnknownProperty: 'anchor_file_has_unknown_property',
  AnchorFileMapFileHashMissing: 'anchor_file_map_file_hash_missing',
  AnchorFileMapFileHashNotString: 'anchor_file_map_file_hash_not_string',
  AnchorFileMapFileHashUnsupported: 'anchor_file_map_file_hash_unsupported',
  AnchorFileMissingOperationsProperty: 'anchor_file_did_unique_suffixes_missing',
  AnchorFileMultipleOperationsForTheSameDid: 'anchor_file_multiple_operations_for_the_same_did',
  AnchorFileNotJson: 'anchor_file_not_json',
  AnchorFileOperationCountExceededPaidLimit: 'anchor_file_operation_count_exceeded_paid_limit',
  AnchorFileRecoverPropertyNotArray: 'anchor_file_recover_property_not_array',
  AnchorFileDeactivatePropertyNotArray: 'anchor_file_deactivate_property_not_array',
  AnchorFileUnexpectedPropertyInOperations: 'anchor_file_unexpected_property_in_operations',
  AnchorFileWriterLockIPropertyNotString: 'anchor_file_writer_lock_id_property_not_string',
  BatchWriterAlreadyHasOperationForDid: 'batch_writer_already_has_operation_for_did',
  CasFileHashNotValid: 'cas_file_hash_not_valid',
  CasFileNotAFile: 'cas_file_not_a file',
  CasFileNotFound: 'cas_file_not_found',
  CasFileTooLarge: 'cas_file_too_large',
  CasNotReachable: 'cas_not_reachable',
  ChunkFileDeltaSizeExceedsLimit: 'chunk_file_delta_size_exceeds_limit',
  ChunkFileDeltasNotArrayOfStrings: 'chunk_file_deltas_not_array_of_string',
  ChunkFileDeltasPropertyNotArray: 'chunk_file_deltas_property_not_array',
  ChunkFileUnexpectedProperty: 'chunk_file_unexpected_property',
  CreateOperationMissingOrUnknownProperty: 'create_operation_missing_or_unknown_property',
  CreateOperationSuffixDataMissingOrNotString: 'create_operation_suffix_data_missing_or_not_string',
  CreateOperationSuffixDataMissingOrUnknownProperty: 'create_operation_suffix_data_missing_or_unknown_property',
  CreateOperationTypeIncorrect: 'create_operation_type_incorrect',
  DeltaMissingOrNotString: 'delta_missting_or_not_string',
  DeltaMissingOrUnknownProperty: 'delta_missing_or_unknown_property',
  DidIncorrectPrefix: 'did_incorrect_prefix',
  DidInitialStateValueContainsMoreThanOneDot: 'did_initial_state_value_contains_more_than_one_dot',
  DidInitialStateValueContainsNoDot: 'did_initial_state_value_contains_no_dot',
  DidInitialStateValueDoesNotContainTwoParts: 'did_initial_state_value_does_not_contain_two_parts',
  DidInvalidDidString: 'did_invalid_did_string',
  DidLongFormNoInitialStateFound: 'did_long_form_no_initial_state_found',
  DidLongFormOnlyInitialStateParameterIsAllowed: 'did_long_form_only_initial_values_parameter_is_allowed',
  DidLongFormOnlyOneQueryParamAllowed: 'did_long_form_only_one_query_param_allowed',
  DidNoUniqueSuffix: 'did_no_unique_suffix',
  DidUniqueSuffixFromInitialStateMismatch: 'did_unique_suffix_from_initial_state_mismatch',
  DocumentComposerDocumentMissing: 'document_composer_document_missing',
  DocumentComposerIdNotString: 'document_composer_id_not_string',
  DocumentComposerIdNotUsingBase64UrlCharacterSet: 'document_composer_id_not_using_base_64_url_character_set',
  DocumentComposerIdTooLong: 'document_composer_id_too_long',
  DocumentComposerInvalidSignature: 'document_composer_invalid_signature',
  DocumentComposerPatchMissingOrUnknownAction: 'document_composer_patch_missing_or_unknown_action',
  DocumentComposerPatchMissingOrUnknownProperty: 'document_composer_patch_missing_or_unknown_property',
  DocumentComposerPatchPublicKeyIdNotString: 'document_composer_patch_public_key_id_not_string',
  DocumentComposerPatchPublicKeyIdsNotArray: 'document_composer_patch_public_keys_ids_not_array',
  DocumentComposerPatchServiceEndpointNotString: 'document_composer_patch_service_endpoint_not_string',
  DocumentComposerPatchServiceEndpointsNotArray: 'document_composer_patch_service_endpoints_not_array',
  DocumentComposerPatchServiceTypeMissingOrUnknown: 'document_composer_patch_service_type_missing_or_unknown',
  DocumentComposerPublicKeyIdDuplicated: 'document_composer_public_key_id_duplicated',
  DocumentComposerPublicKeyJwkMissingOrIncorrectType: 'document_composer_public_key_jwk_missing_or_incorrect_type',
  DocumentComposerPublicKeyMissingOrUnknownProperty: 'document_composer_public_key_missing_or_unknown_property',
  DocumentComposerPublicKeysNotArray: 'document_composer_public_keys_not_array',
  DocumentComposerPublicKeyTypeMissingOrIncorrectType: 'document_composer_public_key_type_missing_or_incorrect_type',
  DocumentComposerPublicKeyPurposeMissingOrUnknown: 'document_composer_public_key_purpose_missing_or_unknown',
  DocumentComposerPublicKeyPurposeExceedsMaxLength: 'document_composer_public_key_purpose_exceeds_max_length',
  DocumentComposerPublicKeyInvalidPurpose: 'document_composer_public_key_invalid_purpose',
  DocumentComposerPatchServiceEndpointIdsNotArray: 'document_composer_service_endpoint_ids_not_array',
  DocumentComposerPatchServiceEndpointServiceEndpointNotString: 'document_composer_service_endpoint_service_endpoint_not_string',
  DocumentComposerPatchServiceEndpointServiceEndpointNotValidUrl: 'document_composer_service_endpoint_service_endpoint_not_valid_url',
  DocumentComposerPatchServiceEndpointServiceEndpointTooLong: 'document_composer_service_endpoint_service_endpoint_too_long',
  DocumentComposerPatchServiceEndpointTypeNotString: 'document_composer_service_endpoint_type_not_string',
  DocumentComposerPatchServiceEndpointTypeTooLong: 'document_composer_service_endpoint_type_too_long',
  DocumentComposerServiceEndpointMissingOrUnknownProperty: 'document_composer_service_endpoint_missing_or_unknown_property',
  DocumentComposerServiceNotArray: 'document_composer_service_not_array',
  DocumentComposerUnknownPropertyInDocument: 'document_composer_unknown_property_in_document',
  DocumentComposerUpdateOperationDocumentPatchesNotArray: 'document_composer_update_operation_document_patch_not_array',
  DocumentIncorretEncodedFormat: 'document_incorrect_encoded_format',
  DocumentNotJson: 'document_not_json',
  DocumentNotValidOriginalDocument: 'document_not_valid_original_document',
  EncoderValidateBase64UrlStringInputNotBase64UrlString: 'encoder_validate_base64url_string_input_not_base64url_string',
  EncoderValidateBase64UrlStringInputNotString: 'encoder_validate_base64url_string_input_not_string',
  JwkHasUnknownProperty: 'jwk_has_unknown_property',
  JwkMissingOrInvalidCrv: 'jwk_missing_or_invalid_crv',
  JwkMissingOrInvalidKty: 'jwk_missing_or_invalid_kty',
  JwkMissingOrInvalidTypeX: 'jwk_missing_or_invalid_type_x',
  JwkMissingOrInvalidTypeY: 'jwk_missing_or_invalid_type_y',
  JwkUndefined: 'jwk_undefined',
  JwsCompactJwsInvalid: 'jws_compact_jws_invalid',
  JwsCompactJwsNotString: 'jws_compact_jws_not_string',
  JwsFailedSignatureValidation: 'jws_failed_signature_validation',
  JwsPayloadNotBase64UrlString: 'jws_payload_not_base64url_string',
  JwsProtectedHeaderMissingOrIncorrectAlg: 'jws_protected_header_missing_or_incorrect_alg',
  JwsProtectedHeaderMissingOrUnknownProperty: 'jws_protected_header_missing_or_unknown_property',
  JwsSignatureNotBase64UrlString: 'jws_signature_not_base64url_string',
  MapFileChunkHasMissingOrUnknownProperty: 'map_file_chunk_has_missing_or_unknown_property',
  MapFileChunksPropertyDoesNotHaveExactlyOneElement: 'map_file_chunks_property_does_not_have_exactly_one_element',
  MapFileChunksPropertyMissingOrIncorrectType: 'map_file_chunks_property_missing_or_incorrect_type',
  MapFileDecompressionFailure: 'map_file_decompression_failure',
  MapFileHasUnknownProperty: 'map_file_has_unknown_property',
  MapFileMultipleOperationsForTheSameDid: 'map_file_multiple_operations_for_the_same_did',
  MapFileNotJson: 'map_file_not_json',
  MapFileOperationsPropertyHasMissingOrUnknownProperty: 'map_file_operations_property_has_missing_or_unknown_property',
  MapFileUpdateOperationsNotArray: 'map_file_update_operations_not_array',
  MultihashNotLatestSupportedHashAlgorithm: 'multihash_not_latest_supported_hash_algorithm',
  MultihashUnsupportedHashAlgorithm: 'multihash_unsupported_hash_algorithm',
  OperationCreateInvalidDidDocument: 'operation_create_invalid_did_document',
  OperationCountLessThanZero: 'operation_count_less_than_zero',
  OperationCreatePayloadHasMissingOrInvalidNextRecoveryCommitment: 'operation_create_payload_has_missing_or_invalid_next_recovery_commitment',
  OperationCreatePayloadHasMissingOrInvalidNextUpdateCommitment: 'operation_create_payload_has_missing_or_invalid_next_update_commitment',
  OperationCreatePayloadMissingOrUnknownProperty: 'operation_create_payload_missing_or_unknown_property',
  OperationDocumentPatchesMissing: 'operation_document_patches_missing',
  OperationPayloadMissingOrIncorrectType: 'operation_payload_missing_or_incorrect_type',
  OperationProcessorCreateOperationDoesNotHaveRevealValue: 'operation_processor_create_operation_does_not_have_reveal_value',
  OperationProcessorUnknownOperationType: 'operation_processor_unknown_operation_type',
  OperationTypeUnknownOrMissing: 'operation_type_unknown_or_missing',
  QueueingMultipleOperationsPerDidNotAllowed: 'queueing_multiple_operations_per_did_not_allowed',
  RecoverOperationMissingOrInvalidDidUniqueSuffix: 'recover_operation_missing_or_invalid_did_unique_suffix',
  RecoverOperationMissingOrUnknownProperty: 'recover_operation_missing_or_unknown_property',
  RecoverOperationSignedDataMissingOrUnknownProperty: 'recover_operation_signed_data_missing_or_unknown_property',
  RecoverOperationTypeIncorrect: 'recover_operation_type_incorrect',
  RequestHandlerDeltaExceedsMaximumSize: 'request_handler_patch_data_exceeds_maximum_size',
  RequestHandlerUnknownOperationType: 'request_handler_unknown_operation_type',
  DeactivateOperationMissingOrInvalidDidUniqueSuffix: 'deactivate_operation_missing_or_invalid_did_unique_suffix',
  DeactivateOperationMissingOrUnknownProperty: 'deactivate_operation_missing_or_unknown_property',
  DeactivateOperationSignedDataMissingOrUnknownProperty: 'deactivate_operation_signed_data_missing_or_unknown_property',
  DeactivateOperationSignedDidUniqueSuffixMismatch: 'deactivate_operation_signed_did_unique_suffix_mismatch',
  DeactivateOperationTypeIncorrect: 'deactivate_operation_type_incorrect',
  TransactionFeePaidInvalid: 'transaction_fee_paid_is_invalid',
  TransactionFeePaidLessThanNormalizedFee: 'transaction_fee_paid_less_than_normalized_fee',
  TransactionProcessorPaidOperationCountExceedsLimit: 'transaction_processor_paid_operation_count_exceeds_limit',
  TransactionsNotInSameBlock: 'transactions_not_in_same_block',
  UpdateOperationMissingDidUniqueSuffix: 'update_operation_missing_did_unique_suffix',
  UpdateOperationMissingOrUnknownProperty: 'update_operation_missing_or_unknown_property',
  UpdateOperationSignedDataHasMissingOrUnknownProperty: 'update_operation_signed_data_has_missing_or_unknown_property',
  UpdateOperationTypeIncorrect: 'update_operation_type_incorrect',
  ValueTimeLockVerifierInvalidNumberOfOperations: 'value_time_lock_verifierInvalid_number_of_operations',
  ValueTimeLockVerifierTransactionTimeOutsideLockRange: 'value_time_lock_verifiertarget_transaction_time_outside_lock_range',
  ValueTimeLockVerifierTransactionWriterLockOwnerMismatch: 'value_time_lock_verifiertransaction_owner_lock_writer_mismatch'
};

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Common error codes used across services.
 */
var SharedErrorCode = {
  BlockchainTimeOutOfRange: 'blockchain_time_out_of_range',
  InvalidTransactionNumberOrTimeHash: 'invalid_transaction_number_or_time_hash',
  NotEnoughBalanceForWrite: 'not_enough_balace_for_write',
  SpendingCapPerPeriodReached: 'spending_cap_per_period_reached',
  ValueTimeLockNotFound: 'value_time_lock_not_found'
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Standardized error class for throwing generic errors internal to this project.
 * NOTE: Not to be confused with RequestError which is used as a response to external requests.
 */
var SidetreeError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(SidetreeError, _Error);

  function SidetreeError(code, message) {
    var _this;

    _this = _Error.call(this, message ? code + ": " + message : code) || this;
    _this.code = code; // NOTE: Extending 'Error' breaks prototype chain since TypeScript 2.1.
    // The following line restores prototype chain.

    Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof SidetreeError ? this.constructor : void 0).prototype);
    return _this;
  }
  /**
   * Returns a new SidetreeError object using the inputs.
   *
   * @param code The error code.
   * @param err The error exception thrown.
   */


  SidetreeError.createFromError = function createFromError(code, err) {
    return new SidetreeError(code, err ? err.message : undefined);
  }
  /**
   * Converts the given `Error` into a string.
   */
  ;

  SidetreeError.stringify = function stringify(error) {
    return JSON.stringify(error, Object.getOwnPropertyNames(error));
  };

  return SidetreeError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

/*
* The code in this file originated from
* @see https://github.com/decentralized-identity/sidetree
* For the list of changes that was made to the original code
* @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
*
* Copyright 2020 - Transmute Industries Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
 * Defines the list of protocol parameters, intended ONLY to be used within each version of Sidetree.
 */
var protocolParameters = {
  hashAlgorithmInMultihashCode: 18,
  maxAnchorFileSizeInBytes: 1000000,
  maxChunkFileSizeInBytes: 20000000,
  maxDeltaSizeInBytes: 1000,
  maxMapFileSizeInBytes: 1000000,
  maxNumberOfOperationsPerTransactionTime: 600000,
  maxNumberOfTransactionsPerTransactionTime: 300,
  // If you are not using value lock, maxNumberOfOperationsForNoValueTimeLock
  // maxOperationsPerBatch should be the same
  maxNumberOfOperationsForNoValueTimeLock: 1000,
  maxOperationsPerBatch: 1000,
  normalizedFeeToPerOperationFeeMultiplier: 0.01,
  valueTimeLockAmountMultiplier: 600
};

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Encapsulates functionality to serialize/deserialize data that read/write to
 * the blockchain.
 */

var AnchoredDataSerializer = /*#__PURE__*/function () {
  function AnchoredDataSerializer() {}

  /**
   * Converts the given inputs to the string that is to be written to the blockchain.
   *
   * @param dataToBeAnchored The data to serialize.
   */
  AnchoredDataSerializer.serialize = function serialize(dataToBeAnchored) {
    // Concatenate the inputs w/ the delimiter and return
    var anchorString = "" + dataToBeAnchored.numberOfOperations + AnchoredDataSerializer.delimiter + dataToBeAnchored.anchorFileHash;
    return anchorString;
  }
  /**
   * Deserializes the given string that is read from the blockchain into data.
   *
   * @param serializedData The data to be deserialized.
   */
  ;

  AnchoredDataSerializer.deserialize = function deserialize(serializedData) {
    var splitData = serializedData.split(AnchoredDataSerializer.delimiter);

    if (splitData.length !== 2) {
      throw new SidetreeError(ErrorCode.AnchoredDataIncorrectFormat, "Input is not in correct format: " + serializedData);
    }

    var numberOfOperations = AnchoredDataSerializer.parsePositiveInteger(splitData[0]);

    if (numberOfOperations > protocolParameters.maxOperationsPerBatch) {
      throw new SidetreeError(ErrorCode.AnchoredDataNumberOfOperationsGreaterThanMax, "Number of operations " + numberOfOperations + " must be less than or equal to " + protocolParameters.maxOperationsPerBatch);
    }

    return {
      anchorFileHash: splitData[1],
      numberOfOperations: numberOfOperations
    };
  };

  AnchoredDataSerializer.parsePositiveInteger = function parsePositiveInteger(input) {
    // NOTE:
    // /<expression>/ denotes regex.
    // ^ denotes beginning of string.
    // $ denotes end of string.
    // [1-9] denotes leading '0' not allowed.
    // \d* denotes followed by 0 or more decimal digits.
    var isPositiveInteger = /^[1-9]\d*$/.test(input);

    if (!isPositiveInteger) {
      throw new SidetreeError(ErrorCode.AnchoredDataNumberOfOperationsNotPositiveInteger, "Number of operations '" + input + "' is not a positive integer without leading zeros.");
    }

    return Number(input);
  };

  return AnchoredDataSerializer;
}();
AnchoredDataSerializer.delimiter = '.';

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Class that encodes binary blobs into strings.
 * Note that the encode/decode methods may change underlying encoding scheme.
 */

var Encoder = /*#__PURE__*/function () {
  function Encoder() {}

  /**
   * Encodes given Buffer into a Base64URL string.
   */
  Encoder.encode = function encode(content) {
    var encodedContent = base64url.encode(content);
    return encodedContent;
  }
  /**
   * Decodes the given Base64URL string into a Buffer.
   */
  ;

  Encoder.decodeAsBuffer = function decodeAsBuffer(encodedContent) {
    Encoder.validateBase64UrlString(encodedContent);
    var content = base64url.toBuffer(encodedContent);
    return content;
  }
  /**
   * Decodes the given input into the original string.
   */
  ;

  Encoder.decodeAsString = function decodeAsString(encodedContent) {
    return Encoder.decodeBase64UrlAsString(encodedContent);
  }
  /**
   * Decodes the given Base64URL string into the original string.
   */
  ;

  Encoder.decodeBase64UrlAsString = function decodeBase64UrlAsString(input) {
    Encoder.validateBase64UrlString(input);
    var content = base64url.decode(input);
    return content;
  }
  /**
   * Validates if the given input is a Base64URL string.
   * undefined is considered not a valid Base64URL string.
   * NOTE: input is `any` type to handle cases when caller passes input directly from JSON.parse() as `any`.
   * @throws SidetreeError if input is not a Base64URL string.
   */
  ;

  Encoder.validateBase64UrlString = function validateBase64UrlString(input) {
    if (typeof input !== 'string') {
      throw new SidetreeError(ErrorCode.EncoderValidateBase64UrlStringInputNotString, "Input '" + input + "' not a string.");
    }

    var isBase64UrlString = Encoder.isBase64UrlString(input);

    if (!isBase64UrlString) {
      throw new SidetreeError(ErrorCode.EncoderValidateBase64UrlStringInputNotBase64UrlString, "Input '" + input + "' not a Base64URL string.");
    }
  }
  /**
   * Tests if the given string is a Base64URL string.
   */
  ;

  Encoder.isBase64UrlString = function isBase64UrlString(input) {
    // NOTE:
    // '/<expression>/ denotes regex.
    // ^ denotes beginning of string.
    // $ denotes end of string.
    // + denotes one or more characters.
    var isBase64UrlString = /^[A-Za-z0-9_-]+$/.test(input);
    return isBase64UrlString;
  };

  return Encoder;
}();

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var canonicalize = /*#__PURE__*/require('canonicalize');
/**
 * Class containing reusable JSON canonicalization operations using JSON Canonicalization Scheme (JCS).
 */


var JsonCanonicalizer = /*#__PURE__*/function () {
  function JsonCanonicalizer() {}

  /**
   * Canonicalizes the given content as a UTF8 buffer.
   */
  JsonCanonicalizer.canonicalizeAsBuffer = function canonicalizeAsBuffer(content) {
    var canonicalizedString = canonicalize(content);
    var contentBuffer = Buffer.from(canonicalizedString);
    return contentBuffer;
  };

  return JsonCanonicalizer;
}();

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var multihashes = /*#__PURE__*/require('multihashes');
/**
 * Class that performs hashing operations using the multihash format.
 */


var Multihash = /*#__PURE__*/function () {
  function Multihash() {}

  /**
   * Hashes the content using the hashing algorithm specified.
   * @param hashAlgorithmInMultihashCode The hashing algorithm to use. If not given, latest supported hashing algorithm will be used.
   */
  Multihash.hash = function hash(content, hashAlgorithmInMultihashCode) {
    if (hashAlgorithmInMultihashCode === undefined) {
      hashAlgorithmInMultihashCode = protocolParameters.hashAlgorithmInMultihashCode;
    }

    var hash;

    switch (hashAlgorithmInMultihashCode) {
      case 18:
        // SHA256
        hash = crypto.createHash('sha256') // SHA256
        .update(content).digest();
        break;

      default:
        throw new SidetreeError(ErrorCode.MultihashUnsupportedHashAlgorithm);
    }

    var hashAlgorithmName = multihashes.codes[hashAlgorithmInMultihashCode];
    var multihash = multihashes.encode(hash, hashAlgorithmName);
    return multihash;
  }
  /**
   * Canonicalize the given content, then multihashes the result using the lastest supported hash algorithm, then encodes the multihash.
   * Mainly used for testing purposes.
   */
  ;

  Multihash.canonicalizeThenHashThenEncode = function canonicalizeThenHashThenEncode(content) {
    var contentBuffer = JsonCanonicalizer.canonicalizeAsBuffer(content);
    var multihashEncodedString = Multihash.hashThenEncode(contentBuffer, protocolParameters.hashAlgorithmInMultihashCode);
    return multihashEncodedString;
  }
  /**
   * Hashes the content using the hashing algorithm specified then codes the multihash buffer.
   * @param hashAlgorithmInMultihashCode The hashing algorithm to use.
   */
  ;

  Multihash.hashThenEncode = function hashThenEncode(content, hashAlgorithmInMultihashCode) {
    var multihashBuffer = Multihash.hash(content, hashAlgorithmInMultihashCode);
    var multihashEncodedString = Encoder.encode(multihashBuffer);
    return multihashEncodedString;
  }
  /**
   * Given a multihash, returns the code of the hash algorithm used.
   * @throws `SidetreeError` if hash algorithm used for the given multihash is unsupported.
   */
  ;

  Multihash.getHashAlgorithmCode = function getHashAlgorithmCode(multihashBuffer) {
    var multihash = multihashes.decode(multihashBuffer); // Hash algorithm must be SHA-256.

    if (multihash.code !== 18) {
      throw new SidetreeError(ErrorCode.MultihashUnsupportedHashAlgorithm);
    }

    return multihash.code;
  }
  /**
   * Verifies that the given hash is a multihash computed using the latest supported hash algorithm known to this version of code.
   * @throws `SidetreeError` if the given hash is not a multihash computed using the latest supported hash algorithm.
   */
  ;

  Multihash.verifyHashComputedUsingLatestSupportedAlgorithm = function verifyHashComputedUsingLatestSupportedAlgorithm(hash) {
    var latestSupportedHashAlgorithmCode = 18;
    var isLatestSupportedHashFormat = Multihash.isComputedUsingHashAlgorithm(hash, latestSupportedHashAlgorithmCode); // SHA-256.

    if (!isLatestSupportedHashFormat) {
      throw new SidetreeError(ErrorCode.MultihashNotLatestSupportedHashAlgorithm);
    }
  }
  /**
   * Checks if the given hash is a multihash with the expected hashing algorithm.
   */
  ;

  Multihash.isComputedUsingHashAlgorithm = function isComputedUsingHashAlgorithm(hash, expectedHashAlgorithmInMultihashCode) {
    try {
      var multihash = multihashes.decode(hash);
      return multihash.code === expectedHashAlgorithmInMultihashCode;
    } catch (_unused) {
      return false;
    }
  }
  /**
   * Verifies the given content against the given multihash.
   */
  ;

  Multihash.isValidHash = function isValidHash(encodedContent, encodedMultihash) {
    if (encodedContent === undefined) {
      return false;
    }

    try {
      var contentBuffer = Encoder.decodeAsBuffer(encodedContent);
      return Multihash.verify(contentBuffer, encodedMultihash);
    } catch (error) {
      console.log(error);
      return false;
    }
  }
  /**
   * Canonicalizes the given content object, then verifies the multihash against the canonicalized string as a UTF8 buffer.
   */
  ;

  Multihash.canonicalizeAndVerify = function canonicalizeAndVerify(content, encodedMultihash) {
    if (content === undefined) {
      return false;
    }

    try {
      var contentBuffer = JsonCanonicalizer.canonicalizeAsBuffer(content);
      return Multihash.verify(contentBuffer, encodedMultihash);
    } catch (error) {
      console.log(error);
      return false;
    }
  }
  /**
   * Verifies the multihash against the content `Buffer`.
   */
  ;

  Multihash.verify = function verify(content, encodedMultihash) {
    try {
      var multihashBuffer = Encoder.decodeAsBuffer(encodedMultihash);
      var hashAlgorithmCode = Multihash.getHashAlgorithmCode(multihashBuffer);
      var actualHashBuffer = Multihash.hash(content, hashAlgorithmCode);

      if (Buffer.compare(actualHashBuffer, multihashBuffer) !== 0) {
        return false;
      }

      return true;
    } catch (error) {
      console.log(error);
      return false;
    }
  };

  return Multihash;
}();

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * ReadableStream utilities
 */
var ReadableStream = /*#__PURE__*/function () {
  function ReadableStream() {}

  /**
   * Given a readable stream, reads all data until end or error
   * @param stream Fetch readable stream to read
   * @returns a Buffer of the readable stream data
   */
  ReadableStream.readAll =
  /*#__PURE__*/
  function () {
    var _readAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(stream) {
      var content, readBody;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Set callback for the 'readable' event to concatenate chunks of the readable stream.
              content = Buffer.alloc(0);
              stream.on('readable', function () {
                // NOTE: Cast to any is to work-around incorrect TS definition for read() where
                // `null` should be a possible return type but is not defined in @types/node: 10.12.18.
                var chunk = stream.read();

                while (chunk !== null) {
                  content = Buffer.concat([content, chunk]);
                  chunk = stream.read();
                }
              }); // Create a promise to wrap the successful/failed read events.

              readBody = new Promise(function (resolve, reject) {
                stream.on('end', resolve);
                stream.on('error', reject);
              }); // Wait until the read is completed.

              _context.next = 5;
              return readBody;

            case 5:
              return _context.abrupt("return", content);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function readAll(_x) {
      return _readAll.apply(this, arguments);
    }

    return readAll;
  }();

  return ReadableStream;
}();

/*
 * The code in this file originated from
 * @see https://github.com/decentralized-identity/sidetree
 * For the list of changes that was made to the original code
 * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md
 *
 * Copyright 2020 - Transmute Industries Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Class containing reusable sorted array operations.
 */
var SortedArray = /*#__PURE__*/function () {
  function SortedArray() {}

  /**
   * Performs binary search on an item against the given sorted array using the given compare function.
   * @returns Returns the index of the item if found; `undefined` otherwise.
   */
  SortedArray.binarySearch = function binarySearch(sortedArray, searchItem, compare) {
    var lowerBoundaryIndex = 0;
    var upperBoundaryIndex = sortedArray.length - 1;
    var middleIndex = 0;

    while (lowerBoundaryIndex <= upperBoundaryIndex) {
      middleIndex = Math.floor((lowerBoundaryIndex + upperBoundaryIndex) / 2);
      var comparisonResult = compare(sortedArray[middleIndex], searchItem);

      if (comparisonResult > 0) {
        // If value pointed by middleIndex is greater than the searchItem:
        upperBoundaryIndex = middleIndex - 1;
      } else if (comparisonResult < 0) {
        // If value pointed by middleIndex is smaller than the searchItem:
        lowerBoundaryIndex = middleIndex + 1;
      } else {
        // Else we've found the item.
        return middleIndex;
      }
    }

    return undefined;
  };

  return SortedArray;
}();

exports.AbstractVersionMetadata = AbstractVersionMetadata;
exports.AnchoredDataSerializer = AnchoredDataSerializer;
exports.CoreErrorCode = CoreErrorCode;
exports.Encoder = Encoder;
exports.ErrorCode = ErrorCode;
exports.FetchResultCode = FetchResultCode$1;
exports.JsonCanonicalizer = JsonCanonicalizer;
exports.Multihash = Multihash;
exports.OperationType = OperationType$1;
exports.PublicKeyPurpose = PublicKeyPurpose$1;
exports.ReadableStream = ReadableStream;
exports.ResponseStatus = ResponseStatus$1;
exports.SharedErrorCode = SharedErrorCode;
exports.SidetreeError = SidetreeError;
exports.SortedArray = SortedArray;
exports.TransactionProcessingStatus = TransactionProcessingStatus$1;
exports.protocolParameters = protocolParameters;
//# sourceMappingURL=common.cjs.development.js.map
