{"version":3,"file":"core.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/util/ArrayMethods.ts","../src/util/Compressor.ts","../src/DocumentComposer.ts","../src/util/JsonAsync.ts","../src/OperationUtils.ts","../src/CreateOperation.ts","../src/util/Jwk.ts","../src/util/Jws.ts","../src/DeactivateOperation.ts","../src/RecoverOperation.ts","../src/write/AnchorFile.ts","../src/write/BatchScheduler.ts","../src/write/ChunkFile.ts","../src/DownloadManager.ts","../src/UpdateOperation.ts","../src/write/MapFile.ts","../src/ThroughputLimiter.ts","../src/Observer.ts","../src/Operation.ts","../src/test/generators/OperationGenerator.ts","../src/Resolver.ts","../src/ServiceInfoProvider.ts","../src/FeeManager.ts","../src/ValueTimeLockVerifier.ts","../src/TransactionProcessor.ts","../src/TransactionSelector.ts","../src/LogColor.ts","../src/write/BatchWriter.ts","../src/OperationProcessor.ts","../src/Did.ts","../src/RequestHandler.ts","../src/VersionMetadata.ts","../src/VersionManager.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Class containing methods that operates against an array.\n */\nexport default class ArrayMethods {\n  /**\n   * Checkes to see if there are duplicates in the given array.\n   */\n  public static hasDuplicates<T>(array: Array<T>): boolean {\n    const uniqueValues = new Set<T>();\n\n    for (let i = 0; i < array.length; i++) {\n      const value = array[i];\n      if (uniqueValues.has(value)) {\n        return true;\n      }\n      uniqueValues.add(value);\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks that entries in array 2 is not in array 1.\n   */\n  public static areMutuallyExclusive<T>(\n    array1: Array<T>,\n    array2: Array<T>\n  ): boolean {\n    const valuesInArray1 = new Set<T>(array1);\n\n    for (const value of array2) {\n      if (valuesInArray1.has(value)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst pako = require('pako');\n\n/**\n * Encapsulates functionality to compress/decompress data.\n */\nexport default class Compressor {\n  /**\n   * Compresses the data in gzip and return it as buffer.\n   * @param inputAsBuffer The input string to be compressed.\n   */\n  public static async compress(inputAsBuffer: Buffer): Promise<Buffer> {\n    const result = pako.deflate(Buffer.from(inputAsBuffer));\n    return Buffer.from(result);\n  }\n\n  /**\n   * Decompresses the input and returns it as buffer.\n   * @param inputAsBuffer The gzip compressed data.\n   */\n  public static async decompress(inputAsBuffer: Buffer): Promise<Buffer> {\n    const result = pako.inflate(inputAsBuffer);\n    return Buffer.from(result);\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DocumentModel,\n  Encoder,\n  DidState,\n  ErrorCode,\n  SidetreeError,\n  PublicKeyPurpose,\n} from '@sidetree/common';\nimport UpdateOperation from './UpdateOperation';\nimport jsonpatch from 'fast-json-patch';\n\n/**\n * Class that handles the composition of operations into final external-facing document.\n */\nexport default class DocumentComposer {\n  /**\n   * Transforms the given DID state into a DID Document.\n   */\n  public static transformToExternalDocument(\n    didState: DidState,\n    did: string\n  ): any {\n    // If the DID is deactivated.\n    if (didState.nextRecoveryCommitmentHash === undefined) {\n      return { status: 'deactivated' };\n    }\n\n    const document = didState.document as DocumentModel;\n\n    const shortFormDid = did.split('?')[0];\n\n    // Only populate `publicKey` if general purpose exists.\n    // Only populate `authentication` if auth purpose exists.\n    const authentication: any[] = [];\n    const assertionMethod: any[] = [];\n    const capabilityInvocation: any[] = [];\n    const capabilityDelegation: any[] = [];\n    const keyAgreement: any[] = [];\n\n    const public_keys: any[] = [];\n    if (Array.isArray(document.public_keys)) {\n      for (const publicKey of document.public_keys) {\n        const id = '#' + publicKey.id;\n        const didDocumentPublicKey = {\n          id: id,\n          controller: shortFormDid,\n          type: publicKey.type,\n          publicKeyJwk: publicKey.jwk,\n        };\n        const purposeSet: Set<string> = new Set(publicKey.purpose);\n\n        if (purposeSet.has(PublicKeyPurpose.General)) {\n          public_keys.push(didDocumentPublicKey);\n\n          if (purposeSet.has(PublicKeyPurpose.Auth)) {\n            authentication.push(id);\n          }\n          if (purposeSet.has(PublicKeyPurpose.AssertionMethod)) {\n            assertionMethod.push(id);\n          }\n          if (purposeSet.has(PublicKeyPurpose.CapabilityInvocation)) {\n            capabilityInvocation.push(id);\n          }\n          if (purposeSet.has(PublicKeyPurpose.CapabilityDelegation)) {\n            capabilityDelegation.push(id);\n          }\n          if (purposeSet.has(PublicKeyPurpose.KeyAgreement)) {\n            keyAgreement.push(id);\n          }\n        } else if (purposeSet.has(PublicKeyPurpose.Auth)) {\n          authentication.push(didDocumentPublicKey);\n        } else if (purposeSet.has(PublicKeyPurpose.AssertionMethod)) {\n          assertionMethod.push(assertionMethod);\n        } else if (purposeSet.has(PublicKeyPurpose.CapabilityInvocation)) {\n          capabilityInvocation.push(didDocumentPublicKey);\n        } else if (purposeSet.has(PublicKeyPurpose.CapabilityDelegation)) {\n          capabilityDelegation.push(didDocumentPublicKey);\n        } else if (purposeSet.has(PublicKeyPurpose.KeyAgreement)) {\n          keyAgreement.push(didDocumentPublicKey);\n        }\n      }\n    }\n\n    // Only update `service_endpoints` if the array is present\n    const service_endpoints = [];\n    if (Array.isArray(document.service_endpoints)) {\n      for (const serviceEndpoint of document.service_endpoints) {\n        const didDocumentServiceEndpoint = {\n          id: '#' + serviceEndpoint.id,\n          type: serviceEndpoint.type,\n          serviceEndpoint: serviceEndpoint.endpoint,\n        };\n        service_endpoints.push(didDocumentServiceEndpoint);\n      }\n    }\n\n    const didDocument: any = {\n      id: shortFormDid,\n      '@context': [\n        'https://www.w3.org/ns/did/v1',\n        'https://ns.did.ai/transmute/v1',\n        { '@base': shortFormDid },\n      ],\n    };\n\n    if (public_keys.length !== 0) {\n      didDocument.publicKey = public_keys;\n    }\n\n    if (authentication.length !== 0) {\n      didDocument.authentication = authentication;\n    }\n\n    if (assertionMethod.length !== 0) {\n      didDocument.assertionMethod = assertionMethod;\n    }\n\n    if (capabilityInvocation.length !== 0) {\n      didDocument.capabilityInvocation = capabilityInvocation;\n    }\n\n    if (capabilityDelegation.length !== 0) {\n      didDocument.capabilityDelegation = capabilityDelegation;\n    }\n\n    if (keyAgreement.length !== 0) {\n      didDocument.keyAgreement = keyAgreement;\n    }\n\n    if (service_endpoints.length !== 0) {\n      didDocument.service = service_endpoints;\n    }\n\n    const didResolutionResult: any = {\n      '@context': 'https://w3id.org/did-resolution/v1',\n      didDocument: didDocument,\n      didDocumentMetadata: {\n        recoveryCommitment: didState.nextRecoveryCommitmentHash,\n        updateCommitment: didState.nextUpdateCommitmentHash,\n      },\n    };\n\n    return JSON.parse(JSON.stringify(didResolutionResult));\n  }\n\n  /**\n   * Applies the update operation to the given document.\n   * @returns The resultant document.\n   * @throws SidetreeError if invalid operation is given.\n   */\n  public static async applyUpdateOperation(\n    operation: UpdateOperation,\n    document: any\n  ): Promise<any> {\n    const resultantDocument = DocumentComposer.applyPatches(\n      document,\n      operation.delta!.patches\n    );\n\n    return resultantDocument;\n  }\n\n  /**\n   * Validates the schema of the given full document.\n   * @throws SidetreeError if given document patch fails validation.\n   */\n  private static validateDocument(document: any) {\n    if (document === undefined) {\n      throw new SidetreeError(ErrorCode.DocumentComposerDocumentMissing);\n    }\n\n    const allowedProperties = new Set(['public_keys', 'service_endpoints']);\n    for (const property in document) {\n      if (!allowedProperties.has(property)) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerUnknownPropertyInDocument,\n          `Unexpected property ${property} in document.`\n        );\n      }\n    }\n\n    // Verify 'public_keys' property if it exists.\n    if (Object.prototype.hasOwnProperty.call(document, 'public_keys')) {\n      DocumentComposer.validatePublicKeys(document.public_keys);\n    }\n\n    // Verify 'service_endpoints' property if it exists.\n    if (Object.prototype.hasOwnProperty.call(document, 'service_endpoints')) {\n      // Verify each endpoint entry in service_endpoints.\n      DocumentComposer.validateServiceEndpoints(document.service_endpoints);\n    }\n  }\n\n  /**\n   * Validates the schema of the given update document patch.\n   * @throws SidetreeError if given document patch fails validation.\n   */\n  public static validateDocumentPatches(patches: any) {\n    if (!Array.isArray(patches)) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerUpdateOperationDocumentPatchesNotArray\n      );\n    }\n\n    for (const patch of patches) {\n      DocumentComposer.validatePatch(patch);\n    }\n  }\n\n  private static validatePatch(patch: any) {\n    const action = patch.action;\n    switch (action) {\n      case 'replace':\n        DocumentComposer.validateDocument(patch.document);\n        break;\n      case 'add-public-keys':\n        DocumentComposer.validateAddPublicKeysPatch(patch);\n        break;\n      case 'remove-public-keys':\n        DocumentComposer.validateRemovePublicKeysPatch(patch);\n        break;\n      case 'add-service-endpoints':\n        DocumentComposer.validateAddServiceEndpointsPatch(patch);\n        break;\n      case 'remove-service-endpoints':\n        DocumentComposer.validateRemoveServiceEndpointsPatch(patch);\n        break;\n      case 'ietf-json-patch':\n        DocumentComposer.validateIetfJsonPatch(patch);\n        break;\n      default:\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPatchMissingOrUnknownAction\n        );\n    }\n  }\n\n  private static validateIetfJsonPatch(patch: any): void {\n    const patchProperties = Object.keys(patch);\n    if (patchProperties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchMissingOrUnknownProperty\n      );\n    }\n    const error = jsonpatch.validate(patch.patches);\n    if (error) {\n      console.warn(error);\n      throw new SidetreeError(error.name);\n    }\n  }\n\n  private static validateAddPublicKeysPatch(patch: any) {\n    const patchProperties = Object.keys(patch);\n    if (patchProperties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchMissingOrUnknownProperty\n      );\n    }\n\n    DocumentComposer.validatePublicKeys(patch.public_keys);\n  }\n\n  private static validatePublicKeys(public_keys: any) {\n    if (!Array.isArray(public_keys)) {\n      throw new SidetreeError(ErrorCode.DocumentComposerPublicKeysNotArray);\n    }\n\n    const publicKeyIdSet: Set<string> = new Set();\n    for (const publicKey of public_keys) {\n      const publicKeyProperties = Object.keys(publicKey);\n      // the expected fields are id, purpose, type and jwk\n      if (publicKeyProperties.length !== 4) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPublicKeyMissingOrUnknownProperty\n        );\n      }\n\n      if (typeof publicKey.jwk !== 'object' || Array.isArray(publicKey.jwk)) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPublicKeyJwkMissingOrIncorrectType\n        );\n      }\n\n      if (typeof publicKey.type !== 'string') {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPublicKeyTypeMissingOrIncorrectType\n        );\n      }\n\n      DocumentComposer.validateId(publicKey.id);\n\n      // 'id' must be unique\n      if (publicKeyIdSet.has(publicKey.id)) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPublicKeyIdDuplicated\n        );\n      }\n      publicKeyIdSet.add(publicKey.id);\n\n      if (!Array.isArray(publicKey.purpose) || publicKey.purpose.length === 0) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPublicKeyPurposeMissingOrUnknown\n        );\n      }\n\n      if (publicKey.purpose.length > Object.values(PublicKeyPurpose).length) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPublicKeyPurposeExceedsMaxLength\n        );\n      }\n\n      const validPurposes = new Set(Object.values(PublicKeyPurpose));\n      // Purpose must be one of the valid ones in KeyPurpose\n      for (const purpose of publicKey.purpose) {\n        if (!validPurposes.has(purpose)) {\n          throw new SidetreeError(\n            ErrorCode.DocumentComposerPublicKeyInvalidPurpose\n          );\n        }\n      }\n    }\n  }\n\n  private static validateRemovePublicKeysPatch(patch: any) {\n    const patchProperties = Object.keys(patch);\n    if (patchProperties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchMissingOrUnknownProperty\n      );\n    }\n\n    if (!Array.isArray(patch.public_keys)) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchPublicKeyIdsNotArray\n      );\n    }\n\n    for (const publicKeyId of patch.public_keys) {\n      if (typeof publicKeyId !== 'string') {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPatchPublicKeyIdNotString\n        );\n      }\n    }\n  }\n\n  /**\n   * validate update patch for removing service endpoints\n   */\n  private static validateRemoveServiceEndpointsPatch(patch: any) {\n    const patchProperties = Object.keys(patch);\n    if (patchProperties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchMissingOrUnknownProperty\n      );\n    }\n\n    if (!Array.isArray(patch.ids)) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchServiceEndpointIdsNotArray\n      );\n    }\n\n    for (const id of patch.ids) {\n      DocumentComposer.validateId(id);\n    }\n  }\n\n  /**\n   * Validates update patch for adding service endpoints.\n   */\n  private static validateAddServiceEndpointsPatch(patch: any) {\n    const patchProperties = Object.keys(patch);\n    if (patchProperties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchMissingOrUnknownProperty\n      );\n    }\n\n    if (!Array.isArray(patch.service_endpoints)) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchServiceEndpointsNotArray\n      );\n    }\n\n    DocumentComposer.validateServiceEndpoints(patch.service_endpoints);\n  }\n\n  /**\n   * Validates and parses services endpoints\n   * @param service_endpoints the service endpoints to validate and parse\n   */\n  private static validateServiceEndpoints(service_endpoints: any) {\n    if (!Array.isArray(service_endpoints)) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerPatchServiceEndpointsNotArray\n      );\n    }\n\n    for (const serviceEndpoint of service_endpoints) {\n      const serviceEndpointProperties = Object.keys(serviceEndpoint);\n      if (serviceEndpointProperties.length !== 3) {\n        // type, id, and endpoint\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerServiceEndpointMissingOrUnknownProperty\n        );\n      }\n\n      DocumentComposer.validateId(serviceEndpoint.id);\n\n      if (typeof serviceEndpoint.type !== 'string') {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPatchServiceEndpointTypeNotString\n        );\n      }\n      if (serviceEndpoint.type.length > 30) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPatchServiceEndpointTypeTooLong\n        );\n      }\n      if (typeof serviceEndpoint.endpoint !== 'string') {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPatchServiceEndpointServiceEndpointNotString\n        );\n      }\n      if (serviceEndpoint.endpoint.length > 100) {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPatchServiceEndpointServiceEndpointTooLong\n        );\n      }\n\n      try {\n        // just want to validate url, no need to assign to variable, it will throw if not valid\n        // tslint:disable-next-line\n        new URL(serviceEndpoint.endpoint);\n      } catch {\n        throw new SidetreeError(\n          ErrorCode.DocumentComposerPatchServiceEndpointServiceEndpointNotValidUrl\n        );\n      }\n    }\n  }\n\n  private static validateId(id: any) {\n    if (typeof id !== 'string') {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerIdNotString,\n        `ID not string: ${JSON.stringify(id)} is of type '${typeof id}'`\n      );\n    }\n    if (id.length > 50) {\n      throw new SidetreeError(ErrorCode.DocumentComposerIdTooLong);\n    }\n\n    if (!Encoder.isBase64UrlString(id)) {\n      throw new SidetreeError(\n        ErrorCode.DocumentComposerIdNotUsingBase64UrlCharacterSet\n      );\n    }\n  }\n\n  /**\n   * Applies the given patches in order to the given document.\n   * NOTE: Assumes no schema validation is needed, since validation should've already occurred at the time of the operation being parsed.\n   * @returns The resultant document.\n   */\n  public static applyPatches(document: any, patches: any[]): any {\n    // Loop through and apply all patches.\n    let resultantDocument = document;\n    for (const patch of patches) {\n      resultantDocument = DocumentComposer.applyPatchToDidDocument(\n        resultantDocument,\n        patch\n      );\n    }\n\n    return resultantDocument;\n  }\n\n  /**\n   * Applies the given patch to the given DID Document.\n   */\n  private static applyPatchToDidDocument(\n    document: DocumentModel,\n    patch: any\n  ): any {\n    if (patch.action === 'replace') {\n      return patch.document;\n    } else if (patch.action === 'add-public-keys') {\n      return DocumentComposer.addPublicKeys(document, patch);\n    } else if (patch.action === 'remove-public-keys') {\n      return DocumentComposer.removePublicKeys(document, patch);\n    } else if (patch.action === 'add-service-endpoints') {\n      return DocumentComposer.addServiceEndpoints(document, patch);\n    } else if (patch.action === 'remove-service-endpoints') {\n      return DocumentComposer.removeServiceEndpoints(document, patch);\n    } else if (patch.action === 'ietf-json-patch') {\n      return DocumentComposer.applyIetfJsonPatch(document, patch);\n    }\n  }\n\n  private static applyIetfJsonPatch(document: any, patch: any) {\n    const res = jsonpatch.applyPatch({ ...document }, patch.patches);\n    return res.newDocument;\n  }\n\n  /**\n   * Adds public keys to document.\n   */\n  private static addPublicKeys(\n    document: DocumentModel,\n    patch: any\n  ): DocumentModel {\n    const publicKeyMap = new Map(\n      (document.public_keys || []).map((publicKey) => [publicKey.id, publicKey])\n    );\n\n    // Loop through all given public keys and add them if they don't exist already.\n    for (const publicKey of patch.public_keys) {\n      // NOTE: If a key ID already exists, we will just replace the existing key.\n      // Not throwing error will minimize the need (thus risk) of reusing exposed update reveal value.\n      publicKeyMap.set(publicKey.id, publicKey);\n    }\n\n    document.public_keys = Array.from(publicKeyMap.entries()).map(\n      (pkm: any) => pkm[1]\n    );\n\n    return document;\n  }\n\n  /**\n   * Removes public keys from document.\n   */\n  private static removePublicKeys(\n    document: DocumentModel,\n    patch: any\n  ): DocumentModel {\n    const publicKeyMap = new Map(\n      (document.public_keys || []).map((publicKey) => [publicKey.id, publicKey])\n    );\n\n    // Loop through all given public key IDs and delete them from the existing public key only if it is not a recovery key.\n    for (const publicKey of patch.public_keys) {\n      const existingKey = publicKeyMap.get(publicKey);\n\n      if (existingKey !== undefined) {\n        publicKeyMap.delete(publicKey);\n      }\n      // NOTE: Else we will just treat this key removal as a no-op.\n      // Not throwing error will minimize the need (thus risk) of reusing exposed update reveal value.\n    }\n\n    document.public_keys = Array.from(publicKeyMap.entries()).map(\n      (pkm: any) => pkm[1]\n    );\n\n    return document;\n  }\n\n  private static addServiceEndpoints(\n    document: DocumentModel,\n    patch: any\n  ): DocumentModel {\n    const service_endpoints = patch.service_endpoints;\n\n    if (document.service_endpoints === undefined) {\n      // create a new array if service did not exist\n      document.service_endpoints = [];\n    }\n\n    const idToIndexMapper = new Map();\n    // map all id and their index\n    for (const idx in document.service_endpoints) {\n      idToIndexMapper.set(document.service_endpoints[idx].id, idx);\n    }\n\n    for (const serviceEndpoint of service_endpoints) {\n      if (idToIndexMapper.has(serviceEndpoint.id)) {\n        const idx = idToIndexMapper.get(serviceEndpoint.id);\n        document.service_endpoints[idx] = serviceEndpoint;\n      } else {\n        document.service_endpoints.push(serviceEndpoint);\n      }\n    }\n\n    return document;\n  }\n\n  private static removeServiceEndpoints(\n    document: DocumentModel,\n    patch: any\n  ): DocumentModel {\n    if (document.service_endpoints === undefined) {\n      return document;\n    }\n\n    const idsToRemove = new Set(patch.ids);\n    document.service_endpoints = document.service_endpoints.filter(\n      (serviceEndpoint) => !idsToRemove.has(serviceEndpoint.id)\n    );\n\n    return document;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst yieldableJson = require('yieldable-json');\n\n/**\n * A JSON library that performs operations asynchronously.\n */\nexport default class JsonAsync {\n  /**\n   * Parses the given operation into a JavaScript object asynchronously,\n   * to allow the event loop a chance to handle requests.\n   */\n  public static async parse(jsonData: Buffer | string): Promise<any> {\n    // Create a promise to wrap the successful/failed read events.\n    const jsonParsePromise = new Promise((resolve, reject) => {\n      yieldableJson.parseAsync(jsonData, (err: any, data: any) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n\n    // Wait until the JSON parsing is completed.\n    const result = await jsonParsePromise;\n    return result;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DeltaModel,\n  Encoder,\n  ErrorCode,\n  Multihash,\n  SidetreeError,\n} from '@sidetree/common';\nimport DocumentComposer from './DocumentComposer';\nimport JsonAsync from './util/JsonAsync';\n\n/**\n * A class that contains Sidetree operation utility methods.\n */\nexport default class OperationUtils {\n  /**\n   * Parses the given encoded delta string into an internal `DeltaModel`.\n   */\n  public static async parseDelta(deltaEncodedString: any): Promise<DeltaModel> {\n    if (typeof deltaEncodedString !== 'string') {\n      throw new SidetreeError(ErrorCode.DeltaMissingOrNotString);\n    }\n\n    const deltaJsonString = Encoder.decodeAsString(deltaEncodedString);\n    const delta = await JsonAsync.parse(deltaJsonString);\n\n    const properties = Object.keys(delta);\n    if (properties.length !== 2) {\n      throw new SidetreeError(ErrorCode.DeltaMissingOrUnknownProperty);\n    }\n\n    if (delta.patches === undefined) {\n      throw new SidetreeError(ErrorCode.OperationDocumentPatchesMissing);\n    }\n\n    // Validate `patches` property using the DocumentComposer.\n    DocumentComposer.validateDocumentPatches(delta.patches);\n\n    const nextUpdateCommitment = Encoder.decodeAsBuffer(\n      delta.update_commitment\n    );\n    Multihash.verifyHashComputedUsingLatestSupportedAlgorithm(\n      nextUpdateCommitment\n    );\n\n    return {\n      patches: delta.patches,\n      update_commitment: delta.update_commitment,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OperationType,\n  ErrorCode,\n  SidetreeError,\n  DeltaModel,\n  OperationModel,\n  Multihash,\n  Encoder,\n} from '@sidetree/common';\nimport OperationUtils from './OperationUtils';\nimport JsonAsync from './util/JsonAsync';\n\ninterface SuffixDataModel {\n  delta_hash: string;\n  recovery_commitment: string;\n}\n\n/**\n * A class that represents a create operation.\n */\nexport default class CreateOperation implements OperationModel {\n  /** The original request buffer sent by the requester. */\n  public readonly operationBuffer: Buffer;\n\n  /** The unique suffix of the DID. */\n  public readonly didUniqueSuffix: string;\n\n  /** The type of operation. */\n  public readonly type: OperationType;\n\n  /** Data used to generate the unique DID suffix. */\n  public readonly suffixData: SuffixDataModel;\n\n  /** Delta. */\n  public readonly delta: DeltaModel | undefined;\n\n  /** Encoded string of the suffix data. */\n  public readonly encodedSuffixData: string;\n\n  /** Encoded string of the delta. */\n  public readonly encodedDelta: string | undefined;\n\n  /**\n   * NOTE: should only be used by `parse()` and `parseObject()` else the contructed instance could be invalid.\n   */\n  private constructor(\n    operationBuffer: Buffer,\n    didUniqueSuffix: string,\n    encodedSuffixData: string,\n    suffixData: SuffixDataModel,\n    encodedDelta: string | undefined,\n    delta: DeltaModel | undefined\n  ) {\n    this.didUniqueSuffix = didUniqueSuffix;\n    this.type = OperationType.Create;\n    this.operationBuffer = operationBuffer;\n    this.encodedSuffixData = encodedSuffixData;\n    this.suffixData = suffixData;\n    this.encodedDelta = encodedDelta;\n    this.delta = delta;\n  }\n\n  /**\n   * Computes the DID unique suffix given the encoded suffix data string.\n   */\n  private static computeDidUniqueSuffix(encodedSuffixData: string): string {\n    const suffixDataBuffer = Encoder.decodeAsBuffer(encodedSuffixData);\n    const multihash = Multihash.hash(suffixDataBuffer);\n    const encodedMultihash = Encoder.encode(multihash);\n    return encodedMultihash;\n  }\n\n  /**\n   * Parses the given input as a create operation entry in the anchor file.\n   */\n  public static async parseOperationFromAnchorFile(\n    input: any\n  ): Promise<CreateOperation> {\n    // Issue #442 - Replace `operationBuffer` in `OperationModel` and `AnchoredOperationModel` with actual operation request\n    const operationBuffer = Buffer.from(JSON.stringify(input));\n    const operation = await CreateOperation.parseObject(\n      input,\n      operationBuffer,\n      true\n    );\n    return operation;\n  }\n\n  /**\n   * Parses the given buffer as a `CreateOperation`.\n   */\n  public static async parse(operationBuffer: Buffer): Promise<CreateOperation> {\n    const operationJsonString = operationBuffer.toString();\n    const operationObject = await JsonAsync.parse(operationJsonString);\n    const createOperation = await CreateOperation.parseObject(\n      operationObject,\n      operationBuffer,\n      false\n    );\n    return createOperation;\n  }\n\n  /**\n   * Parses the given operation object as a `CreateOperation`.\n   * The `operationBuffer` given is assumed to be valid and is assigned to the `operationBuffer` directly.\n   * NOTE: This method is purely intended to be used as an optimization method over the `parse` method in that\n   * JSON parsing is not required to be performed more than once when an operation buffer of an unknown operation type is given.\n   * @param anchorFileMode If set to true, then `delta` and `type` properties are expected to be absent.\n   */\n  public static async parseObject(\n    operationObject: any,\n    operationBuffer: Buffer,\n    anchorFileMode: boolean\n  ): Promise<CreateOperation> {\n    let expectedPropertyCount = 3;\n    if (anchorFileMode) {\n      expectedPropertyCount = 1;\n    }\n\n    const properties = Object.keys(operationObject);\n    if (properties.length !== expectedPropertyCount) {\n      throw new SidetreeError(\n        ErrorCode.CreateOperationMissingOrUnknownProperty\n      );\n    }\n\n    const encodedSuffixData = operationObject.suffix_data;\n    const suffixData = await CreateOperation.parseSuffixData(encodedSuffixData);\n\n    // If not in anchor file mode, we need to validate `type` and `delta` properties.\n    let encodedDelta = undefined;\n    let delta = undefined;\n    if (!anchorFileMode) {\n      if (operationObject.type !== OperationType.Create) {\n        throw new SidetreeError(ErrorCode.CreateOperationTypeIncorrect);\n      }\n\n      encodedDelta = operationObject.delta;\n      try {\n        delta = await OperationUtils.parseDelta(operationObject.delta);\n      } catch {\n        // For compatibility with data pruning, we have to assume that `delta` may be unavailable,\n        // thus an operation with invalid `delta` needs to be processed as an operation with unavailable `delta`,\n        // so here we let `delta` be `undefined`.\n      }\n    }\n\n    const didUniqueSuffix = CreateOperation.computeDidUniqueSuffix(\n      operationObject.suffix_data\n    );\n    return new CreateOperation(\n      operationBuffer,\n      didUniqueSuffix,\n      encodedSuffixData,\n      suffixData,\n      encodedDelta,\n      delta\n    );\n  }\n\n  private static async parseSuffixData(\n    suffixDataEncodedString: any\n  ): Promise<SuffixDataModel> {\n    if (typeof suffixDataEncodedString !== 'string') {\n      throw new SidetreeError(\n        ErrorCode.CreateOperationSuffixDataMissingOrNotString\n      );\n    }\n\n    const suffixDataJsonString = Encoder.decodeAsString(\n      suffixDataEncodedString\n    );\n    const suffixData = await JsonAsync.parse(suffixDataJsonString);\n\n    const properties = Object.keys(suffixData);\n    if (properties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.CreateOperationSuffixDataMissingOrUnknownProperty\n      );\n    }\n\n    const delta_hash = Encoder.decodeAsBuffer(suffixData.delta_hash);\n    const nextRecoveryCommitment = Encoder.decodeAsBuffer(\n      suffixData.recovery_commitment\n    );\n\n    Multihash.verifyHashComputedUsingLatestSupportedAlgorithm(delta_hash);\n    Multihash.verifyHashComputedUsingLatestSupportedAlgorithm(\n      nextRecoveryCommitment\n    );\n\n    return {\n      delta_hash: suffixData.delta_hash,\n      recovery_commitment: suffixData.recovery_commitment,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorCode,\n  SidetreeError,\n  PublicKeyJwkSecp256k1,\n  PublicKeyJwkEd25519,\n  PrivateKeyJwkSecp256k1,\n  PrivateKeyJwkEd25519,\n  PrivateKeyJwk,\n  PublicKeyJwk,\n} from '@sidetree/common';\nimport { JWK } from 'jose';\nimport * as bip39 from 'bip39';\nimport { Ed25519KeyPair } from '@transmute/did-key-ed25519';\nimport hdkey from 'hdkey';\nimport { from as keytoFrom } from '@trust/keyto';\n\n/**\n * Class containing reusable JWK operations.\n */\nexport default class Jwk {\n  /**\n   * Generates ED25519 key pair.\n   * Mainly used for testing.\n   * @returns [publicKey, privateKey]\n   */\n  public static async generateEd25519KeyPair(): Promise<\n    [PublicKeyJwkEd25519, PrivateKeyJwkEd25519]\n  > {\n    const keyPair = await JWK.generate('OKP', 'Ed25519');\n    const privateKey = keyPair.toJWK(true) as PrivateKeyJwkEd25519;\n    const publicKey = keyPair.toJWK(false) as PublicKeyJwkEd25519;\n    return [publicKey, privateKey];\n  }\n\n  // Helper method to generate keys from a mnemonic\n  public static async getBufferAtIndex(\n    mnemonic: string,\n    index: number\n  ): Promise<Buffer> {\n    const seed = await bip39.mnemonicToSeed(mnemonic);\n    const root = hdkey.fromMasterSeed(seed);\n    // TODO: 60 is specific to ethereum, we could use another value unique to sidetree\n    const hdPath = `m/44'/60'/0'/0/${index}`;\n    const addrNode = root.derive(hdPath);\n    return addrNode.privateKey;\n  }\n\n  private static async generateEd25519KeyPairFromMnemonic(\n    mnemonic: string,\n    index: number\n  ): Promise<[PublicKeyJwkEd25519, PrivateKeyJwkEd25519]> {\n    const privateKeyBuffer = await Jwk.getBufferAtIndex(mnemonic, index);\n    const keyPair = await Ed25519KeyPair.generate({\n      seed: privateKeyBuffer,\n    });\n    const ed25519KeyPair = new Ed25519KeyPair(keyPair);\n    const publicKeyJwk = (await ed25519KeyPair.toJwk(\n      false\n    )) as PublicKeyJwkEd25519;\n    const privateKeyJwk = (await ed25519KeyPair.toJwk(\n      true\n    )) as PrivateKeyJwkEd25519;\n    return [publicKeyJwk, privateKeyJwk];\n  }\n\n  /**\n   * Generates SECP256K1 key pair.\n   * Mainly used for testing.\n   * @returns [publicKey, privateKey]\n   */\n  public static async generateSecp256k1KeyPair(): Promise<\n    [PublicKeyJwkSecp256k1, PrivateKeyJwkSecp256k1]\n  > {\n    const keyPair = await JWK.generate('EC', 'secp256k1');\n    const publicKey = keyPair.toJWK(false) as PublicKeyJwkSecp256k1;\n    const privateKey = keyPair.toJWK(true) as PrivateKeyJwkSecp256k1;\n    return [publicKey, privateKey];\n  }\n\n  public static async generateJwkKeyPairFromMnemonic(\n    keyType: string,\n    mnemonic: string,\n    index: number\n  ): Promise<[PublicKeyJwk, PrivateKeyJwk]> {\n    switch (keyType) {\n      case 'secp256k1':\n        return this.generateSecp256k1KeyPairFromMnemonic(mnemonic, index);\n      case 'ed25519':\n        return this.generateEd25519KeyPairFromMnemonic(mnemonic, index);\n      default:\n        throw new Error('Invalid key type');\n    }\n  }\n\n  private static async generateSecp256k1KeyPairFromMnemonic(\n    mnemonic: string,\n    index: number\n  ): Promise<[PublicKeyJwkSecp256k1, PrivateKeyJwkSecp256k1]> {\n    const privateKeyBuffer = await Jwk.getBufferAtIndex(mnemonic, index);\n    const publicKeyJwk = keytoFrom(privateKeyBuffer, 'blk').toJwk('public');\n    publicKeyJwk.crv = 'secp256k1';\n    const privateKeyJwk = keytoFrom(privateKeyBuffer, 'blk').toJwk('private');\n    privateKeyJwk.crv = 'secp256k1';\n    return [publicKeyJwk, privateKeyJwk];\n  }\n\n  /**\n   * Validates the given key is a public key in JWK format allowed by Sidetree.\n   * @throws SidetreeError if given object is not a key in JWK format allowed by Sidetree.\n   */\n  public static validatePublicJwk(jwk: any): void {\n    if (jwk === undefined) {\n      throw new SidetreeError(ErrorCode.JwkUndefined);\n    }\n\n    // TODO: Check validity with JSON schema...\n    const allowedProperties = new Set(['kty', 'crv', 'x', 'y', 'kid']);\n    for (const property in jwk) {\n      if (!allowedProperties.has(property)) {\n        throw new SidetreeError(ErrorCode.JwkHasUnknownProperty);\n      }\n    }\n\n    switch (jwk.crv) {\n      case 'Ed25519':\n        if (jwk.kty !== 'OKP') {\n          throw new SidetreeError(ErrorCode.JwkMissingOrInvalidKty);\n        }\n        if (typeof jwk.x !== 'string') {\n          throw new SidetreeError(ErrorCode.JwkMissingOrInvalidTypeX);\n        }\n        break;\n      case 'secp256k1':\n        if (jwk.kty !== 'EC') {\n          throw new SidetreeError(ErrorCode.JwkMissingOrInvalidKty);\n        }\n        if (typeof jwk.x !== 'string') {\n          throw new SidetreeError(ErrorCode.JwkMissingOrInvalidTypeX);\n        }\n        if (typeof jwk.y !== 'string') {\n          throw new SidetreeError(ErrorCode.JwkMissingOrInvalidTypeY);\n        }\n        break;\n      default:\n        throw new SidetreeError(ErrorCode.JwkMissingOrInvalidCrv);\n    }\n  }\n\n  /**\n   * Gets the public key given the private ES256K key.\n   * Mainly used for testing purposes.\n   */\n  public static getCurve25519PublicKey(\n    privateKey: PrivateKeyJwkEd25519\n  ): PublicKeyJwkEd25519 {\n    const keyCopy = Object.assign({}, privateKey);\n\n    // Delete the private key portion.\n    delete keyCopy.d;\n\n    return keyCopy;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Encoder,\n  ErrorCode,\n  SidetreeError,\n  PublicKeyJwk,\n  PrivateKeyJwk,\n} from '@sidetree/common';\nimport { EdDSA } from '@transmute/did-key-ed25519';\nimport { ES256K } from '@transmute/did-key-secp256k1';\n\n/**\n * Class containing reusable JWS operations.\n */\nexport default class Jws {\n  /** Protected header. */\n  public readonly protected: string;\n  /** Payload. */\n  public readonly payload: string;\n  /** Signature. */\n  public readonly signature: string;\n\n  /**\n   * Constructs a JWS object.\n   * @param compactJws Input should be a compact JWS string.\n   */\n  private constructor(compactJws: any) {\n    if (typeof compactJws !== 'string') {\n      throw new SidetreeError(ErrorCode.JwsCompactJwsNotString);\n    }\n\n    const parts = compactJws.split('.');\n    if (parts.length !== 3) {\n      throw new SidetreeError(ErrorCode.JwsCompactJwsInvalid);\n    }\n\n    const protectedHeader = parts[0];\n    const payload = parts[1];\n    const signature = parts[2];\n\n    const decodedProtectedHeadJsonString = Encoder.decodeBase64UrlAsString(\n      protectedHeader\n    );\n    const decodedProtectedHeader = JSON.parse(decodedProtectedHeadJsonString);\n\n    const expectedHeaderPropertyCount = 1; // By default we must have header property is `alg`.\n\n    const headerProperties = Object.keys(decodedProtectedHeader);\n    if (headerProperties.length !== expectedHeaderPropertyCount) {\n      throw new SidetreeError(\n        ErrorCode.JwsProtectedHeaderMissingOrUnknownProperty\n      );\n    }\n\n    // Protected header must contain 'alg' property with value 'EdDSA'.\n    if (\n      decodedProtectedHeader.alg !== 'EdDSA' &&\n      decodedProtectedHeader.alg !== 'ES256K'\n    ) {\n      throw new SidetreeError(\n        ErrorCode.JwsProtectedHeaderMissingOrIncorrectAlg\n      );\n    }\n\n    // Must contain Base64URL string 'signature' property.\n    if (!Encoder.isBase64UrlString(signature)) {\n      throw new SidetreeError(ErrorCode.JwsSignatureNotBase64UrlString);\n    }\n\n    // Must contain Base64URL string 'payload' property.\n    if (!Encoder.isBase64UrlString(payload)) {\n      throw new SidetreeError(ErrorCode.JwsPayloadNotBase64UrlString);\n    }\n\n    this.protected = protectedHeader;\n    this.payload = payload;\n    this.signature = signature;\n  }\n\n  /**\n   * Converts this object to a compact JWS string.\n   */\n  public toCompactJws(): string {\n    return Jws.createCompactJws(this.protected, this.payload, this.signature);\n  }\n\n  /**\n   * Verifies the JWS signature.\n   * @returns true if signature is successfully verified, false otherwise.\n   */\n  public async verifySignature(publicKey: PublicKeyJwk): Promise<boolean> {\n    return Jws.verifySignature(\n      this.protected,\n      this.payload,\n      this.signature,\n      publicKey\n    );\n  }\n\n  /**\n   * Verifies the JWS signature.\n   * @returns true if signature is successfully verified, false otherwise.\n   */\n  public static async verifySignature(\n    encodedProtectedHeader: string,\n    encodedPayload: string,\n    signature: string,\n    publicKey: PublicKeyJwk\n  ): Promise<boolean> {\n    const jwsSigningInput =\n      encodedProtectedHeader + '.' + encodedPayload + '.' + signature;\n    const signatureValid = await Jws.verifyCompactJws(\n      jwsSigningInput,\n      publicKey\n    );\n    return signatureValid;\n  }\n\n  /**\n   * Verifies the compact JWS string using the given JWK key.\n   * @returns true if signature is valid; else otherwise.\n   */\n  public static async verifyCompactJws(\n    compactJws: string,\n    jwk: PublicKeyJwk\n  ): Promise<boolean> {\n    try {\n      if (jwk.crv === 'Ed25519') {\n        await EdDSA.verify(compactJws, jwk);\n      } else if (jwk.crv === 'secp256k1') {\n        await ES256K.verify(compactJws, jwk as any);\n      } else {\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.log(\n        `Input '${compactJws}' failed signature verification: ${SidetreeError.createFromError(\n          ErrorCode.JwsFailedSignatureValidation,\n          error\n        )}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Signs the given payload as a compact JWS string.\n   * This is mainly used by tests to create valid test data.\n   */\n  public static async signAsCompactJws(\n    payload: object,\n    privateKey: PrivateKeyJwk,\n    protectedHeader?: any\n  ): Promise<string> {\n    let alg;\n    if (protectedHeader && protectedHeader.alg) {\n      alg = protectedHeader.alg;\n    } else {\n      if (privateKey.crv === 'Ed25519') {\n        alg = 'EdDSA';\n      } else {\n        alg = 'ES256K';\n      }\n    }\n    const header = {\n      ...protectedHeader,\n      alg,\n    };\n    if (privateKey.crv === 'secp256k1') {\n      return await ES256K.sign(payload, privateKey as any, header);\n    }\n    return await EdDSA.sign(payload, privateKey, header);\n  }\n\n  /**\n   * Parses the input as a `Jws` object.\n   */\n  public static parseCompactJws(compactJws: any): Jws {\n    return new Jws(compactJws);\n  }\n\n  /**\n   * Creates a compact JWS string using the given input. No string validation is performed.\n   */\n  public static createCompactJws(\n    protectedHeader: string,\n    payload: string,\n    signature: string\n  ): string {\n    return protectedHeader + '.' + payload + '.' + signature;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Encoder,\n  ErrorCode,\n  PublicKeyJwk,\n  OperationModel,\n  OperationType,\n  SidetreeError,\n} from '@sidetree/common';\nimport JsonAsync from './util/JsonAsync';\nimport Jwk from './util/Jwk';\nimport Jws from './util/Jws';\n\ninterface SignedDataModel {\n  didSuffix: string;\n  recovery_key: PublicKeyJwk;\n}\n\n/**\n * A class that represents a deactivate operation.\n */\nexport default class DeactivateOperation implements OperationModel {\n  /** The original request buffer sent by the requester. */\n  public readonly operationBuffer: Buffer;\n\n  /** The unique suffix of the DID. */\n  public readonly didUniqueSuffix: string;\n\n  /** The type of operation. */\n  public readonly type: OperationType;\n\n  /** Signed data. */\n  public readonly signedDataJws: Jws;\n\n  /** Decoded signed data payload. */\n  public readonly signedData: SignedDataModel;\n\n  /**\n   * NOTE: should only be used by `parse()` and `parseObject()` else the contructed instance could be invalid.\n   */\n  private constructor(\n    operationBuffer: Buffer,\n    didUniqueSuffix: string,\n    signedDataJws: Jws,\n    signedData: SignedDataModel\n  ) {\n    this.operationBuffer = operationBuffer;\n    this.type = OperationType.Deactivate;\n    this.didUniqueSuffix = didUniqueSuffix;\n    this.signedDataJws = signedDataJws;\n    this.signedData = signedData;\n  }\n\n  /**\n   * Parses the given input as a deactivate operation entry in the anchor file.\n   */\n  public static async parseOperationFromAnchorFile(\n    input: any\n  ): Promise<DeactivateOperation> {\n    const operationBuffer = Buffer.from(JSON.stringify(input));\n    const operation = await DeactivateOperation.parseObject(\n      input,\n      operationBuffer,\n      true\n    );\n    return operation;\n  }\n\n  /**\n   * Parses the given buffer as a `UpdateOperation`.\n   */\n  public static async parse(\n    operationBuffer: Buffer\n  ): Promise<DeactivateOperation> {\n    const operationJsonString = operationBuffer.toString();\n    const operationObject = await JsonAsync.parse(operationJsonString);\n    const deactivateOperation = await DeactivateOperation.parseObject(\n      operationObject,\n      operationBuffer,\n      false\n    );\n    return deactivateOperation;\n  }\n\n  /**\n   * Parses the given operation object as a `DeactivateOperation`.\n   * The `operationBuffer` given is assumed to be valid and is assigned to the `operationBuffer` directly.\n   * NOTE: This method is purely intended to be used as an optimization method over the `parse` method in that\n   * JSON parsing is not required to be performed more than once when an operation buffer of an unknown operation type is given.\n   * @param anchorFileMode If set to true, then `type` is expected to be absent.\n   */\n  public static async parseObject(\n    operationObject: any,\n    operationBuffer: Buffer,\n    anchorFileMode: boolean\n  ): Promise<DeactivateOperation> {\n    let expectedPropertyCount = 3;\n    if (anchorFileMode) {\n      expectedPropertyCount = 2;\n    }\n\n    const properties = Object.keys(operationObject);\n    if (properties.length !== expectedPropertyCount) {\n      throw new SidetreeError(\n        ErrorCode.DeactivateOperationMissingOrUnknownProperty\n      );\n    }\n\n    if (typeof operationObject.did_suffix !== 'string') {\n      throw new SidetreeError(\n        ErrorCode.DeactivateOperationMissingOrInvalidDidUniqueSuffix\n      );\n    }\n\n    const signedDataJws = Jws.parseCompactJws(operationObject.signed_data);\n    const signedData = await DeactivateOperation.parseSignedDataPayload(\n      signedDataJws.payload,\n      operationObject.did_suffix\n    );\n\n    // If not in anchor file mode, we need to validate `type` property.\n    if (!anchorFileMode) {\n      if (operationObject.type !== OperationType.Deactivate) {\n        throw new SidetreeError(ErrorCode.DeactivateOperationTypeIncorrect);\n      }\n    }\n\n    return new DeactivateOperation(\n      operationBuffer,\n      operationObject.did_suffix,\n      signedDataJws,\n      signedData\n    );\n  }\n\n  private static async parseSignedDataPayload(\n    deltaEncodedString: string,\n    expectedDidUniqueSuffix: string\n  ): Promise<SignedDataModel> {\n    const signedDataJsonString = Encoder.decodeAsString(deltaEncodedString);\n    const signedData = await JsonAsync.parse(signedDataJsonString);\n\n    const properties = Object.keys(signedData);\n    if (properties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.DeactivateOperationSignedDataMissingOrUnknownProperty\n      );\n    }\n\n    if (signedData.did_suffix !== expectedDidUniqueSuffix) {\n      throw new SidetreeError(\n        ErrorCode.DeactivateOperationSignedDidUniqueSuffixMismatch\n      );\n    }\n\n    Jwk.validatePublicJwk(signedData.recovery_key);\n\n    return {\n      didSuffix: signedData.did_suffix,\n      recovery_key: signedData.recovery_key,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DeltaModel,\n  Encoder,\n  ErrorCode,\n  PublicKeyJwk,\n  Multihash,\n  OperationModel,\n  OperationType,\n  SidetreeError,\n} from '@sidetree/common';\nimport OperationUtils from './OperationUtils';\nimport JsonAsync from './util/JsonAsync';\nimport Jwk from './util/Jwk';\nimport Jws from './util/Jws';\n\ninterface SignedDataModel {\n  delta_hash: string;\n  recovery_key: PublicKeyJwk;\n  recovery_commitment: string;\n}\n\n/**\n * A class that represents a recover operation.\n */\nexport default class RecoverOperation implements OperationModel {\n  /** The original request buffer sent by the requester. */\n  public readonly operationBuffer: Buffer;\n\n  /** The unique suffix of the DID. */\n  public readonly didUniqueSuffix: string;\n\n  /** The type of operation. */\n  public readonly type: OperationType;\n\n  /** Signed data. */\n  public readonly signedDataJws: Jws;\n\n  /** Encoded string of the delta. */\n  public readonly encodedDelta: string | undefined;\n\n  /** Decoded signed data payload. */\n  public readonly signedData: SignedDataModel;\n\n  /** Patch data. */\n  public readonly delta: DeltaModel | undefined;\n\n  /**\n   * NOTE: should only be used by `parse()` and `parseObject()` else the constructed instance could be invalid.\n   */\n  private constructor(\n    operationBuffer: Buffer,\n    didUniqueSuffix: string,\n    signedDataJws: Jws,\n    signedData: SignedDataModel,\n    encodedDelta: string | undefined,\n    delta: DeltaModel | undefined\n  ) {\n    this.operationBuffer = operationBuffer;\n    this.type = OperationType.Recover;\n    this.didUniqueSuffix = didUniqueSuffix;\n    this.signedDataJws = signedDataJws;\n    this.signedData = signedData;\n    this.encodedDelta = encodedDelta;\n    this.delta = delta;\n  }\n\n  /**\n   * Parses the given input as a recover operation entry in the anchor file.\n   */\n  public static async parseOperationFromAnchorFile(\n    input: any\n  ): Promise<RecoverOperation> {\n    const operationBuffer = Buffer.from(JSON.stringify(input));\n    const operation = await RecoverOperation.parseObject(\n      input,\n      operationBuffer,\n      true\n    );\n    return operation;\n  }\n\n  /**\n   * Parses the given buffer as a `UpdateOperation`.\n   */\n  public static async parse(\n    operationBuffer: Buffer\n  ): Promise<RecoverOperation> {\n    const operationJsonString = operationBuffer.toString();\n    const operationObject = await JsonAsync.parse(operationJsonString);\n    const recoverOperation = await RecoverOperation.parseObject(\n      operationObject,\n      operationBuffer,\n      false\n    );\n    return recoverOperation;\n  }\n\n  /**\n   * Parses the given operation object as a `RecoverOperation`.\n   * The `operationBuffer` given is assumed to be valid and is assigned to the `operationBuffer` directly.\n   * NOTE: This method is purely intended to be used as an optimization method over the `parse` method in that\n   * JSON parsing is not required to be performed more than once when an operation buffer of an unknown operation type is given.\n   * @param anchorFileMode If set to true, then `delta` and `type` properties are expected to be absent.\n   */\n  public static async parseObject(\n    operationObject: any,\n    operationBuffer: Buffer,\n    anchorFileMode: boolean\n  ): Promise<RecoverOperation> {\n    let expectedPropertyCount = 4;\n    if (anchorFileMode) {\n      expectedPropertyCount = 2;\n    }\n\n    const properties = Object.keys(operationObject);\n    if (properties.length !== expectedPropertyCount) {\n      throw new SidetreeError(\n        ErrorCode.RecoverOperationMissingOrUnknownProperty\n      );\n    }\n\n    if (typeof operationObject.did_suffix !== 'string') {\n      throw new SidetreeError(\n        ErrorCode.RecoverOperationMissingOrInvalidDidUniqueSuffix\n      );\n    }\n\n    const signedDataJws = Jws.parseCompactJws(operationObject.signed_data);\n    const signedData = await RecoverOperation.parseSignedDataPayload(\n      signedDataJws.payload\n    );\n\n    // If not in anchor file mode, we need to validate `type` and `delta` properties.\n    let encodedDelta = undefined;\n    let delta = undefined;\n    if (!anchorFileMode) {\n      if (operationObject.type !== OperationType.Recover) {\n        throw new SidetreeError(ErrorCode.RecoverOperationTypeIncorrect);\n      }\n\n      encodedDelta = operationObject.delta;\n      try {\n        delta = await OperationUtils.parseDelta(operationObject.delta);\n      } catch {\n        // For compatibility with data pruning, we have to assume that delta may be unavailable,\n        // thus an operation with invalid delta needs to be processed as an operation with unavailable delta,\n        // so here we let delta be `undefined`.\n      }\n    }\n\n    return new RecoverOperation(\n      operationBuffer,\n      operationObject.did_suffix,\n      signedDataJws,\n      signedData,\n      encodedDelta,\n      delta\n    );\n  }\n\n  private static async parseSignedDataPayload(\n    signedDataEncodedString: string\n  ): Promise<SignedDataModel> {\n    const signedDataJsonString = Encoder.decodeAsString(\n      signedDataEncodedString\n    );\n    const signedData = await JsonAsync.parse(signedDataJsonString);\n\n    const properties = Object.keys(signedData);\n\n    // TODO: JSON Schema instead of property count type checking...\n    if (properties.length !== 3) {\n      throw new SidetreeError(\n        ErrorCode.RecoverOperationSignedDataMissingOrUnknownProperty\n      );\n    }\n\n    Jwk.validatePublicJwk(signedData.recovery_key);\n\n    const delta_hash = Encoder.decodeAsBuffer(signedData.delta_hash);\n    Multihash.verifyHashComputedUsingLatestSupportedAlgorithm(delta_hash);\n\n    const nextRecoveryCommitmentHash = Encoder.decodeAsBuffer(\n      signedData.recovery_commitment\n    );\n    Multihash.verifyHashComputedUsingLatestSupportedAlgorithm(\n      nextRecoveryCommitmentHash\n    );\n\n    return {\n      delta_hash: signedData.delta_hash,\n      recovery_key: signedData.recovery_key,\n      recovery_commitment: signedData.recovery_commitment,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnchorFileModel, ErrorCode, SidetreeError } from '@sidetree/common';\nimport ArrayMethods from '../util/ArrayMethods';\nimport Compressor from '../util/Compressor';\nimport CreateOperation from '../CreateOperation';\nimport DeactivateOperation from '../DeactivateOperation';\nimport JsonAsync from '../util/JsonAsync';\nimport RecoverOperation from '../RecoverOperation';\n\n/**\n * Class containing Anchor File related operations.\n */\nexport default class AnchorFile {\n  /**\n   * Class that represents an anchor file.\n   * NOTE: this class is introduced as an internal structure in replacement to `AnchorFileModel`\n   * to keep useful metadata so that repeated computation can be avoided.\n   */\n  private constructor(\n    public readonly model: AnchorFileModel,\n    public readonly didUniqueSuffixes: string[],\n    public readonly createOperations: CreateOperation[],\n    public readonly recoverOperations: RecoverOperation[],\n    public readonly deactivateOperations: DeactivateOperation[]\n  ) {}\n\n  /**\n   * Parses and validates the given anchor file buffer.\n   * @throws `SidetreeError` if failed parsing or validation.\n   */\n  public static async parse(anchorFileBuffer: Buffer): Promise<AnchorFile> {\n    let anchorFileDecompressedBuffer;\n    try {\n      anchorFileDecompressedBuffer = await Compressor.decompress(\n        anchorFileBuffer\n      );\n    } catch (e) {\n      throw SidetreeError.createFromError(\n        ErrorCode.AnchorFileDecompressionFailure,\n        e\n      );\n    }\n\n    let anchorFileModel;\n    try {\n      anchorFileModel = await JsonAsync.parse(anchorFileDecompressedBuffer);\n    } catch (e) {\n      throw SidetreeError.createFromError(ErrorCode.AnchorFileNotJson, e);\n    }\n\n    const allowedProperties = new Set([\n      'map_file_uri',\n      'operations',\n      'writer_lock_id',\n    ]);\n    for (const property in anchorFileModel) {\n      if (!allowedProperties.has(property)) {\n        throw new SidetreeError(ErrorCode.AnchorFileHasUnknownProperty);\n      }\n    }\n\n    if (\n      !Object.prototype.hasOwnProperty.call(anchorFileModel, 'map_file_uri')\n    ) {\n      throw new SidetreeError(ErrorCode.AnchorFileMapFileHashMissing);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(anchorFileModel, 'operations')) {\n      throw new SidetreeError(ErrorCode.AnchorFileMissingOperationsProperty);\n    }\n\n    if (\n      Object.prototype.hasOwnProperty.call(anchorFileModel, 'writer_lock_id') &&\n      typeof anchorFileModel.writer_lock_id !== 'string'\n    ) {\n      throw new SidetreeError(ErrorCode.AnchorFileWriterLockIPropertyNotString);\n    }\n\n    // Map file hash validations.\n    const mapFileUri = anchorFileModel.map_file_uri;\n    if (typeof mapFileUri !== 'string') {\n      throw new SidetreeError(ErrorCode.AnchorFileMapFileHashNotString);\n    }\n\n    const allowedOperationsProperties = new Set([\n      'create',\n      'recover',\n      'deactivate',\n    ]);\n    const operations = anchorFileModel.operations;\n    for (const property in operations) {\n      if (!allowedOperationsProperties.has(property)) {\n        throw new SidetreeError(\n          ErrorCode.AnchorFileUnexpectedPropertyInOperations,\n          `Unexpected property ${property} in 'operations' property in anchor file.`\n        );\n      }\n    }\n\n    // Will be populated for later validity check.\n    const didUniqueSuffixes: string[] = [];\n\n    // Validate `create` if exists.\n    const createOperations: CreateOperation[] = [];\n    if (operations.create !== undefined) {\n      if (!Array.isArray(operations.create)) {\n        throw new SidetreeError(ErrorCode.AnchorFileCreatePropertyNotArray);\n      }\n\n      // Validate every create operation.\n      for (const operation of operations.create) {\n        const createOperation = await CreateOperation.parseOperationFromAnchorFile(\n          operation\n        );\n        createOperations.push(createOperation);\n        didUniqueSuffixes.push(createOperation.didUniqueSuffix);\n      }\n    }\n\n    // Validate `recover` if exists.\n    const recoverOperations: RecoverOperation[] = [];\n    if (operations.recover !== undefined) {\n      if (!Array.isArray(operations.recover)) {\n        throw new SidetreeError(ErrorCode.AnchorFileRecoverPropertyNotArray);\n      }\n\n      // Validate every recover operation.\n      for (const operation of operations.recover) {\n        const recoverOperation = await RecoverOperation.parseOperationFromAnchorFile(\n          operation\n        );\n        recoverOperations.push(recoverOperation);\n        didUniqueSuffixes.push(recoverOperation.didUniqueSuffix);\n      }\n    }\n\n    // Validate `deactivate` if exists.\n    const deactivateOperations: DeactivateOperation[] = [];\n    if (operations.deactivate !== undefined) {\n      if (!Array.isArray(operations.deactivate)) {\n        throw new SidetreeError(ErrorCode.AnchorFileDeactivatePropertyNotArray);\n      }\n\n      // Validate every operation.\n      for (const operation of operations.deactivate) {\n        const deactivateOperation = await DeactivateOperation.parseOperationFromAnchorFile(\n          operation\n        );\n        deactivateOperations.push(deactivateOperation);\n        didUniqueSuffixes.push(deactivateOperation.didUniqueSuffix);\n      }\n    }\n\n    if (ArrayMethods.hasDuplicates(didUniqueSuffixes)) {\n      throw new SidetreeError(\n        ErrorCode.AnchorFileMultipleOperationsForTheSameDid\n      );\n    }\n\n    const anchorFile = new AnchorFile(\n      anchorFileModel,\n      didUniqueSuffixes,\n      createOperations,\n      recoverOperations,\n      deactivateOperations\n    );\n    return anchorFile;\n  }\n\n  /**\n   * Creates an `AnchorFileModel`.\n   */\n  public static async createModel(\n    writerLockId: string | undefined,\n    mapFileHash: string,\n    createOperationArray: CreateOperation[],\n    recoverOperationArray: RecoverOperation[],\n    deactivateOperationArray: DeactivateOperation[]\n  ): Promise<AnchorFileModel> {\n    const createOperations = createOperationArray.map((operation) => {\n      return {\n        suffix_data: operation.encodedSuffixData,\n      };\n    });\n\n    const recoverOperations = recoverOperationArray.map((operation) => {\n      return {\n        did_suffix: operation.didUniqueSuffix,\n        signed_data: operation.signedDataJws.toCompactJws(),\n      };\n    });\n\n    const deactivateOperations = deactivateOperationArray.map((operation) => {\n      return {\n        did_suffix: operation.didUniqueSuffix,\n        signed_data: operation.signedDataJws.toCompactJws(),\n      };\n    });\n\n    const anchorFileModel = {\n      writer_lock_id: writerLockId,\n      map_file_uri: mapFileHash,\n      operations: {\n        create: createOperations,\n        recover: recoverOperations,\n        deactivate: deactivateOperations,\n      },\n    };\n\n    return anchorFileModel;\n  }\n\n  /**\n   * Creates an anchor file buffer.\n   */\n  public static async createBuffer(\n    writerLockId: string | undefined,\n    mapFileHash: string,\n    createOperations: CreateOperation[],\n    recoverOperations: RecoverOperation[],\n    deactivateOperations: DeactivateOperation[]\n  ): Promise<Buffer> {\n    const anchorFileModel = await AnchorFile.createModel(\n      writerLockId,\n      mapFileHash,\n      createOperations,\n      recoverOperations,\n      deactivateOperations\n    );\n    const anchorFileJson = JSON.stringify(anchorFileModel);\n    const anchorFileBuffer = Buffer.from(anchorFileJson);\n\n    return Compressor.compress(anchorFileBuffer);\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IBlockchain, IVersionManager } from '@sidetree/common';\nimport timeSpan from 'time-span';\n\n/**\n * Class that performs periodic writing of batches of Sidetree operations to CAS and blockchain.\n */\nexport default class BatchScheduler {\n  /**\n   * Denotes if the periodic batch writing should continue to occur.\n   * Used mainly for test purposes.\n   */\n  private continuePeriodicBatchWriting = false;\n\n  public constructor(\n    private versionManager: IVersionManager,\n    private blockchain: IBlockchain,\n    private batchingIntervalInSeconds: number\n  ) {}\n\n  /**\n   * The function that starts periodically anchoring operation batches to blockchain.\n   */\n  public startPeriodicBatchWriting() {\n    this.continuePeriodicBatchWriting = true;\n    setImmediate(async () => this.writeOperationBatch());\n  }\n\n  /**\n   * Stops periodic batch writing.\n   * Mainly used for test purposes.\n   */\n  public stopPeriodicBatchWriting() {\n    console.info(`Stopped periodic batch writing.`);\n    this.continuePeriodicBatchWriting = false;\n  }\n\n  /**\n   * Processes the operations in the queue.\n   */\n  public async writeOperationBatch() {\n    const endTimer = timeSpan(); // For calcuating time taken to write operations.\n\n    try {\n      console.info('Start operation batch writing...');\n\n      // Get the correct version of the `BatchWriter`.\n      const currentTime = this.blockchain.approximateTime.time;\n      const batchWriter = this.versionManager.getBatchWriter(currentTime);\n\n      await batchWriter.write();\n    } catch (error) {\n      console.error(\n        'Unexpected and unhandled error during batch writing, investigate and fix:'\n      );\n      console.error(error);\n    } finally {\n      console.info(`End batch writing. Duration: ${endTimer.rounded()} ms.`);\n\n      if (this.continuePeriodicBatchWriting) {\n        console.info(\n          `Waiting for ${this.batchingIntervalInSeconds} seconds before writing another batch.`\n        );\n        setTimeout(\n          async () => this.writeOperationBatch(),\n          this.batchingIntervalInSeconds * 1000\n        );\n      }\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ChunkFileModel,\n  ErrorCode,\n  SidetreeError,\n  protocolParameters,\n} from '@sidetree/common';\nimport timeSpan from 'time-span';\nimport CreateOperation from '../CreateOperation';\nimport RecoverOperation from '../RecoverOperation';\nimport UpdateOperation from '../UpdateOperation';\nimport Compressor from '../util/Compressor';\nimport JsonAsync from '../util/JsonAsync';\n\n/**\n * Defines schema of a Chunk File and its related operations.\n * NOTE: Must NOT add properties not defined by Sidetree protocol.\n */\nexport default class ChunkFile {\n  /**\n   * Parses and validates the given chunk file buffer and all the operations within it.\n   * @throws SidetreeError if failed parsing or validation.\n   */\n  public static async parse(chunkFileBuffer: Buffer): Promise<ChunkFileModel> {\n    const endTimer = timeSpan();\n    const decompressedChunkFileBuffer = await Compressor.decompress(\n      chunkFileBuffer\n    );\n    const chunkFileObject = await JsonAsync.parse(decompressedChunkFileBuffer);\n    console.info(`Parsed chunk file in ${endTimer.rounded()} ms.`);\n\n    // Ensure only properties specified by Sidetree protocol are given.\n    const allowedProperties = new Set(['deltas']);\n    for (const property in chunkFileObject) {\n      if (!allowedProperties.has(property)) {\n        throw new SidetreeError(\n          ErrorCode.ChunkFileUnexpectedProperty,\n          `Unexpected property ${property} in chunk file.`\n        );\n      }\n    }\n\n    this.validateDeltasProperty(chunkFileObject.deltas);\n\n    return chunkFileObject;\n  }\n\n  private static validateDeltasProperty(deltas: any) {\n    // Make sure deltas is an array.\n    if (!(deltas instanceof Array)) {\n      throw new SidetreeError(\n        ErrorCode.ChunkFileDeltasPropertyNotArray,\n        'Invalid chunk file, deltas property is not an array.'\n      );\n    }\n\n    // Validate every encoded delta string.\n    for (const encodedDelta of deltas) {\n      if (typeof encodedDelta !== 'string') {\n        throw new SidetreeError(\n          ErrorCode.ChunkFileDeltasNotArrayOfStrings,\n          'Invalid chunk file, deltas property is not an array of strings.'\n        );\n      }\n\n      const deltaBuffer = Buffer.from(encodedDelta);\n\n      // Verify size of each delta does not exceed the maximum allowed limit.\n      if (deltaBuffer.length > protocolParameters.maxDeltaSizeInBytes) {\n        throw new SidetreeError(\n          ErrorCode.ChunkFileDeltaSizeExceedsLimit,\n          `Operation size of ${deltaBuffer.length} bytes exceeds the allowed limit of ${protocolParameters.maxDeltaSizeInBytes} bytes.`\n        );\n      }\n    }\n  }\n\n  /**\n   * Creates chunk file buffer.\n   */\n  public static async createBuffer(\n    createOperations: CreateOperation[],\n    recoverOperations: RecoverOperation[],\n    updateOperations: UpdateOperation[]\n  ) {\n    const deltas = [];\n    deltas.push(\n      ...createOperations.map((operation) => operation.encodedDelta!)\n    );\n    deltas.push(\n      ...recoverOperations.map((operation) => operation.encodedDelta!)\n    );\n    deltas.push(\n      ...updateOperations.map((operation) => operation.encodedDelta!)\n    );\n\n    const chunkFileModel = {\n      deltas,\n    };\n\n    const rawData = Buffer.from(JSON.stringify(chunkFileModel));\n    const compressedRawData = await Compressor.compress(Buffer.from(rawData));\n\n    return compressedRawData;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as crypto from 'crypto';\nimport { ICas, FetchResult } from '@sidetree/common';\n\n/**\n * Interface containing information regarding each queued CAS download.\n */\ninterface DownloadInfo {\n  /**\n   * A globally unique handle to this download.\n   */\n  handle: Buffer;\n\n  /**\n   * The content hash used to perform the download from CAS.\n   */\n  contentHash: string;\n\n  /**\n   * The maximum allowed content size.\n   */\n  maxSizeInBytes: number;\n\n  /**\n   * The resolve function that will be invoked by the download manager when download is completed\n   * regarless if the download is successful or not.\n   */\n  resolve: (value?: any | PromiseLike<any> | undefined) => void;\n\n  /**\n   * Set to true if download attempt is completed either successfully or unsuccessfully.\n   */\n  completed: boolean;\n\n  /**\n   * Holds the fetch result once the download is completed.\n   */\n  fetchResult?: FetchResult;\n}\n\n/**\n * A download manager class that performs multiple downloads at the same time.\n */\nexport default class DownloadManager {\n  private pendingDownloads: DownloadInfo[] = [];\n  private activeDownloads: Map<Buffer, DownloadInfo> = new Map();\n  private completedDownloads: Map<Buffer, FetchResult> = new Map();\n\n  /**\n   * Constructs the download manager.\n   * @param cas The Content Adressable Store to use for fetching the actual content.\n   */\n  public constructor(public maxConcurrentDownloads: number, private cas: ICas) {\n    // If maximum concurrent CAS download count is NaN, set it to a default value.\n    if (isNaN(maxConcurrentDownloads)) {\n      const defaultmaxConcurrentDownloads = 20;\n      console.info(\n        `Maximum concurrent CAS download count not given, defaulting to ${defaultmaxConcurrentDownloads}.`\n      );\n      this.maxConcurrentDownloads = defaultmaxConcurrentDownloads;\n    }\n  }\n\n  /**\n   * Starts pending downloads if maximum concurrent download count is not reached,\n   * and resolve downloads that are completed, then invokes this same method again,\n   * thus this method must only be invoked once externally as initialization.\n   */\n  public start() {\n    try {\n      // Move all completed downloads in `activeDownloads` to the `completedDownloads` map.\n      const completedDownloadHandles = [];\n      for (const [downloadHandle, downloadInfo] of this.activeDownloads) {\n        if (downloadInfo.completed) {\n          this.completedDownloads.set(\n            downloadHandle,\n            downloadInfo.fetchResult!\n          );\n          completedDownloadHandles.push(downloadHandle);\n\n          // Resolve the promise associated with the download.\n          downloadInfo.resolve();\n        }\n      }\n      for (const downloadHandle of completedDownloadHandles) {\n        this.activeDownloads.delete(downloadHandle);\n      }\n\n      // If maximum concurrent download count is reached, then we can't schedule more downloads.\n      const availableDownloadLanes =\n        this.maxConcurrentDownloads - this.activeDownloads.size;\n      if (availableDownloadLanes <= 0) {\n        return;\n      }\n\n      // Else we can schedule more downloads, but only if there are pending downloads.\n      if (this.pendingDownloads.length === 0) {\n        return;\n      }\n\n      // Keep start downloading the next queued item until all download lanes are full or there is no more item to download.\n      for (\n        let i = 0;\n        i < this.pendingDownloads.length && i < availableDownloadLanes;\n        i++\n      ) {\n        const downloadInfo = this.pendingDownloads[i];\n\n        // Intentionally not awaiting on a download.\n        void this.downloadAsync(downloadInfo);\n        this.activeDownloads.set(downloadInfo.handle, downloadInfo);\n      }\n\n      // Remove active downloads from `pendingDownloads` list.\n      this.pendingDownloads.splice(0, availableDownloadLanes);\n    } catch (error) {\n      console.error(\n        `Encountered unhandled/unexpected error in DownloadManager, must investigate and fix: ${error}`\n      );\n    } finally {\n      setTimeout(async () => this.start(), 1000);\n    }\n  }\n\n  /**\n   * Downloads the content of the given content hash.\n   * @param contentHash Hash of the content to be downloaded.\n   */\n  public async download(\n    contentHash: string,\n    maxSizeInBytes: number\n  ): Promise<FetchResult> {\n    const handle = crypto.randomBytes(32);\n    const fetchPromise = new Promise((resolve) => {\n      const downloadInfo = {\n        handle,\n        contentHash,\n        maxSizeInBytes,\n        resolve,\n        completed: false,\n        content: undefined,\n      };\n      this.pendingDownloads.push(downloadInfo);\n    });\n\n    await fetchPromise;\n\n    const fetchResult = this.completedDownloads.get(handle);\n    this.completedDownloads.delete(handle);\n\n    return fetchResult!;\n  }\n\n  /**\n   * The internal download method that gets called by the main download manager monitoring loop when download lanes are available to download content.\n   * NOTE: This method MUST NEVER throw (more accurately: ALWAYS set downloadInfo.completed = true),\n   * else it will LEAK the available download lanes and in turn hang the Observer.\n   * @param downloadInfo Data structure containing `completed` flag and `fetchResult`,\n   *                     used to signal to the main download manager monitoring loop when the requested download is completed.\n   */\n  private async downloadAsync(downloadInfo: DownloadInfo): Promise<void> {\n    let contentHash = '';\n    try {\n      contentHash = downloadInfo.contentHash;\n\n      const fetchResult = await this.cas.read(\n        contentHash\n        // downloadInfo.maxSizeInBytes\n      );\n\n      downloadInfo.fetchResult = fetchResult;\n    } catch (error) {\n      console.error(\n        `Unexpected error while downloading '${contentHash}, investigate and fix ${error}'.`\n      );\n    } finally {\n      downloadInfo.completed = true;\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DeltaModel,\n  Encoder,\n  ErrorCode,\n  PublicKeyJwk,\n  Multihash,\n  OperationModel,\n  OperationType,\n  SidetreeError,\n} from '@sidetree/common';\nimport JsonAsync from './util/JsonAsync';\nimport Jwk from './util/Jwk';\nimport Jws from './util/Jws';\nimport OperationUtils from './OperationUtils';\n\ninterface SignedDataModel {\n  delta_hash: string;\n  update_key: PublicKeyJwk;\n}\n\n/**\n * A class that represents an update operation.\n */\nexport default class UpdateOperation implements OperationModel {\n  /** The original request buffer sent by the requester. */\n  public readonly operationBuffer: Buffer;\n\n  /** The unique suffix of the DID. */\n  public readonly didUniqueSuffix: string;\n\n  /** The type of operation. */\n  public readonly type: OperationType;\n\n  /** Signed data for the operation. */\n  public readonly signedDataJws: Jws;\n\n  /** Decoded signed data payload. */\n  public readonly signedData: SignedDataModel;\n\n  /** Patch data. */\n  public readonly delta: DeltaModel | undefined;\n\n  /** Encoded string of the delta. */\n  public readonly encodedDelta: string | undefined;\n\n  /**\n   * NOTE: should only be used by `parse()` and `parseObject()` else the contructed instance could be invalid.\n   */\n  private constructor(\n    operationBuffer: Buffer,\n    didUniqueSuffix: string,\n    signedDataJws: Jws,\n    signedData: SignedDataModel,\n    encodedDelta: string | undefined,\n    delta: DeltaModel | undefined\n  ) {\n    this.operationBuffer = operationBuffer;\n    this.type = OperationType.Update;\n    this.didUniqueSuffix = didUniqueSuffix;\n    this.signedDataJws = signedDataJws;\n    this.signedData = signedData;\n    this.encodedDelta = encodedDelta;\n    this.delta = delta;\n  }\n\n  /**\n   * Parses the given input as an update operation entry in the map file.\n   */\n  public static async parseOperationFromMapFile(\n    input: any\n  ): Promise<UpdateOperation> {\n    const operationBuffer = Buffer.from(JSON.stringify(input));\n    const operation = await UpdateOperation.parseObject(\n      input,\n      operationBuffer,\n      true\n    );\n    return operation;\n  }\n\n  /**\n   * Parses the given buffer as a `UpdateOperation`.\n   */\n  public static async parse(operationBuffer: Buffer): Promise<UpdateOperation> {\n    const operationJsonString = operationBuffer.toString();\n    const operationObject = await JsonAsync.parse(operationJsonString);\n    const updateOperation = await UpdateOperation.parseObject(\n      operationObject,\n      operationBuffer,\n      false\n    );\n    return updateOperation;\n  }\n\n  /**\n   * Parses the given operation object as a `UpdateOperation`.\n   * The `operationBuffer` given is assumed to be valid and is assigned to the `operationBuffer` directly.\n   * NOTE: This method is purely intended to be used as an optimization method over the `parse` method in that\n   * JSON parsing is not required to be performed more than once when an operation buffer of an unknown operation type is given.\n   * @param mapFileMode If set to true, then `delta` and `type` properties are expected to be absent.\n   */\n  public static async parseObject(\n    operationObject: any,\n    operationBuffer: Buffer,\n    mapFileMode: boolean\n  ): Promise<UpdateOperation> {\n    let expectedPropertyCount = 4;\n    if (mapFileMode) {\n      expectedPropertyCount = 2;\n    }\n\n    const properties = Object.keys(operationObject);\n    if (properties.length !== expectedPropertyCount) {\n      throw new SidetreeError(\n        ErrorCode.UpdateOperationMissingOrUnknownProperty\n      );\n    }\n\n    if (typeof operationObject.did_suffix !== 'string') {\n      throw new SidetreeError(ErrorCode.UpdateOperationMissingDidUniqueSuffix);\n    }\n\n    const signedData = Jws.parseCompactJws(operationObject.signed_data);\n    const signedDataModel = await UpdateOperation.parseSignedDataPayload(\n      signedData.payload\n    );\n\n    // If not in map file mode, we need to validate `type` and `delta` properties.\n    let encodedDelta = undefined;\n    let delta = undefined;\n    if (!mapFileMode) {\n      if (operationObject.type !== OperationType.Update) {\n        throw new SidetreeError(ErrorCode.UpdateOperationTypeIncorrect);\n      }\n\n      encodedDelta = operationObject.delta;\n      delta = await OperationUtils.parseDelta(encodedDelta);\n    }\n\n    return new UpdateOperation(\n      operationBuffer,\n      operationObject.did_suffix,\n      signedData,\n      signedDataModel,\n      encodedDelta,\n      delta\n    );\n  }\n\n  private static async parseSignedDataPayload(\n    signedDataEncodedString: string\n  ): Promise<SignedDataModel> {\n    const signedDataJsonString = Encoder.decodeAsString(\n      signedDataEncodedString\n    );\n    const signedData = await JsonAsync.parse(signedDataJsonString);\n\n    const properties = Object.keys(signedData);\n    if (properties.length !== 2) {\n      throw new SidetreeError(\n        ErrorCode.UpdateOperationSignedDataHasMissingOrUnknownProperty\n      );\n    }\n\n    Jwk.validatePublicJwk(signedData.update_key);\n\n    const delta_hash = Encoder.decodeAsBuffer(signedData.delta_hash);\n    Multihash.verifyHashComputedUsingLatestSupportedAlgorithm(delta_hash);\n\n    return {\n      delta_hash: signedData.delta_hash,\n      update_key: signedData.update_key,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorCode, MapFileModel, SidetreeError } from '@sidetree/common';\nimport UpdateOperation from '../UpdateOperation';\nimport ArrayMethods from '../util/ArrayMethods';\nimport Compressor from '../util/Compressor';\nimport JsonAsync from '../util/JsonAsync';\n\n/**\n * Class containing Map File related operations.\n */\nexport default class MapFile {\n  /**\n   * Class that represents a map file.\n   * NOTE: this class is introduced as an internal structure in replacement to `MapFileModel`\n   * to keep useful metadata so that repeated computation can be avoided.\n   */\n  private constructor(\n    public readonly model: MapFileModel,\n    public readonly didUniqueSuffixes: string[],\n    public readonly updateOperations: UpdateOperation[]\n  ) {}\n\n  /**\n   * Parses and validates the given map file buffer.\n   * @throws `SidetreeError` if failed parsing or validation.\n   */\n  public static async parse(mapFileBuffer: Buffer): Promise<MapFile> {\n    let decompressedBuffer;\n    try {\n      decompressedBuffer = await Compressor.decompress(mapFileBuffer);\n    } catch (error) {\n      throw SidetreeError.createFromError(\n        ErrorCode.MapFileDecompressionFailure,\n        error\n      );\n    }\n\n    let mapFileModel;\n    try {\n      mapFileModel = await JsonAsync.parse(decompressedBuffer);\n    } catch (error) {\n      throw SidetreeError.createFromError(ErrorCode.MapFileNotJson, error);\n    }\n\n    const allowedProperties = new Set(['chunks', 'operations']);\n    for (const property in mapFileModel) {\n      if (!allowedProperties.has(property)) {\n        throw new SidetreeError(ErrorCode.MapFileHasUnknownProperty);\n      }\n    }\n\n    MapFile.validateChunksProperty(mapFileModel.chunks);\n\n    const updateOperations = await MapFile.parseOperationsProperty(\n      mapFileModel.operations\n    );\n    const didUniqueSuffixes = updateOperations.map(\n      (operation) => operation.didUniqueSuffix\n    );\n\n    const mapFile = new MapFile(\n      mapFileModel,\n      didUniqueSuffixes,\n      updateOperations\n    );\n    return mapFile;\n  }\n\n  /**\n   * Validates the given `operations` property, throws error if the property fails validation.\n   */\n  private static async parseOperationsProperty(\n    operations: any\n  ): Promise<UpdateOperation[]> {\n    if (operations === undefined) {\n      return [];\n    }\n\n    const properties = Object.keys(operations);\n    if (properties.length !== 1) {\n      throw new SidetreeError(\n        ErrorCode.MapFileOperationsPropertyHasMissingOrUnknownProperty\n      );\n    }\n\n    const updateOperations: UpdateOperation[] = [];\n    if (!Array.isArray(operations.update)) {\n      throw new SidetreeError(ErrorCode.MapFileUpdateOperationsNotArray);\n    }\n\n    // Validate each update operation.\n    for (const operation of operations.update) {\n      const updateOperation = await UpdateOperation.parseOperationFromMapFile(\n        operation\n      );\n      updateOperations.push(updateOperation);\n    }\n\n    // Make sure no operation with same DID.\n    const didUniqueSuffixes = updateOperations.map(\n      (operation) => operation.didUniqueSuffix\n    );\n    if (ArrayMethods.hasDuplicates(didUniqueSuffixes)) {\n      throw new SidetreeError(ErrorCode.MapFileMultipleOperationsForTheSameDid);\n    }\n\n    return updateOperations;\n  }\n\n  /**\n   * Validates the given `chunks` property, throws error if the property fails validation.\n   */\n  private static validateChunksProperty(chunks: any) {\n    if (!Array.isArray(chunks)) {\n      throw new SidetreeError(\n        ErrorCode.MapFileChunksPropertyMissingOrIncorrectType\n      );\n    }\n\n    // This version expects only one hash.\n    if (chunks.length !== 1) {\n      throw new SidetreeError(\n        ErrorCode.MapFileChunksPropertyDoesNotHaveExactlyOneElement\n      );\n    }\n\n    const chunk = chunks[0];\n    const properties = Object.keys(chunk);\n    if (properties.length !== 1) {\n      throw new SidetreeError(\n        ErrorCode.MapFileChunkHasMissingOrUnknownProperty\n      );\n    }\n  }\n\n  /**\n   * Creates the Map File buffer.\n   */\n  public static async createBuffer(\n    chunkFileHash: string,\n    updateOperationArray: UpdateOperation[]\n  ): Promise<Buffer> {\n    const updateOperations = updateOperationArray.map((operation) => {\n      return {\n        did_suffix: operation.didUniqueSuffix,\n        signed_data: operation.signedDataJws.toCompactJws(),\n      };\n    });\n\n    const mapFileModel: MapFileModel = {\n      chunks: [{ chunk_file_uri: chunkFileHash }],\n    };\n\n    // Only insert an `operations` property if there are update operations.\n    if (updateOperations.length > 0) {\n      mapFileModel.operations = {\n        update: updateOperations,\n      };\n    }\n\n    const rawData = JSON.stringify(mapFileModel);\n    const compressedRawData = await Compressor.compress(Buffer.from(rawData));\n\n    return compressedRawData;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IVersionManager, TransactionModel } from '@sidetree/common';\n\n/**\n * Keeps track of current block and throughput limits based on the state\n */\nexport default class ThroughputLimiter {\n  constructor(private versionManager: IVersionManager) {}\n\n  /**\n   * given a an array of transactions, return an array of qualified transactions per transaction time.\n   * @param transactions array of transactions to filter for\n   */\n  public async getQualifiedTransactions(transactions: TransactionModel[]) {\n    let currentTransactionTime: number | undefined = undefined;\n    const transactionsGroupedByTransactionTime: TransactionModel[][] = [];\n\n    for (const transaction of transactions) {\n      // If transaction is transitioning into a new time, create a new grouping.\n      if (transaction.transactionTime !== currentTransactionTime) {\n        transactionsGroupedByTransactionTime.push([]);\n        currentTransactionTime = transaction.transactionTime;\n      }\n      transactionsGroupedByTransactionTime[\n        transactionsGroupedByTransactionTime.length - 1\n      ].push(transaction);\n    }\n\n    const qualifiedTransactions: TransactionModel[] = [];\n    for (const transactionGroup of transactionsGroupedByTransactionTime) {\n      const transactionSelector = this.versionManager.getTransactionSelector(\n        transactionGroup[0].transactionTime\n      );\n      const qualifiedTransactionsInCurrentGroup = await transactionSelector.selectQualifiedTransactions(\n        transactionGroup\n      );\n      qualifiedTransactions.push(...qualifiedTransactionsInCurrentGroup);\n    }\n    return qualifiedTransactions;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  IBlockchain,\n  IOperationStore,\n  ITransactionProcessor,\n  ITransactionStore,\n  IUnresolvableTransactionStore,\n  IVersionManager,\n  SharedErrorCode,\n  SidetreeError,\n  TransactionModel,\n  TransactionUnderProcessingModel,\n  TransactionProcessingStatus,\n} from '@sidetree/common';\nimport timeSpan from 'time-span';\nimport ThroughputLimiter from './ThroughputLimiter';\n\n/**\n * Class that performs periodic processing of batches of Sidetree operations anchored to the blockchain.\n */\nexport default class Observer {\n  /**\n   * Denotes if the periodic transaction processing should continue to occur.\n   * Used mainly for test purposes.\n   */\n  private continuePeriodicProcessing = false;\n\n  /**\n   * The list of transactions that are being downloaded or processed.\n   */\n  private transactionsUnderProcessing: TransactionUnderProcessingModel[] = [];\n\n  /**\n   * This is the transaction that is used as a timestamp to fetch newer transaction.\n   */\n  private lastKnownTransaction: TransactionModel | undefined;\n\n  private throughputLimiter: ThroughputLimiter;\n\n  public constructor(\n    private versionManager: IVersionManager,\n    private blockchain: IBlockchain,\n    private maxConcurrentDownloads: number,\n    private operationStore: IOperationStore,\n    private transactionStore: ITransactionStore,\n    private unresolvableTransactionStore: IUnresolvableTransactionStore,\n    private observingIntervalInSeconds: number\n  ) {\n    this.throughputLimiter = new ThroughputLimiter(versionManager);\n  }\n\n  public async refreshLastKnownTransaction(): Promise<void> {\n    this.lastKnownTransaction = await this.transactionStore.getLastTransaction();\n  }\n\n  /**\n   * The method that starts the periodic polling and processing of Sidetree operations.\n   */\n  public async startPeriodicProcessing(): Promise<void> {\n    // Initialize the last known transaction before starting processing.\n    await this.refreshLastKnownTransaction();\n\n    console.info(`Starting periodic transactions processing.`);\n    setImmediate(async () => {\n      this.continuePeriodicProcessing = true;\n\n      // tslint:disable-next-line:no-floating-promises - this.processTransactions() never throws.\n      this.processTransactions();\n    });\n  }\n\n  /**\n   * Stops periodic transaction processing.\n   * Mainly used for test purposes.\n   */\n  public stopPeriodicProcessing(): void {\n    console.info(`Stopped periodic transactions processing.`);\n    this.continuePeriodicProcessing = false;\n  }\n\n  /**\n   * Processes new transactions if any, then reprocess a set of unresolvable transactions if any,\n   * then schedules the next round of processing unless `stopPeriodicProcessing()` is invoked.\n   */\n  public async processTransactions(\n    awaitTransactionProcessing = false\n  ): Promise<void> {\n    try {\n      await this.storeConsecutiveTransactionsProcessed(); // Do this in multiple places\n\n      // Keep fetching new Sidetree transactions from blockchain and processing them\n      // until there are no more new transactions or there is a block reorganization.\n      let moreTransactions = false;\n      do {\n        // Get the last transaction to be used as a timestamp to fetch new transactions.\n        const lastKnownTransactionNumber = this.lastKnownTransaction\n          ? this.lastKnownTransaction.transactionNumber\n          : undefined;\n        const lastKnownTransactionTimeHash = this.lastKnownTransaction\n          ? this.lastKnownTransaction.transactionTimeHash\n          : undefined;\n        const lastKnownTransactionTime = this.lastKnownTransaction\n          ? this.lastKnownTransaction.transactionTime\n          : 0;\n\n        let invalidTransactionNumberOrTimeHash = false;\n        let readResult;\n        const endTimer = timeSpan(); // Measure time taken to go blockchain read.\n        try {\n          console.info(\n            'Fetching Sidetree transactions from blockchain service...'\n          );\n          const nextTransactionNumber =\n            lastKnownTransactionNumber !== undefined\n              ? lastKnownTransactionNumber + 1\n              : undefined;\n          readResult = await this.blockchain.read(\n            nextTransactionNumber,\n            lastKnownTransactionTimeHash\n          );\n          console.info(\n            `Fetched ${\n              readResult.transactions.length\n            } Sidetree transactions from blockchain service in ${endTimer.rounded()} ms.`\n          );\n        } catch (error) {\n          if (\n            error instanceof SidetreeError &&\n            error.code === SharedErrorCode.InvalidTransactionNumberOrTimeHash\n          ) {\n            console.info(\n              `Invalid transaction number ${lastKnownTransactionNumber} or time hash ${lastKnownTransactionTimeHash} given to blockchain service.`\n            );\n            invalidTransactionNumberOrTimeHash = true;\n          } else {\n            throw error;\n          }\n        }\n\n        const transactions = readResult ? readResult.transactions : [];\n        moreTransactions = readResult ? readResult.moreTransactions : false;\n        let qualifiedTransactions = await this.throughputLimiter.getQualifiedTransactions(\n          transactions\n        );\n        qualifiedTransactions = qualifiedTransactions.sort(\n          (\n            a: { transactionNumber: number },\n            b: { transactionNumber: number }\n          ) => {\n            return a.transactionNumber - b.transactionNumber;\n          }\n        );\n\n        // Queue parallel downloading and processing of chunk files.\n        for (const transaction of qualifiedTransactions) {\n          const awaitingTransaction = {\n            transaction: transaction,\n            processingStatus: TransactionProcessingStatus.Pending,\n          };\n          this.transactionsUnderProcessing.push(awaitingTransaction);\n          if (awaitTransactionProcessing) {\n            await this.processTransaction(transaction, awaitingTransaction);\n          } else {\n            // Intentionally not awaiting on downloading and processing each operation batch.\n            void this.processTransaction(transaction, awaitingTransaction);\n          }\n        }\n\n        // NOTE: Blockchain reorg has happened for sure only if `invalidTransactionNumberOrTimeHash` AND\n        // latest transaction time is less or equal to blockchain service time.\n        // This check will prevent Core from reverting transactions if/when blockchain service is reinitializing its data itself.\n        let blockReorganizationDetected = false;\n        if (invalidTransactionNumberOrTimeHash) {\n          if (\n            lastKnownTransactionTime <= this.blockchain.approximateTime.time\n          ) {\n            blockReorganizationDetected = true;\n            moreTransactions = true;\n          } else {\n            console.info(\n              `Blockchain microservice blockchain time is behind last known transaction time, waiting for blockchain microservice to catch up...`\n            );\n          }\n        }\n\n        // If block reorg is detected, we must wait until no more operation processing is pending,\n        // then revert invalid transaction and operations.\n        if (blockReorganizationDetected) {\n          console.info(`Block reorganization detected.`);\n          await this.waitUntilCountOfTransactionsUnderProcessingIsLessOrEqualTo(\n            0\n          );\n\n          console.info(`Reverting invalid transactions...`);\n          await this.revertInvalidTransactions();\n          console.info(`Completed reverting invalid transactions.`);\n        } else {\n          // Else it means transaction fetch was successful:\n          // We hold off from fetching more transactions if the list of transactions under processing gets too long.\n          // We will wait for count of transaction being processed to fall to the maximum allowed concurrent downloads\n          // before attempting further transaction fetches.\n          await this.waitUntilCountOfTransactionsUnderProcessingIsLessOrEqualTo(\n            this.maxConcurrentDownloads\n          );\n        }\n\n        // Update the last known transaction.\n        // NOTE: In case of block reorg, last known transaction will be updated in `this.RevertInvalidTransactions()` method.\n        if (transactions && transactions.length > 0) {\n          this.lastKnownTransaction = transactions[transactions.length - 1];\n        }\n      } while (moreTransactions);\n\n      await this.storeConsecutiveTransactionsProcessed();\n      console.info(\n        'Successfully kicked off downloading/processing of all new Sidetree transactions.'\n      );\n\n      // Continue onto processing unresolvable transactions if any.\n      await this.processUnresolvableTransactions(awaitTransactionProcessing);\n    } catch (error) {\n      console.error(\n        `Encountered unhandled and possibly fatal Observer error, must investigate and fix:`\n      );\n      console.error(error);\n    } finally {\n      if (this.continuePeriodicProcessing) {\n        console.info(\n          `Waiting for ${this.observingIntervalInSeconds} seconds before fetching and processing transactions again.`\n        );\n        setTimeout(\n          async () => this.processTransactions(),\n          this.observingIntervalInSeconds * 1000\n        );\n      }\n    }\n  }\n\n  private async waitUntilCountOfTransactionsUnderProcessingIsLessOrEqualTo(\n    count: number\n  ): Promise<void> {\n    while (this.transactionsUnderProcessing.length > count) {\n      // Store the consecutively processed transactions in the transaction store.\n      await this.storeConsecutiveTransactionsProcessed();\n\n      // Wait a little before checking again.\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    return;\n  }\n\n  /**\n   * Attempts to fetch and process unresolvable transactions due for retry.\n   * Waits until all unresolvable transactions due for retry are processed.\n   */\n  private async processUnresolvableTransactions(\n    awaitTransactionProcessing = false\n  ): Promise<void> {\n    const endTimer = timeSpan();\n    const unresolvableTransactions = await this.unresolvableTransactionStore.getUnresolvableTransactionsDueForRetry();\n    console.info(\n      `Fetched ${\n        unresolvableTransactions.length\n      } unresolvable transactions to retry in ${endTimer.rounded()} ms.`\n    );\n\n    // Download and process each unresolvable transactions.\n    const unresolvableTransactionStatus = [];\n    for (const transaction of unresolvableTransactions) {\n      const awaitingTransaction = {\n        transaction: transaction,\n        processingStatus: TransactionProcessingStatus.Pending,\n      };\n      unresolvableTransactionStatus.push(awaitingTransaction);\n      // Intentionally not awaiting on downloading and processing each operation batch.\n      if (awaitTransactionProcessing) {\n        await this.processTransaction(transaction, awaitingTransaction);\n      } else {\n        // Intentionally not awaiting on downloading and processing each operation batch.\n        void this.processTransaction(transaction, awaitingTransaction);\n      }\n    }\n\n    // Wait until all unresolvable transactions are processed,\n    while (unresolvableTransactionStatus.length > 0) {\n      // Find the index of the first transaction that is not processed yet.\n      let i = 0;\n      while (\n        i < unresolvableTransactionStatus.length &&\n        unresolvableTransactionStatus[i].processingStatus ===\n          TransactionProcessingStatus.Processed\n      ) {\n        i++;\n      }\n\n      // Trim the parallelized transaction list.\n      unresolvableTransactionStatus.splice(0, i);\n\n      // Wait a little before checking again.\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n  }\n\n  /**\n   * Goes through the `transactionsUnderProcessing` in chronological order, records each processed transaction\n   * in the transaction store and remove it from `transactionsUnderProcessing` until a transaction that has not been processed yet is hit.\n   */\n  private async storeConsecutiveTransactionsProcessed(): Promise<void> {\n    let i = 0;\n    while (\n      i < this.transactionsUnderProcessing.length &&\n      this.transactionsUnderProcessing[i].processingStatus ===\n        TransactionProcessingStatus.Processed\n    ) {\n      await this.transactionStore.addTransaction(\n        this.transactionsUnderProcessing[i].transaction\n      );\n      i++;\n    }\n\n    // Trim the transaction list.\n    this.transactionsUnderProcessing.splice(0, i);\n  }\n\n  /**\n   * Processes the given transaction by passing the transaction to the right version of the transaction processor based on the transaction time.\n   * The transaction processing generically involves first downloading DID operation data from CAS (Content Addressable Storage),\n   * then storing the operations indexed/grouped by DIDs in the persistent operation DB.\n   */\n  private async processTransaction(\n    transaction: TransactionModel,\n    transactionUnderProcessing: TransactionUnderProcessingModel\n  ): Promise<void> {\n    let transactionProcessedSuccessfully;\n\n    try {\n      const transactionProcessor: ITransactionProcessor = this.versionManager.getTransactionProcessor(\n        transaction.transactionTime\n      );\n      transactionProcessedSuccessfully = await transactionProcessor.processTransaction(\n        transaction\n      );\n    } catch (error) {\n      console.error(\n        `Unhandled error encountered processing transaction '${transaction.transactionNumber}'.`\n      );\n      console.error(error);\n      transactionProcessedSuccessfully = false;\n    } finally {\n      // Purposely setting processing status first before rest of the code to prevent any possibility of deadlocking the Observer.\n      console.info(\n        `Finished processing transaction '${transaction.transactionNumber}'.`\n      );\n      transactionUnderProcessing.processingStatus =\n        TransactionProcessingStatus.Processed;\n\n      if (transactionProcessedSuccessfully) {\n        console.info(\n          `Removing transaction '${transaction.transactionNumber}' from unresolvable transactions if exists...`\n        );\n        await this.unresolvableTransactionStore.removeUnresolvableTransaction(\n          transaction\n        );\n      } else {\n        console.info(\n          `Recording failed processing attempt for transaction '${transaction.transactionNumber}'...`\n        );\n        await this.unresolvableTransactionStore.recordUnresolvableTransactionFetchAttempt(\n          transaction\n        );\n      }\n    }\n  }\n\n  /**\n   * Reverts invalid transactions. Used in the event of a block-reorganization.\n   */\n  private async revertInvalidTransactions(): Promise<void> {\n    // Compute a list of exponentially-spaced transactions with their index, starting from the last transaction of the processed transactions.\n    const exponentiallySpacedTransactions = await this.transactionStore.getExponentiallySpacedTransactions();\n\n    // Find a known valid Sidetree transaction that is prior to the block reorganization.\n    const bestKnownValidRecentTransaction = await this.blockchain.getFirstValidTransaction(\n      exponentiallySpacedTransactions\n    );\n\n    const bestKnownValidRecentTransactionNumber =\n      bestKnownValidRecentTransaction === undefined\n        ? undefined\n        : bestKnownValidRecentTransaction.transactionNumber;\n    console.info(\n      `Best known valid recent transaction: ${bestKnownValidRecentTransactionNumber}`\n    );\n\n    // Revert all processed operations that came after the best known valid recent transaction.\n    console.info('Reverting operations...');\n    await this.operationStore.delete(bestKnownValidRecentTransactionNumber);\n\n    // NOTE: MUST do this step LAST to handle incomplete operation rollback due to unexpected scenarios, such as power outage etc.\n    await this.transactionStore.removeTransactionsLaterThan(\n      bestKnownValidRecentTransactionNumber\n    );\n    await this.unresolvableTransactionStore.removeUnresolvableTransactionsLaterThan(\n      bestKnownValidRecentTransactionNumber\n    );\n\n    // Reset the in-memory last known good Transaction so we next processing cycle will fetch from the correct timestamp/maker.\n    this.lastKnownTransaction = bestKnownValidRecentTransaction;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorCode,\n  OperationModel,\n  OperationType,\n  SidetreeError,\n} from '@sidetree/common';\nimport CreateOperation from './CreateOperation';\nimport DeactivateOperation from './DeactivateOperation';\nimport RecoverOperation from './RecoverOperation';\nimport UpdateOperation from './UpdateOperation';\n\n/**\n * A class that contains Sidetree operation utility methods.\n */\nexport default class Operation {\n  /** Maximum allowed encoded reveal value string length. */\n  public static readonly maxEncodedRevealValueLength = 50;\n\n  /**\n   * Parses the given buffer into an `OperationModel`.\n   */\n  public static async parse(operationBuffer: Buffer): Promise<OperationModel> {\n    // Parse request buffer into a JS object.\n    const operationJsonString = operationBuffer.toString();\n    const operationObject = JSON.parse(operationJsonString);\n    const operationType = operationObject.type;\n    const isAnchorFileMode = false;\n\n    if (operationType === OperationType.Create) {\n      return CreateOperation.parseObject(\n        operationObject,\n        operationBuffer,\n        isAnchorFileMode\n      );\n    } else if (operationType === OperationType.Update) {\n      return UpdateOperation.parseObject(\n        operationObject,\n        operationBuffer,\n        isAnchorFileMode\n      );\n    } else if (operationType === OperationType.Recover) {\n      return RecoverOperation.parseObject(\n        operationObject,\n        operationBuffer,\n        isAnchorFileMode\n      );\n    } else if (operationType === OperationType.Deactivate) {\n      return DeactivateOperation.parseObject(\n        operationObject,\n        operationBuffer,\n        isAnchorFileMode\n      );\n    } else {\n      throw new SidetreeError(ErrorCode.OperationTypeUnknownOrMissing);\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredOperationModel,\n  Encoder,\n  PublicKeyJwk,\n  Multihash,\n  OperationModel,\n  OperationType,\n  PrivateKeyJwk,\n  PublicKeyModel,\n  ServiceEndpointModel,\n  PublicKeyPurpose,\n  DocumentModel,\n  PrivateKeyJwkEd25519,\n} from '@sidetree/common';\nimport * as crypto from 'crypto';\nimport CreateOperation from '../../CreateOperation';\nimport DeactivateOperation from '../../DeactivateOperation';\nimport RecoverOperation from '../../RecoverOperation';\nimport UpdateOperation from '../../UpdateOperation';\nimport Jwk from '../../util/Jwk';\nimport Jws from '../../util/Jws';\n\ninterface AnchoredCreateOperationGenerationInput {\n  transactionNumber: number;\n  transactionTime: number;\n  operationIndex: number;\n}\n\ninterface RecoverOperationGenerationInput {\n  didUniqueSuffix: string;\n  recoveryPrivateKey: PrivateKeyJwk;\n}\n\ninterface GeneratedRecoverOperationData {\n  operationBuffer: Buffer;\n  recoverOperation: RecoverOperation;\n  recoveryPublicKey: PublicKeyJwk;\n  recoveryPrivateKey: PrivateKeyJwk;\n  signingPublicKey: PublicKeyModel;\n  signingPrivateKey: PrivateKeyJwk;\n  update_key: PublicKeyModel;\n  updatePrivateKey: PrivateKeyJwk;\n}\n\n/**\n * A class that can generate valid operations.\n * Mainly useful for testing purposes.\n */\nexport default class OperationGenerator {\n  /**\n   * Generates random hash.\n   */\n  public static generateRandomHash(): string {\n    const randomBuffer = crypto.randomBytes(32);\n    const randomHash = Encoder.encode(Multihash.hash(randomBuffer));\n\n    return randomHash;\n  }\n\n  /**\n   * Generates Ed25519 key pair to be used in an operation. If purpose not supplied, all purposes will be included\n   * Mainly used for testing.\n   * @returns [publicKey, privateKey]\n   */\n  public static async generateKeyPair(\n    id: string,\n    purpose?: PublicKeyPurpose[]\n  ): Promise<[PublicKeyModel, PrivateKeyJwk]> {\n    const [publicKey, privateKey] = await Jwk.generateEd25519KeyPair();\n    const publicKeyModel = {\n      id,\n      type: 'Ed25519VerificationKey2018',\n      jwk: publicKey,\n      purpose: purpose || Object.values(PublicKeyPurpose),\n    };\n\n    return [publicKeyModel, privateKey];\n  }\n\n  /**\n   * Generates an anchored create operation.\n   */\n  public static async generateAnchoredCreateOperation(\n    input: AnchoredCreateOperationGenerationInput\n  ) {\n    const createOperationData = await OperationGenerator.generateCreateOperation();\n\n    const anchoredOperationModel = {\n      type: OperationType.Create,\n      didUniqueSuffix: createOperationData.createOperation.didUniqueSuffix,\n      operationBuffer: createOperationData.createOperation.operationBuffer,\n      transactionNumber: input.transactionNumber,\n      transactionTime: input.transactionTime,\n      operationIndex: input.operationIndex,\n    };\n\n    return {\n      createOperation: createOperationData.createOperation,\n      operationRequest: createOperationData.operationRequest,\n      anchoredOperationModel,\n      recoveryPublicKey: createOperationData.recoveryPublicKey,\n      recoveryPrivateKey: createOperationData.recoveryPrivateKey,\n      updatePublicKey: createOperationData.updatePublicKey,\n      updatePrivateKey: createOperationData.updatePrivateKey,\n      signingPublicKey: createOperationData.signingPublicKey,\n      signingPrivateKey: createOperationData.signingPrivateKey,\n      nextUpdateRevealValueEncodedString:\n        createOperationData.nextUpdateRevealValueEncodedString,\n    };\n  }\n\n  /**\n   * Generates an create operation.\n   */\n  public static async generateCreateOperation() {\n    const signingKeyId = 'signingKey';\n    const [\n      recoveryPublicKey,\n      recoveryPrivateKey,\n    ] = await Jwk.generateEd25519KeyPair();\n    const [\n      updatePublicKey,\n      updatePrivateKey,\n    ] = await Jwk.generateEd25519KeyPair();\n    const [\n      signingPublicKey,\n      signingPrivateKey,\n    ] = await OperationGenerator.generateKeyPair(signingKeyId);\n    const service = OperationGenerator.generateServiceEndpoints([\n      'serviceEndpointId123',\n    ]);\n\n    const operationRequest = await OperationGenerator.generateCreateOperationRequest(\n      recoveryPublicKey,\n      updatePublicKey,\n      [signingPublicKey],\n      service\n    );\n\n    const operationBuffer = Buffer.from(JSON.stringify(operationRequest));\n\n    const createOperation = await CreateOperation.parse(operationBuffer);\n\n    const nextUpdateRevealValueEncodedString = Multihash.canonicalizeThenHashThenEncode(\n      signingPublicKey.jwk\n    );\n    return {\n      createOperation,\n      operationRequest,\n      recoveryPublicKey,\n      recoveryPrivateKey,\n      updatePublicKey,\n      updatePrivateKey,\n      signingPublicKey,\n      signingPrivateKey,\n      nextUpdateRevealValueEncodedString,\n    };\n  }\n\n  /**\n   * Generates a recover operation.\n   */\n  public static async generateRecoverOperation(\n    input: RecoverOperationGenerationInput\n  ): Promise<GeneratedRecoverOperationData> {\n    const newSigningKeyId = 'newSigningKey';\n    const [\n      newRecoveryPublicKey,\n      newRecoveryPrivateKey,\n    ] = await Jwk.generateEd25519KeyPair();\n    const [\n      newSigningPublicKey,\n      newSigningPrivateKey,\n    ] = await OperationGenerator.generateKeyPair(newSigningKeyId);\n    const [publicKeyToBeInDocument] = await OperationGenerator.generateKeyPair(\n      'newKey'\n    );\n    const services = OperationGenerator.generateServiceEndpoints([\n      'serviceEndpointId123',\n    ]);\n\n    // Generate the next update and recover operation commitment hash reveal value pair.\n    const [\n      update_key,\n      updatePrivateKey,\n    ] = await OperationGenerator.generateKeyPair('update_key');\n\n    const operationJson = await OperationGenerator.generateRecoverOperationRequest(\n      input.didUniqueSuffix,\n      input.recoveryPrivateKey,\n      newRecoveryPublicKey,\n      newSigningPublicKey,\n      services,\n      [publicKeyToBeInDocument]\n    );\n\n    const operationBuffer = Buffer.from(JSON.stringify(operationJson));\n    const recoverOperation = await RecoverOperation.parse(operationBuffer);\n\n    return {\n      recoverOperation,\n      operationBuffer,\n      recoveryPublicKey: newRecoveryPublicKey,\n      recoveryPrivateKey: newRecoveryPrivateKey,\n      signingPublicKey: newSigningPublicKey,\n      signingPrivateKey: newSigningPrivateKey,\n      update_key,\n      updatePrivateKey,\n    };\n  }\n\n  /**\n   * Generates an update operation that adds a new key.\n   */\n  public static async generateUpdateOperation(\n    didUniqueSuffix: string,\n    updatePublicKey: PublicKeyJwk,\n    updatePrivateKey: PrivateKeyJwk\n  ) {\n    const additionalKeyId = `additional-key`;\n    const [\n      additionalPublicKey,\n      additionalPrivateKey,\n    ] = await OperationGenerator.generateKeyPair(additionalKeyId);\n\n    const operationJson = await OperationGenerator.createUpdateOperationRequestForAddingAKey(\n      didUniqueSuffix,\n      updatePublicKey,\n      updatePrivateKey,\n      additionalPublicKey,\n      Multihash.canonicalizeThenHashThenEncode(additionalPublicKey)\n    );\n\n    const operationBuffer = Buffer.from(JSON.stringify(operationJson));\n    const updateOperation = await UpdateOperation.parse(operationBuffer);\n\n    return {\n      updateOperation,\n      operationBuffer,\n      additionalKeyId,\n      additionalPublicKey,\n      additionalPrivateKey,\n      nextUpdateKey: additionalPublicKey.jwk,\n    };\n  }\n\n  /**\n   * Creates a named anchored operation model from `OperationModel`.\n   */\n  public static createAnchoredOperationModelFromOperationModel(\n    operationModel: OperationModel,\n    transactionTime: number,\n    transactionNumber: number,\n    operationIndex: number\n  ): AnchoredOperationModel {\n    const anchoredOperationModel: AnchoredOperationModel = {\n      didUniqueSuffix: operationModel.didUniqueSuffix,\n      type: operationModel.type,\n      operationBuffer: operationModel.operationBuffer,\n      operationIndex,\n      transactionNumber,\n      transactionTime,\n    };\n    return anchoredOperationModel;\n  }\n\n  /**\n   * Generates a create operation request.\n   */\n  public static async generateCreateOperationRequest(\n    recoveryPublicKey: PublicKeyJwk,\n    updatePublicKey: PublicKeyJwk,\n    otherPublicKeys: PublicKeyModel[],\n    service_endpoints?: ServiceEndpointModel[]\n  ) {\n    const document: DocumentModel = {\n      public_keys: otherPublicKeys,\n      service_endpoints,\n    };\n\n    const patches = [\n      {\n        action: 'replace',\n        document,\n      },\n    ];\n\n    const delta = {\n      update_commitment: Multihash.canonicalizeThenHashThenEncode(\n        updatePublicKey\n      ),\n      patches,\n    };\n\n    const deltaBuffer = Buffer.from(JSON.stringify(delta));\n    const delta_hash = Encoder.encode(Multihash.hash(deltaBuffer));\n\n    const suffixData = {\n      delta_hash: delta_hash,\n      recovery_commitment: Multihash.canonicalizeThenHashThenEncode(\n        recoveryPublicKey\n      ),\n    };\n\n    const suffixDataEncodedString = Encoder.encode(JSON.stringify(suffixData));\n    const deltaEncodedString = Encoder.encode(deltaBuffer);\n    const operation = {\n      type: OperationType.Create,\n      suffix_data: suffixDataEncodedString,\n      delta: deltaEncodedString,\n    };\n\n    return operation;\n  }\n\n  /**\n   * Generates an update operation request.\n   */\n  public static async generateUpdateOperationRequest(didUniqueSuffix?: string) {\n    if (didUniqueSuffix === undefined) {\n      didUniqueSuffix = OperationGenerator.generateRandomHash();\n    }\n    const [nextUpdateKey] = await OperationGenerator.generateKeyPair(\n      'nextUpdateKey'\n    );\n    const nextUpdateCommitmentHash = Multihash.canonicalizeThenHashThenEncode(\n      nextUpdateKey.jwk\n    );\n    const anyNewSigningPublicKeyId = 'anyNewKey';\n    const [anyNewSigningKey] = await OperationGenerator.generateKeyPair(\n      anyNewSigningPublicKeyId\n    );\n    const patches = [\n      {\n        action: 'add-public-keys',\n        public_keys: [anyNewSigningKey],\n      },\n    ];\n    const signingKeyId = 'anySigningKeyId';\n    const [\n      signingPublicKey,\n      signingPrivateKey,\n    ] = await OperationGenerator.generateKeyPair(signingKeyId);\n    const request = await OperationGenerator.createUpdateOperationRequest(\n      didUniqueSuffix,\n      signingPublicKey.jwk,\n      signingPrivateKey,\n      nextUpdateCommitmentHash,\n      patches\n    );\n\n    const buffer = Buffer.from(JSON.stringify(request));\n    const updateOperation = await UpdateOperation.parse(buffer);\n\n    return {\n      request,\n      buffer,\n      updateOperation,\n    };\n  }\n\n  /**\n   * Creates an update operation request.\n   */\n  public static async createUpdateOperationRequest(\n    didUniqueSuffix: string,\n    updatePublicKey: PublicKeyJwk,\n    updatePrivateKey: PrivateKeyJwk,\n    nextUpdateCommitmentHash: string,\n    patches: any\n  ) {\n    const delta = {\n      patches,\n      update_commitment: nextUpdateCommitmentHash,\n    };\n    const deltaJsonString = JSON.stringify(delta);\n    const delta_hash = Encoder.encode(\n      Multihash.hash(Buffer.from(deltaJsonString))\n    );\n    const encodedDeltaString = Encoder.encode(deltaJsonString);\n\n    const signedDataPayloadObject = {\n      update_key: updatePublicKey,\n      delta_hash: delta_hash,\n    };\n    const signedData = await OperationGenerator.signUsingEd25519(\n      signedDataPayloadObject,\n      updatePrivateKey\n    );\n\n    const updateOperationRequest = {\n      type: OperationType.Update,\n      did_suffix: didUniqueSuffix,\n      delta: encodedDeltaString,\n      signed_data: signedData,\n    };\n\n    return updateOperationRequest;\n  }\n\n  /**\n   * Generates a recover operation request.\n   */\n  public static async generateRecoverOperationRequest(\n    didUniqueSuffix: string,\n    recoveryPrivateKey: PrivateKeyJwk,\n    newRecoveryPublicKey: PublicKeyJwk,\n    newSigningPublicKey: PublicKeyModel,\n    service_endpoints?: ServiceEndpointModel[],\n    public_keys?: PublicKeyModel[]\n  ) {\n    const document = {\n      public_keys: public_keys,\n      service_endpoints: service_endpoints,\n    };\n    const recoverOperation = await OperationGenerator.createRecoverOperationRequest(\n      didUniqueSuffix,\n      recoveryPrivateKey,\n      newRecoveryPublicKey,\n      Multihash.canonicalizeThenHashThenEncode(newSigningPublicKey.jwk),\n      document\n    );\n    return recoverOperation;\n  }\n\n  /**\n   * Creates a recover operation request.\n   */\n  public static async createRecoverOperationRequest(\n    didUniqueSuffix: string,\n    recoveryPrivateKey: PrivateKeyJwk,\n    newRecoveryPublicKey: PublicKeyJwk,\n    nextUpdateCommitmentHash: string,\n    document: any\n  ) {\n    const patches = [\n      {\n        action: 'replace',\n        document,\n      },\n    ];\n\n    const delta = {\n      patches,\n      update_commitment: nextUpdateCommitmentHash,\n    };\n\n    const deltaBuffer = Buffer.from(JSON.stringify(delta));\n    const delta_hash = Encoder.encode(Multihash.hash(deltaBuffer));\n\n    const signedDataPayloadObject = {\n      delta_hash: delta_hash,\n      recovery_key: Jwk.getCurve25519PublicKey(\n        recoveryPrivateKey as PrivateKeyJwkEd25519\n      ),\n      recovery_commitment: Multihash.canonicalizeThenHashThenEncode(\n        newRecoveryPublicKey\n      ),\n    };\n    const signedData = await OperationGenerator.signUsingEd25519(\n      signedDataPayloadObject,\n      recoveryPrivateKey\n    );\n\n    const deltaEncodedString = Encoder.encode(deltaBuffer);\n    const operation = {\n      type: OperationType.Recover,\n      did_suffix: didUniqueSuffix,\n      signed_data: signedData,\n      delta: deltaEncodedString,\n    };\n\n    return operation;\n  }\n\n  /**\n   * Generates a deactivate operation request.\n   */\n  public static async createDeactivateOperationRequest(\n    didUniqueSuffix: string,\n    recoveryPrivateKey: PrivateKeyJwk\n  ) {\n    const signedDataPayloadObject = {\n      did_suffix: didUniqueSuffix,\n      recovery_key: Jwk.getCurve25519PublicKey(\n        recoveryPrivateKey as PrivateKeyJwkEd25519\n      ),\n    };\n    const signedData = await OperationGenerator.signUsingEd25519(\n      signedDataPayloadObject,\n      recoveryPrivateKey\n    );\n\n    const operation = {\n      type: OperationType.Deactivate,\n      did_suffix: didUniqueSuffix,\n      signed_data: signedData,\n    };\n\n    return operation;\n  }\n\n  /**\n   * Generates a create operation request buffer.\n   * @param nextRecoveryCommitmentHash The encoded commitment hash for the next recovery.\n   * @param nextUpdateCommitmentHash The encoded commitment hash for the next update.\n   */\n  public static async generateCreateOperationBuffer(\n    recoveryPublicKey: PublicKeyJwk,\n    signingPublicKey: PublicKeyModel,\n    service_endpoints?: ServiceEndpointModel[]\n  ): Promise<Buffer> {\n    const operation = await OperationGenerator.generateCreateOperationRequest(\n      recoveryPublicKey,\n      signingPublicKey.jwk,\n      [signingPublicKey],\n      service_endpoints\n    );\n\n    return Buffer.from(JSON.stringify(operation));\n  }\n\n  /**\n   * Creates an update operation for adding a key.\n   */\n  public static async createUpdateOperationRequestForAddingAKey(\n    didUniqueSuffix: string,\n    updatePublicKey: PublicKeyJwk,\n    updatePrivateKey: PrivateKeyJwk,\n    newPublicKey: PublicKeyModel,\n    nextUpdateCommitmentHash: string\n  ) {\n    const patches = [\n      {\n        action: 'add-public-keys',\n        public_keys: [newPublicKey],\n      },\n    ];\n\n    const updateOperationRequest = await OperationGenerator.createUpdateOperationRequest(\n      didUniqueSuffix,\n      updatePublicKey,\n      updatePrivateKey,\n      nextUpdateCommitmentHash,\n      patches\n    );\n\n    return updateOperationRequest;\n  }\n\n  /**\n   * Creates an update operation for adding and/or removing hub service endpoints.\n   */\n  public static async createUpdateOperationRequestForHubEndpoints(\n    didUniqueSuffix: string,\n    updatePublicKey: any,\n    updatePrivateKey: PrivateKeyJwk,\n    nextUpdateCommitmentHash: string,\n    idOfServiceEndpointToAdd: string | undefined,\n    idsOfServiceEndpointToRemove: string[]\n  ) {\n    const patches = [];\n\n    if (idOfServiceEndpointToAdd !== undefined) {\n      const patch = {\n        action: 'add-service-endpoints',\n        service_endpoints: OperationGenerator.generateServiceEndpoints([\n          idOfServiceEndpointToAdd,\n        ]),\n      };\n\n      patches.push(patch);\n    }\n\n    if (idsOfServiceEndpointToRemove.length > 0) {\n      const patch = {\n        action: 'remove-service-endpoints',\n        ids: idsOfServiceEndpointToRemove,\n      };\n\n      patches.push(patch);\n    }\n\n    const updateOperationRequest = await OperationGenerator.createUpdateOperationRequest(\n      didUniqueSuffix,\n      updatePublicKey,\n      updatePrivateKey,\n      nextUpdateCommitmentHash,\n      patches\n    );\n\n    return updateOperationRequest;\n  }\n\n  /**\n   * Signs the given payload as a ed25519 compact JWS.\n   */\n  public static async signUsingEd25519(\n    payload: any,\n    privateKey: PrivateKeyJwk\n  ): Promise<string> {\n    const protectedHeader = {\n      alg: 'EdDSA',\n    };\n\n    const compactJws = await Jws.signAsCompactJws(\n      payload,\n      privateKey,\n      protectedHeader\n    );\n    return compactJws;\n  }\n\n  /**\n   * Generates a Deactivate Operation data.\n   */\n  public static async createDeactivateOperation(\n    didUniqueSuffix: string,\n    recoveryPrivateKey: PrivateKeyJwk\n  ) {\n    const operationRequest = await OperationGenerator.createDeactivateOperationRequest(\n      didUniqueSuffix,\n      recoveryPrivateKey\n    );\n    const operationBuffer = Buffer.from(JSON.stringify(operationRequest));\n    const deactivateOperation = await DeactivateOperation.parse(\n      operationBuffer\n    );\n\n    return {\n      operationRequest,\n      operationBuffer,\n      deactivateOperation,\n    };\n  }\n\n  /**\n   * Generates an array of service endpoints with specified ids\n   * @param ids the id field in endpoint.\n   */\n  public static generateServiceEndpoints(ids: string[]): any[] {\n    const service_endpoints = [];\n    for (const id of ids) {\n      service_endpoints.push({\n        id: id,\n        type: 'someType',\n        endpoint: 'https://www.url.com',\n      });\n    }\n    return service_endpoints;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredOperationModel,\n  DidState,\n  IOperationStore,\n  IVersionManager,\n  Multihash,\n  OperationType,\n  SidetreeError,\n} from '@sidetree/common';\n\n/**\n * NOTE: Resolver cannot be versioned because it needs to be aware of `VersionManager` to fetch versioned operation processors.\n */\nexport default class Resolver {\n  public constructor(\n    private versionManager: IVersionManager,\n    private operationStore: IOperationStore\n  ) {}\n\n  /**\n   * Resolve the given DID unique suffix to its latest DID state.\n   * @param didUniqueSuffix The unique suffix of the DID to resolve. e.g. if 'did:sidetree:abc123' is the DID, the unique suffix would be 'abc123'\n   * @returns Final DID state of the DID. Undefined if the unique suffix of the DID is not found or the DID state is not constructable.\n   */\n  public async resolve(didUniqueSuffix: string): Promise<DidState | undefined> {\n    console.info(`Resolving DID unique suffix '${didUniqueSuffix}'...`);\n\n    const operations = await this.operationStore.get(didUniqueSuffix);\n    const operationsByType = Resolver.categorizeOperationsByType(operations);\n\n    // Find and apply a valid create operation.\n    let didState = await this.applyCreateOperation(\n      operationsByType.createOperations\n    );\n\n    // If can't construct an initial DID state.\n    if (didState === undefined) {\n      return undefined;\n    }\n\n    // Apply recovery/deactivate operations until an operation matching the next recovery commitment cannot be found.\n    const recoverAndDeactivateOperations = operationsByType.recoverOperations.concat(\n      operationsByType.deactivateOperations\n    );\n    const recoveryCommitValueToOperationMap = await this.constructCommitValueToOperationLookupMap(\n      recoverAndDeactivateOperations\n    );\n    didState = await this.applyRecoverAndDeactivateOperations(\n      didState,\n      recoveryCommitValueToOperationMap\n    );\n\n    // If the previous applied operation is a deactivate. No need to continue further.\n    if (didState.nextRecoveryCommitmentHash === undefined) {\n      return didState;\n    }\n\n    // Apply update operations until an operation matching the next update commitment cannot be found.\n    const updateCommitValueToOperationMap = await this.constructCommitValueToOperationLookupMap(\n      operationsByType.updateOperations\n    );\n    didState = await this.applyUpdateOperations(\n      didState,\n      updateCommitValueToOperationMap\n    );\n\n    return didState;\n  }\n\n  private static categorizeOperationsByType(\n    operations: AnchoredOperationModel[]\n  ): {\n    createOperations: AnchoredOperationModel[];\n    recoverOperations: AnchoredOperationModel[];\n    updateOperations: AnchoredOperationModel[];\n    deactivateOperations: AnchoredOperationModel[];\n  } {\n    const createOperations = [];\n    const recoverOperations = [];\n    const updateOperations = [];\n    const deactivateOperations = [];\n\n    for (const operation of operations) {\n      if (operation.type === OperationType.Create) {\n        createOperations.push(operation);\n      } else if (operation.type === OperationType.Recover) {\n        recoverOperations.push(operation);\n      } else if (operation.type === OperationType.Update) {\n        updateOperations.push(operation);\n      } else {\n        // This is a deactivate operation.\n        deactivateOperations.push(operation);\n      }\n    }\n    return {\n      createOperations,\n      recoverOperations,\n      updateOperations,\n      deactivateOperations,\n    };\n  }\n\n  /**\n   * Iterate through all duplicates of creates until we can construct an initial DID state (some creates maybe incomplete. eg. without `delta`).\n   */\n  private async applyCreateOperation(\n    createOperations: AnchoredOperationModel[]\n  ): Promise<DidState | undefined> {\n    let didState;\n\n    for (const createOperation of createOperations) {\n      didState = await this.applyOperation(createOperation, undefined);\n\n      // Exit loop as soon as we can construct an initial state.\n      if (didState !== undefined) {\n        break;\n      }\n    }\n\n    return didState;\n  }\n\n  /**\n   * Apply recovery/deactivate operations until an operation matching the next recovery commitment cannot be found.\n   */\n  private async applyRecoverAndDeactivateOperations(\n    startingDidState: DidState,\n    commitValueToOperationMap: Map<string, AnchoredOperationModel[]>\n  ): Promise<DidState> {\n    let didState = startingDidState;\n\n    while (\n      commitValueToOperationMap.has(didState.nextRecoveryCommitmentHash!)\n    ) {\n      let operationsWithCorrectRevealValue: AnchoredOperationModel[] = commitValueToOperationMap.get(\n        didState.nextRecoveryCommitmentHash!\n      )!;\n\n      // Sort using blockchain time.\n      operationsWithCorrectRevealValue = operationsWithCorrectRevealValue.sort(\n        (a, b) => a.transactionNumber - b.transactionNumber\n      );\n\n      const newDidState:\n        | DidState\n        | undefined = await this.applyFirstValidOperation(\n        operationsWithCorrectRevealValue,\n        didState\n      );\n\n      // We are done if we can't find a valid recover/deactivate operation to apply.\n      if (newDidState === undefined) {\n        break;\n      }\n\n      // We reach here if we have successfully computed a new DID state.\n      didState = newDidState;\n\n      // If the previous applied operation is a deactivate. No need to continue further.\n      if (didState.nextRecoveryCommitmentHash === undefined) {\n        return didState;\n      }\n    }\n\n    return didState;\n  }\n\n  /**\n   * Apply update operations until an operation matching the next update commitment cannot be found.\n   */\n  private async applyUpdateOperations(\n    startingDidState: DidState,\n    commitValueToOperationMap: Map<string, AnchoredOperationModel[]>\n  ): Promise<DidState> {\n    let didState = startingDidState;\n\n    while (commitValueToOperationMap.has(didState.nextUpdateCommitmentHash!)) {\n      let operationsWithCorrectRevealValue: AnchoredOperationModel[] = commitValueToOperationMap.get(\n        didState.nextUpdateCommitmentHash!\n      )!;\n\n      // Sort using blockchain time.\n      operationsWithCorrectRevealValue = operationsWithCorrectRevealValue.sort(\n        (a, b) => a.transactionNumber - b.transactionNumber\n      );\n\n      const newDidState:\n        | DidState\n        | undefined = await this.applyFirstValidOperation(\n        operationsWithCorrectRevealValue,\n        didState\n      );\n\n      // We are done if we can't find a valid update operation to apply.\n      if (newDidState === undefined) {\n        break;\n      }\n\n      // We reach here if we have successfully computed a new DID state.\n      didState = newDidState;\n    }\n\n    return didState;\n  }\n\n  /**\n   * Applies the given operation to the given DID state.\n   * @param operation The operation to be applied.\n   * @param didState The DID state to apply the operation on top of.\n   * @returns The resultant `DidState`. The given DID state is return if the given operation cannot be applied.\n   */\n  private async applyOperation(\n    operation: AnchoredOperationModel,\n    didState: DidState | undefined\n  ): Promise<DidState | undefined> {\n    let appliedDidState = didState;\n\n    // NOTE: MUST NOT throw error, else a bad operation can be used to denial resolution for a DID.\n    try {\n      const operationProcessor = this.versionManager.getOperationProcessor(\n        operation.transactionTime\n      );\n\n      appliedDidState = await operationProcessor.apply(\n        operation,\n        appliedDidState\n      );\n    } catch (error) {\n      console.log(\n        `Skipped bad operation for DID ${operation.didUniqueSuffix} at time ${\n          operation.transactionTime\n        }. Error: ${SidetreeError.stringify(error)}`\n      );\n    }\n\n    return appliedDidState;\n  }\n\n  /**\n   * @returns The new DID State if a valid operation is applied, `undefined` otherwise.\n   */\n  private async applyFirstValidOperation(\n    operations: AnchoredOperationModel[],\n    originalDidState: DidState\n  ): Promise<DidState | undefined> {\n    let newDidState = originalDidState;\n\n    // Stop as soon as an operation is applied successfully.\n    for (const operation of operations) {\n      newDidState = (await this.applyOperation(operation, newDidState))!;\n\n      // If operation matching the recovery commitment is applied.\n      if (\n        newDidState.lastOperationTransactionNumber !==\n        originalDidState.lastOperationTransactionNumber\n      ) {\n        return newDidState;\n      }\n    }\n\n    // Else we reach the end of operations without being able to apply any of them.\n    return undefined;\n  }\n\n  /**\n   * Constructs a single commit value -> operation lookup map by looping through each supported hash algorithm,\n   * hashing each operations as key, then adding the result to a map.\n   */\n  private async constructCommitValueToOperationLookupMap(\n    nonCreateOperations: AnchoredOperationModel[]\n  ): Promise<Map<string, AnchoredOperationModel[]>> {\n    const commitValueToOperationMap = new Map<\n      string,\n      AnchoredOperationModel[]\n    >();\n\n    // Loop through each supported algorithm and hash each operation.\n    const allSupportedHashAlgorithms = this.versionManager\n      .allSupportedHashAlgorithms;\n    for (const hashAlgorithm of allSupportedHashAlgorithms) {\n      for (const operation of nonCreateOperations) {\n        const operationProcessor = this.versionManager.getOperationProcessor(\n          operation.transactionTime\n        );\n        const revealValueBuffer = await operationProcessor.getRevealValue(\n          operation\n        );\n\n        const hashOfRevealValue = Multihash.hashThenEncode(\n          revealValueBuffer,\n          hashAlgorithm\n        );\n\n        if (commitValueToOperationMap.has(hashOfRevealValue)) {\n          commitValueToOperationMap.get(hashOfRevealValue)!.push(operation);\n        } else {\n          commitValueToOperationMap.set(hashOfRevealValue, [operation]);\n        }\n      }\n    }\n\n    return commitValueToOperationMap;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ServiceVersionModel } from '@sidetree/common';\n/**\n * Encapsulates the functionality to get the information about the service such as\n * version info.\n */\nexport default class ServiceInfoProvider {\n  private static readonly packageJson = require('../package.json');\n  private serviceName: string;\n\n  constructor(serviceName: string) {\n    this.serviceName = serviceName;\n  }\n\n  /**\n   * Gets the service version from the package.json file.\n   */\n  public getServiceVersion(): ServiceVersionModel {\n    return {\n      name: this.serviceName,\n      version: ServiceInfoProvider.packageJson.version,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorCode, protocolParameters, SidetreeError } from '@sidetree/common';\n\n/**\n * Encapsulates the functionality to calculate and verify the blockchain transaction fees.\n */\nexport default class FeeManager {\n  /**\n   * Converts the normalized fee (returned by the blockchain) into the transaction fee to be paid when writing\n   * the current transaction.\n   *\n   * @param normalizedFee The normalized fee for the current transaction.\n   * @param numberOfOperations The number of operations to write.\n   * @param feeMarkupFactor Markup to be added to the calculated fee.\n   *\n   * @throws if the number of operations are <= 0.\n   */\n  public static computeMinimumTransactionFee(\n    normalizedFee: number,\n    numberOfOperations: number\n  ): number {\n    if (numberOfOperations <= 0) {\n      throw new SidetreeError(\n        ErrorCode.OperationCountLessThanZero,\n        `Fee cannot be calculated for the given number of operations: ${numberOfOperations}`\n      );\n    }\n\n    const feePerOperation =\n      normalizedFee *\n      protocolParameters.normalizedFeeToPerOperationFeeMultiplier;\n    const feeForAllOperations = feePerOperation * numberOfOperations;\n\n    // If our calculated-fee is lower than the normalized fee (which can happen if the number of operations is\n    // very low) then the calculated-fee will be ignored by the blockchain miners ... so make sure that we\n    // return at-least the normalized fee.\n    const transactionFee = Math.max(feeForAllOperations, normalizedFee);\n\n    return transactionFee;\n  }\n\n  /**\n   * Verifies that the fee paid for the given transaction is valid; throws if it is not valid.\n   *\n   * @param transactionFeePaid The actual fee paid for that transaction.\n   * @param numberOfOperations The number of operations written.\n   * @param normalizedFee The normalized fee for that transaction.\n   *\n   * @throws if the number of operations is <= 0; if the feepaid is invalid.\n   */\n  public static verifyTransactionFeeAndThrowOnError(\n    transactionFeePaid: number,\n    numberOfOperations: number,\n    normalizedFee: number\n  ): void {\n    // If there are no operations written then someone wrote incorrect data and we are going to throw\n    if (numberOfOperations <= 0) {\n      throw new SidetreeError(\n        ErrorCode.OperationCountLessThanZero,\n        `The number of operations: ${numberOfOperations} must be greater than 0`\n      );\n    }\n\n    if (transactionFeePaid < normalizedFee) {\n      throw new SidetreeError(\n        ErrorCode.TransactionFeePaidLessThanNormalizedFee,\n        `The actual fee paid: ${transactionFeePaid} should be greater than or equal to the normalized fee: ${normalizedFee}`\n      );\n    }\n\n    const actualFeePerOperation = transactionFeePaid / numberOfOperations;\n    const expectedFeePerOperation =\n      normalizedFee *\n      protocolParameters.normalizedFeeToPerOperationFeeMultiplier;\n\n    if (actualFeePerOperation < expectedFeePerOperation) {\n      throw new SidetreeError(\n        ErrorCode.TransactionFeePaidInvalid,\n        `The actual fee paid: ${transactionFeePaid} per number of operations: ${numberOfOperations} should be at least ${expectedFeePerOperation}.`\n      );\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorCode,\n  IVersionMetadataFetcher,\n  protocolParameters,\n  SidetreeError,\n  ValueTimeLockModel,\n} from '@sidetree/common';\n\n/**\n * Encapsulates the functionality to compute and verify the value time lock amounts.\n */\nexport default class ValueTimeLockVerifier {\n  /**\n   * Calculates the maximum number of operations allowed to be written for the given lock information. If\n   * there is no lock then it returns the number of operations which do not require a lock.\n   *\n   * @param valueTimeLock The lock object if exists\n   * @param versionMetadataFetcher The mapper from transaction time to version metadata\n   */\n  public static calculateMaxNumberOfOperationsAllowed(\n    valueTimeLock: ValueTimeLockModel | undefined,\n    versionMetadataFetcher: IVersionMetadataFetcher\n  ) {\n    if (valueTimeLock === undefined) {\n      return protocolParameters.maxNumberOfOperationsForNoValueTimeLock;\n    }\n\n    const versionMetadata = versionMetadataFetcher.getVersionMetadata(\n      valueTimeLock.lockTransactionTime\n    );\n    const normalizedFeeToPerOperationFeeMultiplier =\n      versionMetadata.normalizedFeeToPerOperationFeeMultiplier;\n    const valueTimeLockAmountMultiplier =\n      versionMetadata.valueTimeLockAmountMultiplier;\n\n    // Using the following formula:\n    //  requiredLockAmount = normalizedfee * normalizedFeeMultipier * numberOfOps * valueTimeLockMultiplier\n    //\n    // We are going to find the numberOfOps given the requiredLockAmount\n    const feePerOperation =\n      valueTimeLock.normalizedFee * normalizedFeeToPerOperationFeeMultiplier;\n    const numberOfOpsAllowed =\n      valueTimeLock.amountLocked /\n      (feePerOperation * valueTimeLockAmountMultiplier);\n\n    // Make sure that we are returning an integer; rounding down to make sure that we are not going above\n    // the max limit.\n    const numberOfOpsAllowedInt = Math.floor(numberOfOpsAllowed);\n\n    // Return at least the 'free' operations\n    return Math.max(\n      numberOfOpsAllowedInt,\n      protocolParameters.maxNumberOfOperationsForNoValueTimeLock\n    );\n  }\n\n  /**\n   * Verifies that the value lock object (amount, transaction time range) is correct for the specified number\n   * of operations.\n   *\n   * @param valueTimeLock The value time lock object used for verificiation.\n   * @param numberOfOperations The target number of operations.\n   * @param sidetreeTransactionTime The transaction time where the operations were written.\n   * @param sidetreeTransactionWriter The writer of the transaction.\n   * @param versionMetadataFetcher The mapper from transaction time to version metadata\n   */\n  public static verifyLockAmountAndThrowOnError(\n    valueTimeLock: ValueTimeLockModel | undefined,\n    numberOfOperations: number,\n    sidetreeTransactionTime: number,\n    sidetreeTransactionWriter: string,\n    versionMetadataFetcher: IVersionMetadataFetcher\n  ): void {\n    // If the number of written operations were under the free limit then there's nothing to check\n    if (\n      numberOfOperations <=\n      protocolParameters.maxNumberOfOperationsForNoValueTimeLock\n    ) {\n      return;\n    }\n\n    if (valueTimeLock) {\n      // Check the lock owner\n      if (valueTimeLock.owner !== sidetreeTransactionWriter) {\n        throw new SidetreeError(\n          ErrorCode.ValueTimeLockVerifierTransactionWriterLockOwnerMismatch,\n          `Sidetree transaction writer: ${sidetreeTransactionWriter} - Lock owner: ${valueTimeLock.owner}`\n        );\n      }\n\n      // Check the lock duration\n      if (\n        sidetreeTransactionTime < valueTimeLock.lockTransactionTime ||\n        sidetreeTransactionTime >= valueTimeLock.unlockTransactionTime\n      ) {\n        throw new SidetreeError(\n          ErrorCode.ValueTimeLockVerifierTransactionTimeOutsideLockRange,\n          // tslint:disable-next-line: max-line-length\n          `Sidetree transaction block: ${sidetreeTransactionTime}; lock start time: ${valueTimeLock.lockTransactionTime}; unlock time: ${valueTimeLock.unlockTransactionTime}`\n        );\n      }\n    }\n\n    const maxNumberOfOpsAllowed = this.calculateMaxNumberOfOperationsAllowed(\n      valueTimeLock,\n      versionMetadataFetcher\n    );\n\n    if (numberOfOperations > maxNumberOfOpsAllowed) {\n      throw new SidetreeError(\n        ErrorCode.ValueTimeLockVerifierInvalidNumberOfOperations,\n        `Max number of ops allowed: ${maxNumberOfOpsAllowed}; actual number of ops: ${numberOfOperations}`\n      );\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredDataSerializer,\n  AnchoredOperationModel,\n  ChunkFileModel,\n  ErrorCode,\n  FetchResultCode,\n  IBlockchain,\n  IOperationStore,\n  ITransactionProcessor,\n  IVersionMetadataFetcher,\n  protocolParameters,\n  SidetreeError,\n  TransactionModel,\n} from '@sidetree/common';\nimport AnchorFile from './write/AnchorFile';\nimport ArrayMethods from './util/ArrayMethods';\nimport ChunkFile from './write/ChunkFile';\nimport DownloadManager from './DownloadManager';\nimport FeeManager from './FeeManager';\nimport JsonAsync from './util/JsonAsync';\nimport MapFile from './write/MapFile';\nimport ValueTimeLockVerifier from './ValueTimeLockVerifier';\n\n/**\n * Implementation of the `ITransactionProcessor`.\n */\nexport default class TransactionProcessor implements ITransactionProcessor {\n  public constructor(\n    private downloadManager: DownloadManager,\n    private operationStore: IOperationStore,\n    private blockchain: IBlockchain,\n    private versionMetadataFetcher: IVersionMetadataFetcher\n  ) {}\n\n  public async processTransaction(\n    transaction: TransactionModel\n  ): Promise<boolean> {\n    try {\n      // Decode the anchor string.\n      const anchoredData = AnchoredDataSerializer.deserialize(\n        transaction.anchorString\n      );\n\n      // Verify enough fee paid.\n      FeeManager.verifyTransactionFeeAndThrowOnError(\n        transaction.transactionFeePaid,\n        anchoredData.numberOfOperations,\n        transaction.normalizedTransactionFee\n      );\n\n      // Download and verify anchor file.\n      const anchorFile = await this.downloadAndVerifyAnchorFile(\n        transaction,\n        anchoredData.anchorFileHash,\n        anchoredData.numberOfOperations\n      );\n\n      // Download and verify map file.\n      const mapFile = await this.downloadAndVerifyMapFile(\n        anchorFile,\n        anchoredData.numberOfOperations\n      );\n\n      // Download and verify chunk file.\n      const chunkFileModel = await this.downloadAndVerifyChunkFile(mapFile);\n\n      // Compose into operations from all the files downloaded.\n      const operations = await this.composeAnchoredOperationModels(\n        transaction,\n        anchorFile,\n        mapFile,\n        chunkFileModel\n      );\n\n      // If the code reaches here, it means that the batch of operations is valid, store the operations.\n      await this.operationStore.put(operations);\n\n      return true;\n    } catch (error) {\n      if (error instanceof SidetreeError) {\n        // If error is potentially related to CAS network connectivity issues, we need to return false to retry later.\n        if (\n          error.code === ErrorCode.CasNotReachable ||\n          error.code === ErrorCode.CasFileNotFound\n        ) {\n          return false;\n        }\n\n        console.info(`Ignoring error: ${error.message}`);\n        return true;\n      } else {\n        console.error(\n          `Unexpected error processing transaction, MUST investigate and fix: ${error.message}`\n        );\n        return false;\n      }\n    }\n  }\n\n  /**\n   * @param batchSize The size of the batch in number of operations.\n   */\n  private async downloadAndVerifyAnchorFile(\n    transaction: TransactionModel,\n    anchorFileHash: string,\n    paidOperationCount: number\n  ): Promise<AnchorFile> {\n    // Verify the number of paid operations does not exceed the maximum allowed limit.\n    if (paidOperationCount > protocolParameters.maxOperationsPerBatch) {\n      throw new SidetreeError(\n        ErrorCode.TransactionProcessorPaidOperationCountExceedsLimit,\n        `Paid batch size of ${paidOperationCount} operations exceeds the allowed limit of ${protocolParameters.maxOperationsPerBatch}.`\n      );\n    }\n\n    console.info(\n      `Downloading anchor file '${anchorFileHash}', max file size limit ${protocolParameters.maxAnchorFileSizeInBytes} bytes...`\n    );\n\n    const fileBuffer = await this.downloadFileFromCas(\n      anchorFileHash,\n      protocolParameters.maxAnchorFileSizeInBytes\n    );\n    const anchorFile = await AnchorFile.parse(fileBuffer);\n\n    const operationCountInAnchorFile = anchorFile.didUniqueSuffixes.length;\n    if (operationCountInAnchorFile > paidOperationCount) {\n      throw new SidetreeError(\n        ErrorCode.AnchorFileOperationCountExceededPaidLimit,\n        `Operation count ${operationCountInAnchorFile} in anchor file exceeded limit of : ${paidOperationCount}`\n      );\n    }\n\n    // Verify required lock if one was needed.\n    const valueTimeLock = anchorFile.model.writer_lock_id\n      ? await this.blockchain.getValueTimeLock(anchorFile.model.writer_lock_id)\n      : undefined;\n    ValueTimeLockVerifier.verifyLockAmountAndThrowOnError(\n      valueTimeLock,\n      paidOperationCount,\n      transaction.transactionTime,\n      transaction.writer,\n      this.versionMetadataFetcher\n    );\n\n    return anchorFile;\n  }\n\n  /**\n   * NOTE: In order to be forward-compatable with data-pruning feature,\n   * we must continue to process the operations declared in the anchor file even if the map/chunk file is invalid.\n   * This means that this method MUST ONLY throw errors that are retryable (e.g. network or file not found errors),\n   * It is a design choice to hide the complexity of map file downloading and construction within this method,\n   * instead of throwing errors and letting the caller handle them.\n   * @returns `MapFile` if downloaded file is valid; `undefined` otherwise.\n   * @throws SidetreeErrors that are retryable.\n   */\n  private async downloadAndVerifyMapFile(\n    anchorFile: AnchorFile,\n    paidOperationCount: number\n  ): Promise<MapFile | undefined> {\n    try {\n      const anchorFileModel = anchorFile.model;\n      console.info(\n        `Downloading map file '${anchorFileModel.map_file_uri}', max file size limit ${protocolParameters.maxMapFileSizeInBytes}...`\n      );\n\n      const fileBuffer = await this.downloadFileFromCas(\n        anchorFileModel.map_file_uri,\n        protocolParameters.maxMapFileSizeInBytes\n      );\n      const mapFile = await MapFile.parse(fileBuffer);\n\n      // Calulate the max paid update operation count.\n      const operationCountInAnchorFile = anchorFile.didUniqueSuffixes.length;\n      const maxPaidUpdateOperationCount =\n        paidOperationCount - operationCountInAnchorFile;\n\n      // If the actual update operation count is greater than the max paid update operation count, the map file is invalid.\n      const updateOperationCount = mapFile.updateOperations\n        ? mapFile.updateOperations.length\n        : 0;\n      if (updateOperationCount > maxPaidUpdateOperationCount) {\n        return undefined;\n      }\n\n      // If we find operations for the same DID between anchor and map files, the map file is invalid.\n      if (\n        !ArrayMethods.areMutuallyExclusive(\n          anchorFile.didUniqueSuffixes,\n          mapFile.didUniqueSuffixes\n        )\n      ) {\n        return undefined;\n      }\n\n      return mapFile;\n    } catch (error) {\n      if (error instanceof SidetreeError) {\n        // If error is related to CAS network issues, we will surface them so retry can happen.\n        if (\n          error.code === ErrorCode.CasNotReachable ||\n          error.code === ErrorCode.CasFileNotFound\n        ) {\n          throw error;\n        }\n\n        return undefined;\n      } else {\n        console.error(\n          `Unexpected error fetching map file ${\n            anchorFile.model.map_file_uri\n          }, MUST investigate and fix: ${SidetreeError.stringify(error)}`\n        );\n        return undefined;\n      }\n    }\n  }\n\n  /**\n   * NOTE: In order to be forward-compatable with data-pruning feature,\n   * we must continue to process the operations declared in the anchor file even if the map/chunk file is invalid.\n   * This means that this method MUST ONLY throw errors that are retryable (e.g. network or file not found errors),\n   * It is a design choice to hide the complexity of chunk file downloading and construction within this method,\n   * instead of throwing errors and letting the caller handle them.\n   * @returns `ChunkFileModel` if downloaded file is valid; `undefined` otherwise.\n   * @throws SidetreeErrors that are retryable.\n   */\n  private async downloadAndVerifyChunkFile(\n    mapFile: MapFile | undefined\n  ): Promise<ChunkFileModel | undefined> {\n    // Can't download chunk file if map file is not given.\n    if (mapFile === undefined) {\n      return undefined;\n    }\n\n    let chunkFileHash;\n    try {\n      chunkFileHash = mapFile.model.chunks[0].chunk_file_uri;\n      console.info(\n        `Downloading chunk file '${chunkFileHash}', max size limit ${protocolParameters.maxChunkFileSizeInBytes}...`\n      );\n\n      const fileBuffer = await this.downloadFileFromCas(\n        chunkFileHash,\n        protocolParameters.maxChunkFileSizeInBytes\n      );\n      const chunkFileModel = await ChunkFile.parse(fileBuffer);\n\n      return chunkFileModel;\n    } catch (error) {\n      if (error instanceof SidetreeError) {\n        // If error is related to CAS network issues, we will surface them so retry can happen.\n        if (\n          error.code === ErrorCode.CasNotReachable ||\n          error.code === ErrorCode.CasFileNotFound\n        ) {\n          throw error;\n        }\n\n        return undefined;\n      } else {\n        console.error(\n          `Unexpected error fetching chunk file ${chunkFileHash}, MUST investigate and fix: ${SidetreeError.stringify(\n            error\n          )}`\n        );\n        return undefined;\n      }\n    }\n  }\n\n  private async composeAnchoredOperationModels(\n    transaction: TransactionModel,\n    anchorFile: AnchorFile,\n    mapFile: MapFile | undefined,\n    chunkFile: ChunkFileModel | undefined\n  ): Promise<AnchoredOperationModel[]> {\n    const createOperations = anchorFile.createOperations;\n    const recoverOperations = anchorFile.recoverOperations;\n    const deactivateOperations = anchorFile.deactivateOperations;\n    const updateOperations =\n      mapFile && mapFile.updateOperations ? mapFile.updateOperations : [];\n\n    // Add the operations in the following order of types: create, recover, update, deactivate.\n    const operations = [];\n    operations.push(...createOperations);\n    operations.push(...recoverOperations);\n    operations.push(...updateOperations);\n    operations.push(...deactivateOperations);\n\n    // If chunk file is found/given, we need to add `type` and `delta` from chunk file to each operation.\n    // NOTE: there is no delta for deactivate operations.\n    const patchedOperationBuffers: Buffer[] = [];\n    if (chunkFile !== undefined) {\n      // TODO: https://github.com/decentralized-identity/sidetree/issues/442\n      // Use actual operation request object instead of buffer.\n\n      const operationCountExcludingDeactivates =\n        createOperations.length +\n        recoverOperations.length +\n        updateOperations.length;\n      for (\n        let i = 0;\n        i < operationCountExcludingDeactivates && i < chunkFile.deltas.length;\n        i++\n      ) {\n        const operation = operations[i];\n        const operationJsonString = operation.operationBuffer.toString();\n        const operationObject = await JsonAsync.parse(operationJsonString);\n        operationObject.type = operation.type;\n        operationObject.delta = chunkFile.deltas[i];\n\n        const patchedOperationBuffer = Buffer.from(\n          JSON.stringify(operationObject)\n        );\n        patchedOperationBuffers.push(patchedOperationBuffer);\n      }\n    }\n\n    for (let i = 0; i < deactivateOperations.length; i++) {\n      const operation = deactivateOperations[i];\n      const operationJsonString = operation.operationBuffer.toString();\n      const operationObject = await JsonAsync.parse(operationJsonString);\n      operationObject.type = operation.type;\n\n      const patchedOperationBuffer = Buffer.from(\n        JSON.stringify(operationObject)\n      );\n      patchedOperationBuffers.push(patchedOperationBuffer);\n    }\n\n    // Add anchored timestamp to each operation.\n    const anchoredOperationModels = [];\n    for (let i = 0; i < operations.length; i++) {\n      const operation = operations[i];\n\n      const anchoredOperationModel: AnchoredOperationModel = {\n        didUniqueSuffix: operation.didUniqueSuffix,\n        type: operation.type,\n        operationBuffer: patchedOperationBuffers[i],\n        operationIndex: i,\n        transactionNumber: transaction.transactionNumber,\n        transactionTime: transaction.transactionTime,\n      };\n\n      anchoredOperationModels.push(anchoredOperationModel);\n    }\n    return anchoredOperationModels;\n  }\n\n  private async downloadFileFromCas(\n    fileHash: string,\n    maxFileSizeInBytes: number\n  ): Promise<Buffer> {\n    console.info(\n      `Downloading file '${fileHash}', max size limit ${maxFileSizeInBytes}...`\n    );\n\n    const fileFetchResult = await this.downloadManager.download(\n      fileHash,\n      maxFileSizeInBytes\n    );\n\n    if (fileFetchResult.code === FetchResultCode.InvalidHash) {\n      throw new SidetreeError(\n        ErrorCode.CasFileHashNotValid,\n        `File hash '${fileHash}' is not a valid hash.`\n      );\n    }\n\n    if (fileFetchResult.code === FetchResultCode.MaxSizeExceeded) {\n      throw new SidetreeError(\n        ErrorCode.CasFileTooLarge,\n        `File '${fileHash}' exceeded max size limit of ${maxFileSizeInBytes} bytes.`\n      );\n    }\n\n    if (fileFetchResult.code === FetchResultCode.NotAFile) {\n      throw new SidetreeError(\n        ErrorCode.CasFileNotAFile,\n        `File hash '${fileHash}' points to a content that is not a file.`\n      );\n    }\n\n    if (fileFetchResult.code === FetchResultCode.CasNotReachable) {\n      throw new SidetreeError(\n        ErrorCode.CasNotReachable,\n        `CAS not reachable for file '${fileHash}'.`\n      );\n    }\n\n    if (fileFetchResult.code === FetchResultCode.NotFound) {\n      throw new SidetreeError(\n        ErrorCode.CasFileNotFound,\n        `File '${fileHash}' not found.`\n      );\n    }\n\n    console.info(\n      `File '${fileHash}' of size ${\n        fileFetchResult.content!.length\n      } downloaded.`\n    );\n\n    return fileFetchResult.content!;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredDataSerializer,\n  ErrorCode,\n  ITransactionSelector,\n  ITransactionStore,\n  SidetreeError,\n  TransactionModel,\n  protocolParameters,\n} from '@sidetree/common';\nimport PriorityQueue from 'priorityqueue';\n\n/**\n * rate limits how many operations is valid per block\n */\nexport default class TransactionSelector implements ITransactionSelector {\n  private maxNumberOfOperationsPerBlock: number;\n  private maxNumberOfTransactionsPerBlock: number;\n  public constructor(private transactionStore: ITransactionStore) {\n    this.maxNumberOfOperationsPerBlock =\n      protocolParameters.maxNumberOfOperationsPerTransactionTime;\n    this.maxNumberOfTransactionsPerBlock =\n      protocolParameters.maxNumberOfTransactionsPerTransactionTime;\n  }\n\n  private static getTransactionPriorityQueue() {\n    const comparator = (a: TransactionModel, b: TransactionModel) => {\n      // higher fee comes first. If fees are the same, earlier transaction comes first\n      return (\n        a.transactionFeePaid - b.transactionFeePaid ||\n        b.transactionNumber - a.transactionNumber\n      );\n    };\n\n    return new PriorityQueue({ comparator });\n  }\n\n  /**\n   * Returns an array of transactions that should be processed. Ranked by highest fee paid per transaction and up to the\n   * max number of operations per block\n   * @param transactions The transactions that should be ranked and considered to process\n   */\n  public async selectQualifiedTransactions(\n    transactions: TransactionModel[]\n  ): Promise<TransactionModel[]> {\n    if (!transactions.length) {\n      return [];\n    }\n\n    const transactionsPriorityQueue = TransactionSelector.getTransactionPriorityQueue();\n\n    const currentTransactionTime = transactions[0].transactionTime;\n\n    TransactionSelector.validateTransactions(\n      transactions,\n      currentTransactionTime\n    );\n    TransactionSelector.enqueueFirstTransactionFromEachWriter(\n      transactions,\n      currentTransactionTime,\n      transactionsPriorityQueue\n    );\n\n    const [\n      numberOfOperations,\n      numberOfTransactions,\n    ] = await this.getNumberOfOperationsAndTransactionsAlreadyInTransactionTime(\n      currentTransactionTime\n    );\n    const numberOfOperationsToQualify =\n      this.maxNumberOfOperationsPerBlock - numberOfOperations;\n    const numberOfTransactionsToQualify =\n      this.maxNumberOfTransactionsPerBlock - numberOfTransactions;\n\n    const transactionsToReturn = TransactionSelector.getHighestFeeTransactionsFromCurrentTransactionTime(\n      numberOfOperationsToQualify,\n      numberOfTransactionsToQualify,\n      transactionsPriorityQueue\n    );\n\n    return transactionsToReturn;\n  }\n\n  private static validateTransactions(\n    transactions: TransactionModel[],\n    currentTransactionTime: number\n  ) {\n    for (const transaction of transactions) {\n      // expect all transactions to be in the same transaction time\n      if (transaction.transactionTime !== currentTransactionTime) {\n        throw new SidetreeError(\n          ErrorCode.TransactionsNotInSameBlock,\n          'transaction must be in the same block to perform rate limiting, investigate and fix'\n        );\n      }\n    }\n  }\n\n  private static enqueueFirstTransactionFromEachWriter(\n    transactions: TransactionModel[],\n    currentTransactionTime: number,\n    transactionsPriorityQueue: any\n  ) {\n    const writerToTransactionNumberMap = new Map();\n    // if multiple transactions have the same writer, take the first one in the array and enqueue into transactionPriorityQueue\n    for (const transaction of transactions) {\n      // only 1 transaction is allowed per writer\n      if (writerToTransactionNumberMap.has(transaction.writer)) {\n        const acceptedTransactionNumber = writerToTransactionNumberMap.get(\n          transaction.writer\n        );\n        // tslint:disable-next-line:max-line-length\n        console.info(\n          `Multiple transactions found in transaction time ${currentTransactionTime} from writer ${transaction.writer}, considering transaction ${acceptedTransactionNumber} and ignoring ${transaction.transactionNumber}`\n        );\n      } else {\n        transactionsPriorityQueue.push(transaction);\n        writerToTransactionNumberMap.set(\n          transaction.writer,\n          transaction.transactionNumber\n        );\n      }\n    }\n  }\n\n  private async getNumberOfOperationsAndTransactionsAlreadyInTransactionTime(\n    transactionTime: number\n  ): Promise<number[]> {\n    const transactions = await this.transactionStore.getTransactionsStartingFrom(\n      transactionTime,\n      transactionTime\n    );\n    let numberOfOperations = 0;\n    if (transactions) {\n      for (const transaction of transactions) {\n        try {\n          const numOfOperationsInCurrentTransaction = AnchoredDataSerializer.deserialize(\n            transaction.anchorString\n          ).numberOfOperations;\n          numberOfOperations += numOfOperationsInCurrentTransaction;\n        } catch (e) {\n          console.debug(\n            `Error thrown in TransactionSelector: ${JSON.stringify(\n              e,\n              Object.getOwnPropertyNames(e)\n            )}`\n          );\n          console.info(\n            `Transaction with anchor string ${transaction.anchorString} not considered as selected.`\n          );\n        }\n      }\n    }\n    const numberOfTransactions = transactions ? transactions.length : 0;\n    return [numberOfOperations, numberOfTransactions];\n  }\n\n  /**\n   * Given transactions within a block, return the ones that should be processed.\n   */\n  private static getHighestFeeTransactionsFromCurrentTransactionTime(\n    numberOfOperationsToQualify: number,\n    numberOfTransactionsToQualify: number,\n    transactionsPriorityQueue: any\n  ): TransactionModel[] {\n    let numberOfOperationsSeen = 0;\n    const transactionsToReturn = [];\n\n    while (\n      transactionsToReturn.length < numberOfTransactionsToQualify &&\n      numberOfOperationsSeen < numberOfOperationsToQualify &&\n      transactionsPriorityQueue.length > 0\n    ) {\n      const currentTransaction = transactionsPriorityQueue.pop();\n      try {\n        const numOfOperationsInCurrentTransaction = AnchoredDataSerializer.deserialize(\n          currentTransaction.anchorString\n        ).numberOfOperations;\n        numberOfOperationsSeen += numOfOperationsInCurrentTransaction;\n        if (numberOfOperationsSeen <= numberOfOperationsToQualify) {\n          transactionsToReturn.push(currentTransaction);\n        }\n      } catch (e) {\n        console.debug(\n          `Error thrown in TransactionSelector: ${JSON.stringify(\n            e,\n            Object.getOwnPropertyNames(e)\n          )}`\n        );\n        console.info(\n          `Transaction with anchor string ${currentTransaction.anchorString} not selected`\n        );\n      }\n    }\n\n    // sort based on transaction number ascending\n    return transactionsToReturn;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport chalk from 'chalk';\n\n/**\n * Abstraction for colored logs.\n */\nexport default class LogColor {\n  /** Method for logging in light blue. */\n  public static lightBlue = chalk.hex('#75b0eb');\n\n  /** Method for logging in green. */\n  public static green = chalk.green;\n\n  /** Method for logging in yellow. */\n  public static yellow = chalk.yellow;\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredData,\n  AnchoredDataSerializer,\n  IBatchWriter,\n  IBlockchain,\n  ICas,\n  IOperationQueue,\n  OperationType,\n  protocolParameters,\n  IVersionMetadataFetcher,\n  ValueTimeLockModel,\n} from '@sidetree/common';\nimport CreateOperation from '../CreateOperation';\nimport DeactivateOperation from '../DeactivateOperation';\nimport LogColor from '../LogColor';\nimport Operation from '../Operation';\nimport RecoverOperation from '../RecoverOperation';\nimport UpdateOperation from '../UpdateOperation';\nimport AnchorFile from './AnchorFile';\nimport ChunkFile from './ChunkFile';\nimport MapFile from './MapFile';\nimport FeeManager from '../FeeManager';\nimport ValueTimeLockVerifier from '../ValueTimeLockVerifier';\n\n/**\n * Implementation of the `IBatchWriter`.\n */\nexport default class BatchWriter implements IBatchWriter {\n  public constructor(\n    private operationQueue: IOperationQueue,\n    private blockchain: IBlockchain,\n    private cas: ICas,\n    private versionMetadataFetcher: IVersionMetadataFetcher\n  ) {}\n\n  public async write(): Promise<void> {\n    const normalizedFee = await this.blockchain.getFee(\n      this.blockchain.approximateTime.time\n    );\n    const currentLock = await this.blockchain.getWriterValueTimeLock();\n    const numberOfOpsAllowed = this.getNumberOfOperationsAllowed(currentLock);\n\n    // Get the batch of operations to be anchored on the blockchain.\n    const queuedOperations = await this.operationQueue.peek(numberOfOpsAllowed);\n    const numberOfOperations = queuedOperations.length;\n\n    // Do nothing if there is nothing to batch together.\n    if (queuedOperations.length === 0) {\n      console.info(`No queued operations to batch.`);\n      return;\n    }\n\n    console.info(\n      LogColor.lightBlue(\n        `Batch size = ${LogColor.green(`${numberOfOperations}`)}`\n      )\n    );\n\n    const operationModels = await Promise.all(\n      queuedOperations.map(async (queuedOperation) =>\n        Operation.parse(queuedOperation.operationBuffer)\n      )\n    );\n    const createOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Create\n    ) as CreateOperation[];\n    const recoverOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Recover\n    ) as RecoverOperation[];\n    const updateOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Update\n    ) as UpdateOperation[];\n    const deactivateOperations = operationModels.filter(\n      (operation) => operation.type === OperationType.Deactivate\n    ) as DeactivateOperation[];\n\n    // Create the chunk file buffer from the operation models.\n    // NOTE: deactivate operations don't have delta.\n    const chunkFileBuffer = await ChunkFile.createBuffer(\n      createOperations,\n      recoverOperations,\n      updateOperations\n    );\n\n    // Write the chunk file to content addressable store.\n    const chunkFileHash = await this.cas.write(chunkFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote chunk file ${LogColor.green(\n          chunkFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Write the map file to content addressable store.\n    const mapFileBuffer = await MapFile.createBuffer(\n      chunkFileHash,\n      updateOperations\n    );\n    const mapFileHash = await this.cas.write(mapFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote map file ${LogColor.green(\n          mapFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Write the anchor file to content addressable store.\n    const writerLockId = currentLock ? currentLock.identifier : undefined;\n    const anchorFileBuffer = await AnchorFile.createBuffer(\n      writerLockId,\n      mapFileHash,\n      createOperations,\n      recoverOperations,\n      deactivateOperations\n    );\n    const anchorFileHash = await this.cas.write(anchorFileBuffer);\n    console.info(\n      LogColor.lightBlue(\n        `Wrote anchor file ${LogColor.green(\n          anchorFileHash\n        )} to content addressable store.`\n      )\n    );\n\n    // Anchor the data to the blockchain\n    const dataToBeAnchored: AnchoredData = {\n      anchorFileHash,\n      numberOfOperations,\n    };\n\n    const stringToWriteToBlockchain = AnchoredDataSerializer.serialize(\n      dataToBeAnchored\n    );\n    const fee = FeeManager.computeMinimumTransactionFee(\n      normalizedFee,\n      numberOfOperations\n    );\n    console.info(\n      LogColor.lightBlue(\n        `Writing data to blockchain: ${LogColor.green(\n          stringToWriteToBlockchain\n        )} with minimum fee of: ${LogColor.green(`${fee}`)}`\n      )\n    );\n\n    await this.blockchain.write(stringToWriteToBlockchain, fee);\n\n    // Remove written operations from queue after batch writing has completed successfully.\n    await this.operationQueue.dequeue(queuedOperations.length);\n  }\n\n  private getNumberOfOperationsAllowed(\n    valueTimeLock: ValueTimeLockModel | undefined\n  ): number {\n    const maxNumberOfOpsAllowedByProtocol =\n      protocolParameters.maxOperationsPerBatch;\n    const maxNumberOfOpsAllowedByLock = ValueTimeLockVerifier.calculateMaxNumberOfOperationsAllowed(\n      valueTimeLock,\n      this.versionMetadataFetcher\n    );\n\n    if (maxNumberOfOpsAllowedByLock > maxNumberOfOpsAllowedByProtocol) {\n      // tslint:disable-next-line: max-line-length\n      console.info(\n        `Maximum number of operations allowed by value time lock: ${maxNumberOfOpsAllowedByLock}; Maximum number of operations allowed by protocol: ${maxNumberOfOpsAllowedByProtocol}`\n      );\n    }\n\n    return Math.min(\n      maxNumberOfOpsAllowedByLock,\n      maxNumberOfOpsAllowedByProtocol\n    );\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-case-declarations */\nimport {\n  AnchoredOperationModel,\n  DidState,\n  ErrorCode,\n  IOperationProcessor,\n  JsonCanonicalizer,\n  Multihash,\n  OperationType,\n  SidetreeError,\n} from '@sidetree/common';\nimport CreateOperation from './CreateOperation';\nimport DeactivateOperation from './DeactivateOperation';\nimport DocumentComposer from './DocumentComposer';\nimport Operation from './Operation';\nimport RecoverOperation from './RecoverOperation';\nimport UpdateOperation from './UpdateOperation';\n\n/**\n * Implementation of IOperationProcessor.\n */\nexport default class OperationProcessor implements IOperationProcessor {\n  public async apply(\n    anchoredOperationModel: AnchoredOperationModel,\n    didState: DidState | undefined\n  ): Promise<DidState | undefined> {\n    // If DID state is undefined, then the operation given must be a create operation, otherwise the operation cannot be applied.\n    if (\n      didState === undefined &&\n      anchoredOperationModel.type !== OperationType.Create\n    ) {\n      return undefined;\n    }\n\n    const previousOperationTransactionNumber = didState\n      ? didState.lastOperationTransactionNumber\n      : undefined;\n\n    let appliedDidState: DidState | undefined;\n    if (anchoredOperationModel.type === OperationType.Create) {\n      appliedDidState = await this.applyCreateOperation(\n        anchoredOperationModel,\n        didState\n      );\n    } else if (anchoredOperationModel.type === OperationType.Update) {\n      appliedDidState = await this.applyUpdateOperation(\n        anchoredOperationModel,\n        didState!\n      );\n    } else if (anchoredOperationModel.type === OperationType.Recover) {\n      appliedDidState = await this.applyRecoverOperation(\n        anchoredOperationModel,\n        didState!\n      );\n    } else if (anchoredOperationModel.type === OperationType.Deactivate) {\n      appliedDidState = await this.applyDeactivateOperation(\n        anchoredOperationModel,\n        didState!\n      );\n    } else {\n      throw new SidetreeError(ErrorCode.OperationProcessorUnknownOperationType);\n    }\n\n    try {\n      // If the operation was not applied, log some info in case needed for debugging.\n      if (\n        appliedDidState === undefined ||\n        appliedDidState.lastOperationTransactionNumber ===\n          previousOperationTransactionNumber\n      ) {\n        const index = anchoredOperationModel.operationIndex;\n        const time = anchoredOperationModel.transactionTime;\n        const number = anchoredOperationModel.transactionNumber;\n        const didUniqueSuffix = anchoredOperationModel.didUniqueSuffix;\n        console.debug(\n          `Ignored invalid operation for DID '${didUniqueSuffix}' in transaction '${number}' at time '${time}' at operation index ${index}.`\n        );\n      }\n    } catch (error) {\n      console.log(`Failed logging ${error}.`);\n      // If logging fails, just move on.\n    }\n\n    return appliedDidState;\n  }\n\n  public async getRevealValue(\n    anchoredOperationModel: AnchoredOperationModel\n  ): Promise<Buffer> {\n    if (anchoredOperationModel.type === OperationType.Create) {\n      throw new SidetreeError(\n        ErrorCode.OperationProcessorCreateOperationDoesNotHaveRevealValue\n      );\n    }\n\n    const operation = await Operation.parse(\n      anchoredOperationModel.operationBuffer\n    );\n\n    let revealValueBuffer;\n    switch (operation.type) {\n      case OperationType.Recover:\n        const recoverOperation = operation as RecoverOperation;\n        revealValueBuffer = JsonCanonicalizer.canonicalizeAsBuffer(\n          recoverOperation.signedData.recovery_key\n        );\n        return revealValueBuffer;\n      case OperationType.Update:\n        const updateOperation = operation as UpdateOperation;\n        revealValueBuffer = JsonCanonicalizer.canonicalizeAsBuffer(\n          updateOperation.signedData.update_key\n        );\n        return revealValueBuffer;\n      default:\n        // This is a deactivate.\n        const deactivateOperation = operation as DeactivateOperation;\n        revealValueBuffer = JsonCanonicalizer.canonicalizeAsBuffer(\n          deactivateOperation.signedData.recovery_key\n        );\n        return revealValueBuffer;\n    }\n  }\n\n  /**\n   * @returns new DID state if operation is applied successfully; the given DID state otherwise.\n   */\n  private async applyCreateOperation(\n    anchoredOperationModel: AnchoredOperationModel,\n    didState: DidState | undefined\n  ): Promise<DidState | undefined> {\n    // If DID state is already created by a previous create operation, then we cannot apply a create operation again.\n    if (didState !== undefined) {\n      return didState;\n    }\n\n    const operation = await CreateOperation.parse(\n      anchoredOperationModel.operationBuffer\n    );\n\n    // Ensure actual delta hash matches expected delta hash.\n    const isMatchingDelta = Multihash.isValidHash(\n      operation.encodedDelta,\n      operation.suffixData.delta_hash\n    );\n    if (!isMatchingDelta) {\n      return didState;\n    }\n\n    // Apply the given patches against an empty object.\n    const delta = operation.delta;\n    let document = {};\n    try {\n      if (delta !== undefined) {\n        document = DocumentComposer.applyPatches(document, delta.patches);\n      }\n    } catch (error) {\n      const didUniqueSuffix = anchoredOperationModel.didUniqueSuffix;\n      const transactionNumber = anchoredOperationModel.transactionNumber;\n      console.debug(\n        `Unable to apply document patch in transaction number ${transactionNumber} for DID ${didUniqueSuffix}: ${SidetreeError.stringify(\n          error\n        )}.`\n      );\n\n      // Return the given DID state if error is encountered applying the patches.\n      return didState;\n    }\n\n    const newDidState = {\n      didUniqueSuffix: operation.didUniqueSuffix,\n      document,\n      nextRecoveryCommitmentHash: operation.suffixData.recovery_commitment,\n      nextUpdateCommitmentHash: delta ? delta.update_commitment : undefined,\n      lastOperationTransactionNumber: anchoredOperationModel.transactionNumber,\n    };\n\n    return newDidState;\n  }\n\n  /**\n   * @returns new DID state if operation is applied successfully; the given DID state otherwise.\n   */\n  private async applyUpdateOperation(\n    anchoredOperationModel: AnchoredOperationModel,\n    didState: DidState\n  ): Promise<DidState> {\n    const operation = await UpdateOperation.parse(\n      anchoredOperationModel.operationBuffer\n    );\n\n    // Verify the update key hash.\n    const isValidUpdateKey = Multihash.canonicalizeAndVerify(\n      operation.signedData.update_key,\n      didState.nextUpdateCommitmentHash!\n    );\n\n    if (!isValidUpdateKey) {\n      return didState;\n    }\n\n    // Verify the signature.\n    const signatureIsValid = await operation.signedDataJws.verifySignature(\n      operation.signedData.update_key\n    );\n\n    if (!signatureIsValid) {\n      return didState;\n    }\n\n    // Verify the delta hash against the expected delta hash.\n    const isValidDelta = Multihash.isValidHash(\n      operation.encodedDelta,\n      operation.signedData.delta_hash\n    );\n\n    if (!isValidDelta) {\n      return didState;\n    }\n\n    let resultingDocument;\n    try {\n      resultingDocument = await DocumentComposer.applyUpdateOperation(\n        operation,\n        didState.document\n      );\n    } catch (error) {\n      const didUniqueSuffix = anchoredOperationModel.didUniqueSuffix;\n      const transactionNumber = anchoredOperationModel.transactionNumber;\n      console.debug(\n        `Unable to apply document patch in transaction number ${transactionNumber} for DID ${didUniqueSuffix}: ${SidetreeError.stringify(\n          error\n        )}.`\n      );\n\n      // Return the given DID state if error is encountered applying the patches.\n      return didState;\n    }\n\n    const newDidState = {\n      nextRecoveryCommitmentHash: didState.nextRecoveryCommitmentHash,\n      // New values below.\n      document: resultingDocument,\n      nextUpdateCommitmentHash: operation.delta!.update_commitment,\n      lastOperationTransactionNumber: anchoredOperationModel.transactionNumber,\n    };\n\n    return newDidState;\n  }\n\n  /**\n   * @returns new DID state if operation is applied successfully; the given DID state otherwise.\n   */\n  private async applyRecoverOperation(\n    anchoredOperationModel: AnchoredOperationModel,\n    didState: DidState\n  ): Promise<DidState> {\n    const operation = await RecoverOperation.parse(\n      anchoredOperationModel.operationBuffer\n    );\n\n    // Verify the recovery key hash.\n    const isValidRecoveryKey = Multihash.canonicalizeAndVerify(\n      operation.signedData.recovery_key,\n      didState.nextRecoveryCommitmentHash!\n    );\n    if (!isValidRecoveryKey) {\n      return didState;\n    }\n\n    // Verify the signature.\n    const signatureIsValid = await operation.signedDataJws.verifySignature(\n      operation.signedData.recovery_key\n    );\n    if (!signatureIsValid) {\n      return didState;\n    }\n\n    // Verify the actual delta hash against the expected delta hash.\n    const isMatchingDelta = Multihash.isValidHash(\n      operation.encodedDelta,\n      operation.signedData.delta_hash\n    );\n    if (!isMatchingDelta) {\n      return didState;\n    }\n\n    // Apply the given patches against an empty object.\n    const delta = operation.delta;\n    let document = {};\n    try {\n      if (delta !== undefined) {\n        document = DocumentComposer.applyPatches(document, delta.patches);\n      }\n    } catch (error) {\n      const didUniqueSuffix = anchoredOperationModel.didUniqueSuffix;\n      const transactionNumber = anchoredOperationModel.transactionNumber;\n      console.debug(\n        `Unable to apply document patch in transaction number ${transactionNumber} for DID ${didUniqueSuffix}: ${SidetreeError.stringify(\n          error\n        )}.`\n      );\n\n      // Return the given DID state if error is encountered applying the patches.\n      return didState;\n    }\n\n    const newDidState = {\n      didUniqueSuffix: operation.didUniqueSuffix,\n      document,\n      recovery_key: operation.signedData.recovery_key,\n      nextRecoveryCommitmentHash: operation.signedData.recovery_commitment,\n      nextUpdateCommitmentHash: delta ? delta.update_commitment : undefined,\n      lastOperationTransactionNumber: anchoredOperationModel.transactionNumber,\n    };\n\n    return newDidState;\n  }\n\n  /**\n   * @returns new DID state if operation is applied successfully; the given DID state otherwise.\n   */\n  private async applyDeactivateOperation(\n    anchoredOperationModel: AnchoredOperationModel,\n    didState: DidState\n  ): Promise<DidState> {\n    const operation = await DeactivateOperation.parse(\n      anchoredOperationModel.operationBuffer\n    );\n\n    // Verify the recovery key hash.\n    const isValidRecoveryKey = Multihash.canonicalizeAndVerify(\n      operation.signedData.recovery_key,\n      didState.nextRecoveryCommitmentHash!\n    );\n    if (!isValidRecoveryKey) {\n      return didState;\n    }\n\n    // Verify the signature.\n    const signatureIsValid = await operation.signedDataJws.verifySignature(\n      operation.signedData.recovery_key\n    );\n    if (!signatureIsValid) {\n      return didState;\n    }\n\n    // The operation passes all checks.\n    const newDidState = {\n      document: didState.document,\n      // New values below.\n      recovery_key: undefined,\n      nextRecoveryCommitmentHash: undefined,\n      nextUpdateCommitmentHash: undefined,\n      lastOperationTransactionNumber: anchoredOperationModel.transactionNumber,\n    };\n    return newDidState;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorCode,\n  Multihash,\n  OperationType,\n  SidetreeError,\n} from '@sidetree/common';\nimport CreateOperation from './CreateOperation';\nimport { URL } from 'url';\n\n/**\n * Class containing reusable Sidetree DID related operations.\n */\nexport default class Did {\n  private static readonly initialStateParameterSuffix = 'initial-state';\n\n  /** `true` if DID is short form; `false` if DID is long-form. */\n  public isShortForm: boolean;\n  /** DID method name. */\n  public didMethodName: string;\n  /** DID unique suffix. */\n  public uniqueSuffix: string;\n  /** The create operation if the DID given is long-form, `undefined` otherwise. */\n  public createOperation?: CreateOperation;\n  /** The short form. */\n  public shortForm: string;\n\n  /**\n   * Parses the input string as Sidetree DID.\n   * NOTE: Must not call this constructor directly, use the factory `create` method instead.\n   * @param did Short or long-form DID string.\n   * @param didMethodName The expected DID method given in the DID string. The method throws SidetreeError if mismatch.\n   */\n  private constructor(did: string, didMethodName: string) {\n    this.didMethodName = didMethodName;\n    const didPrefix = `did:${didMethodName}:`;\n\n    if (!did.startsWith(didPrefix)) {\n      throw new SidetreeError(ErrorCode.DidIncorrectPrefix);\n    }\n\n    const indexOfQuestionMarkChar = did.indexOf('?');\n    // If there is no question mark, then DID can only be in short-form.\n    if (indexOfQuestionMarkChar < 0) {\n      this.isShortForm = true;\n    } else {\n      this.isShortForm = false;\n    }\n\n    if (this.isShortForm) {\n      this.uniqueSuffix = did.substring(didPrefix.length);\n    } else {\n      // This is long-form.\n      this.uniqueSuffix = did.substring(\n        didPrefix.length,\n        indexOfQuestionMarkChar\n      );\n    }\n\n    if (this.uniqueSuffix.length === 0) {\n      throw new SidetreeError(ErrorCode.DidNoUniqueSuffix);\n    }\n\n    this.shortForm = didPrefix + this.uniqueSuffix;\n  }\n\n  /**\n   * Parses the input string as Sidetree DID.\n   * @param didString Short or long-form DID string.\n   */\n  public static async create(\n    didString: string,\n    didMethodName: string\n  ): Promise<Did> {\n    const did = new Did(didString, didMethodName);\n\n    // If DID is long-form, ensure the unique suffix constructed from the suffix data matches the short-form DID and populate the `createOperation` property.\n    if (!did.isShortForm) {\n      const initialState = Did.getInitialStateFromDidString(\n        didString,\n        didMethodName\n      );\n      const createOperation = await Did.constructCreateOperationFromInitialState(\n        initialState\n      );\n\n      // NOTE: we cannot use the unique suffix directly from `createOperation.didUniqueSuffix` for comparison,\n      // becasue a given long-form DID may have been created long ago,\n      // thus this version of `CreateOperation.parse()` maybe using a different hashing algorithm than that of the unique DID suffix (short-form).\n      // So we compute the suffix data hash again using the hashing algorithm used by the given unique DID suffix (short-form).\n      const suffixDataHashMatchesUniqueSuffix = Multihash.isValidHash(\n        createOperation.encodedSuffixData,\n        did.uniqueSuffix\n      );\n\n      // If the computed suffix data hash is not the same as the unique suffix given in the DID string, the DID is not valid.\n      if (!suffixDataHashMatchesUniqueSuffix) {\n        throw new SidetreeError(\n          ErrorCode.DidUniqueSuffixFromInitialStateMismatch\n        );\n      }\n\n      did.createOperation = createOperation;\n    }\n\n    return did;\n  }\n\n  private static getInitialStateFromDidString(\n    didString: string,\n    methodNameWithNetworkId: string\n  ): string {\n    let didStringUrl = undefined;\n    try {\n      didStringUrl = new URL(didString);\n    } catch {\n      throw new SidetreeError(ErrorCode.DidInvalidDidString);\n    }\n\n    // TODO: #470 - Support/disambiguate \"network ID\" in method name.\n\n    // Stripping away the potential network ID portion. e.g. 'sidetree:test' -> 'sidetree'\n    const methodName = methodNameWithNetworkId.split(':')[0];\n\n    let queryParamCounter = 0;\n    let initialStateValue;\n\n    // Verify that `-<method-name>-initial-state` is the one and only parameter.\n    for (const [key, value] of didStringUrl.searchParams) {\n      queryParamCounter += 1;\n      if (queryParamCounter > 1) {\n        throw new SidetreeError(ErrorCode.DidLongFormOnlyOneQueryParamAllowed);\n      }\n\n      // expect key to be -<method-name>-initial-state\n      const expectedKey = `-${methodName}-${Did.initialStateParameterSuffix}`;\n      if (key !== expectedKey) {\n        throw new SidetreeError(\n          ErrorCode.DidLongFormOnlyInitialStateParameterIsAllowed\n        );\n      }\n\n      initialStateValue = value;\n    }\n\n    if (initialStateValue === undefined) {\n      throw new SidetreeError(ErrorCode.DidLongFormNoInitialStateFound);\n    }\n\n    return initialStateValue;\n  }\n\n  private static async constructCreateOperationFromInitialState(\n    initialState: string\n  ): Promise<CreateOperation> {\n    // Initial state should be in the format: <suffix-data>.<delta>\n    const firstIndexOfDot = initialState.indexOf('.');\n    if (firstIndexOfDot === -1) {\n      throw new SidetreeError(ErrorCode.DidInitialStateValueContainsNoDot);\n    }\n\n    const lastIndexOfDot = initialState.lastIndexOf('.');\n    if (lastIndexOfDot !== firstIndexOfDot) {\n      throw new SidetreeError(\n        ErrorCode.DidInitialStateValueContainsMoreThanOneDot\n      );\n    }\n\n    if (firstIndexOfDot === initialState.length - 1 || firstIndexOfDot === 0) {\n      throw new SidetreeError(\n        ErrorCode.DidInitialStateValueDoesNotContainTwoParts\n      );\n    }\n\n    const initialStateParts = initialState.split('.');\n    const suffixData = initialStateParts[0];\n    const delta = initialStateParts[1];\n    const createOperationRequest = {\n      type: OperationType.Create,\n      suffix_data: suffixData,\n      delta,\n    };\n    const createOperationBuffer = Buffer.from(\n      JSON.stringify(createOperationRequest)\n    );\n    const createOperation = await CreateOperation.parseObject(\n      createOperationRequest,\n      createOperationBuffer,\n      false\n    );\n\n    return createOperation;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DidState,\n  ErrorCode,\n  IOperationQueue,\n  IRequestHandler,\n  OperationModel,\n  OperationType,\n  protocolParameters,\n  ResponseModel,\n  ResponseStatus,\n  SidetreeError,\n} from '@sidetree/common';\nimport Did from './Did';\nimport DocumentComposer from './DocumentComposer';\nimport JsonAsync from './util/JsonAsync';\nimport Operation from './Operation';\nimport OperationProcessor from './OperationProcessor';\nimport Resolver from './Resolver';\n\n/**\n * Sidetree operation request handler.\n */\nexport default class RequestHandler implements IRequestHandler {\n  private operationProcessor: OperationProcessor;\n\n  public constructor(\n    private resolver: Resolver,\n    private operationQueue: IOperationQueue,\n    private didMethodName: string\n  ) {\n    this.operationProcessor = new OperationProcessor();\n  }\n\n  /**\n   * Handles an operation request.\n   */\n  public async handleOperationRequest(request: Buffer): Promise<ResponseModel> {\n    console.info(\n      `Handling operation request of size ${request.length} bytes...`\n    );\n\n    // Perform common validation for any write request and parse it into an `OperationModel`.\n    let operationModel: OperationModel;\n    try {\n      const operationRequest = await JsonAsync.parse(request);\n\n      // Check `delta` property data size if they exist in the operation.\n      if (\n        operationRequest.type === OperationType.Create ||\n        operationRequest.type === OperationType.Recover ||\n        operationRequest.type === OperationType.Update\n      ) {\n        const deltaBuffer = Buffer.from(operationRequest.delta);\n        if (deltaBuffer.length > protocolParameters.maxDeltaSizeInBytes) {\n          const errorMessage = `operationDdata byte size of ${deltaBuffer.length} exceeded limit of ${protocolParameters.maxDeltaSizeInBytes}`;\n          console.info(errorMessage);\n          throw new SidetreeError(\n            ErrorCode.RequestHandlerDeltaExceedsMaximumSize,\n            errorMessage\n          );\n        }\n      }\n\n      operationModel = await Operation.parse(request);\n\n      // Reject operation if there is already an operation for the same DID waiting to be batched and anchored.\n      if (await this.operationQueue.contains(operationModel.didUniqueSuffix)) {\n        const errorMessage = `An operation request already exists in queue for DID '${operationModel.didUniqueSuffix}', only one is allowed at a time.`;\n        throw new SidetreeError(\n          ErrorCode.QueueingMultipleOperationsPerDidNotAllowed,\n          errorMessage\n        );\n      }\n    } catch (error) {\n      // Give meaningful/specific error code and message when possible.\n      if (error instanceof SidetreeError) {\n        console.info(`Bad request: ${error.code}`);\n        console.info(`Error message: ${error.message}`);\n        return {\n          status: ResponseStatus.BadRequest,\n          body: { code: error.code, message: error.message },\n        };\n      }\n\n      // Else we give a generic bad request response.\n      console.info(`Bad request: ${error}`);\n      return {\n        status: ResponseStatus.BadRequest,\n      };\n    }\n\n    try {\n      console.info(\n        `Operation type: '${operationModel.type}', DID unique suffix: '${operationModel.didUniqueSuffix}'`\n      );\n\n      // Passed common operation validation, hand off to specific operation handler.\n      let response: ResponseModel;\n      switch (operationModel.type) {\n        case OperationType.Create:\n          response = await this.handleCreateRequest(operationModel);\n          break;\n        // these cases do nothing because we do not know the latest document state unless we resolve.\n        case OperationType.Update:\n        case OperationType.Recover:\n        case OperationType.Deactivate:\n          response = {\n            status: ResponseStatus.Succeeded,\n          };\n          break;\n        default:\n          // Should be an impossible condition, but we defensively check and handle.\n          response = {\n            status: ResponseStatus.BadRequest,\n            body: {\n              code: ErrorCode.RequestHandlerUnknownOperationType,\n              message: `Unsupported operation type '${operationModel.type}'.`,\n            },\n          };\n      }\n\n      // if the operation was processed successfully, queue the original request buffer for batching.\n      if (response.status === ResponseStatus.Succeeded) {\n        await this.operationQueue.enqueue(\n          operationModel.didUniqueSuffix,\n          operationModel.operationBuffer\n        );\n      }\n\n      return response;\n    } catch (error) {\n      // Give meaningful/specific error code and message when possible.\n      if (error instanceof SidetreeError) {\n        console.info(`Sidetree error: ${error.code} ${error.message}`);\n        return {\n          status: ResponseStatus.BadRequest,\n          body: { code: error.code, message: error.message },\n        };\n      }\n\n      console.info(`Unexpected error: ${error}`);\n      return {\n        status: ResponseStatus.ServerError,\n      };\n    }\n  }\n\n  private async handleCreateRequest(\n    operationModel: OperationModel\n  ): Promise<ResponseModel> {\n    const didState = await this.applyCreateOperation(operationModel);\n\n    // Should be an impossible condition, but we defensively check and handle.\n    if (didState === undefined) {\n      return {\n        status: ResponseStatus.BadRequest,\n        body: 'Invalid create operation.',\n      };\n    }\n\n    const did = `did:${this.didMethodName}:${operationModel.didUniqueSuffix}`;\n    const document = DocumentComposer.transformToExternalDocument(\n      didState,\n      did\n    );\n\n    return {\n      status: ResponseStatus.Succeeded,\n      body: document,\n    };\n  }\n\n  /**\n   * Handles resolve operation.\n   * @param shortOrLongFormDid Can either be:\n   *   1. A short-form DID. e.g. 'did:<methodName>:abc' or\n   *   2. A long-form DID. e.g. 'did:<methodName>:<unique-portion>?-<methodName>-initial-state=<encoded-original-did-document>'.\n   */\n  public async handleResolveRequest(\n    shortOrLongFormDid: string\n  ): Promise<ResponseModel> {\n    try {\n      console.info(`Handling resolution request for: ${shortOrLongFormDid}...`);\n\n      const did = await Did.create(shortOrLongFormDid, this.didMethodName);\n\n      let didState: DidState | undefined;\n      if (did.isShortForm) {\n        didState = await this.resolver.resolve(did.uniqueSuffix);\n      } else {\n        didState = await this.resolveLongFormDid(did);\n      }\n\n      if (didState === undefined) {\n        return {\n          status: ResponseStatus.NotFound,\n        };\n      }\n\n      const document = DocumentComposer.transformToExternalDocument(\n        didState,\n        shortOrLongFormDid\n      );\n\n      return {\n        status: ResponseStatus.Succeeded,\n        body: document,\n      };\n    } catch (error) {\n      // Give meaningful/specific error code and message when possible.\n      if (error instanceof SidetreeError) {\n        return {\n          status: ResponseStatus.BadRequest,\n          body: { code: error.code, message: error.message },\n        };\n      }\n\n      console.info(`Unexpected error: ${error}`);\n      return {\n        status: ResponseStatus.ServerError,\n      };\n    }\n  }\n\n  /**\n   * Resolves the given long-form DID by resolving using operations found over the network first;\n   * if no operations found, the given create operation will is used to construct the DID state.\n   */\n  private async resolveLongFormDid(did: Did): Promise<DidState | undefined> {\n    // Attempt to resolve the DID by using operations found from the network first.\n    let didState = await this.resolver.resolve(did.uniqueSuffix);\n\n    // If DID state found then return it.\n    if (didState !== undefined) {\n      return didState;\n    }\n\n    // The code reaches here if this DID is not registered on the ledger.\n\n    didState = await this.applyCreateOperation(did.createOperation!);\n\n    return didState;\n  }\n\n  private async applyCreateOperation(\n    createOperation: OperationModel\n  ): Promise<DidState | undefined> {\n    const operationWithMockedAnchorTime = {\n      didUniqueSuffix: createOperation.didUniqueSuffix,\n      type: OperationType.Create,\n      transactionTime: 0,\n      transactionNumber: 0,\n      operationIndex: 0,\n      operationBuffer: createOperation.operationBuffer,\n    }; // NOTE: The transaction timing does not matter here, we are just computing a \"theoretical\" document if it were anchored on blockchain.\n\n    const newDidState = await this.operationProcessor.apply(\n      operationWithMockedAnchorTime,\n      undefined\n    );\n    return newDidState;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AbstractVersionMetadata, protocolParameters } from '@sidetree/common';\n\n/**\n * Implementation of the abstract VersionMetadata.\n */\nexport default class VersionMetadata extends AbstractVersionMetadata {\n  public hashAlgorithmInMultihashCode: number;\n  public normalizedFeeToPerOperationFeeMultiplier: number;\n  public valueTimeLockAmountMultiplier: number;\n  public constructor() {\n    super();\n    this.hashAlgorithmInMultihashCode =\n      protocolParameters.hashAlgorithmInMultihashCode;\n    this.normalizedFeeToPerOperationFeeMultiplier =\n      protocolParameters.normalizedFeeToPerOperationFeeMultiplier;\n    this.valueTimeLockAmountMultiplier =\n      protocolParameters.valueTimeLockAmountMultiplier;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbstractVersionMetadata,\n  Config,\n  CoreErrorCode,\n  IBatchWriter,\n  IBlockchain,\n  ICas,\n  IOperationProcessor,\n  IOperationStore,\n  IRequestHandler,\n  ITransactionProcessor,\n  ITransactionSelector,\n  ITransactionStore,\n  IVersionManager,\n  IVersionMetadataFetcher,\n  ProtocolVersionModel,\n  SidetreeError,\n  IOperationQueue,\n} from '@sidetree/common';\nimport DownloadManager from './DownloadManager';\nimport Resolver from './Resolver';\nimport { MongoDbOperationQueue } from '@sidetree/db';\nimport TransactionProcessor from './TransactionProcessor';\nimport TransactionSelector from './TransactionSelector';\nimport BatchWriter from './write/BatchWriter';\nimport OperationProcessor from './OperationProcessor';\nimport RequestHandler from './RequestHandler';\nimport VersionMetadata from './VersionMetadata';\n\n/**\n * The class that handles the loading of different versions of protocol codebase.\n */\nexport default class VersionManager\n  implements IVersionManager, IVersionMetadataFetcher {\n  public allSupportedHashAlgorithms: number[] = [];\n\n  // Reverse sorted protocol versions. ie. latest version first.\n  private protocolVersionsReverseSorted: ProtocolVersionModel[];\n\n  private batchWriters: Map<string, IBatchWriter>;\n  private operationProcessors: Map<string, IOperationProcessor>;\n  private operationQueues: Map<string, IOperationQueue>;\n  private requestHandlers: Map<string, IRequestHandler>;\n  private transactionProcessors: Map<string, ITransactionProcessor>;\n  private transactionSelectors: Map<string, ITransactionSelector>;\n  private versionMetadatas: Map<string, AbstractVersionMetadata>;\n\n  public constructor(\n    private config: Config,\n    protocolVersions: ProtocolVersionModel[]\n  ) {\n    // Reverse sort protocol versions.\n    this.protocolVersionsReverseSorted = protocolVersions.sort(\n      (a, b) => b.startingBlockchainTime - a.startingBlockchainTime\n    );\n\n    this.batchWriters = new Map();\n    this.operationProcessors = new Map();\n    this.operationQueues = new Map();\n    this.requestHandlers = new Map();\n    this.transactionProcessors = new Map();\n    this.transactionSelectors = new Map();\n    this.versionMetadatas = new Map();\n  }\n\n  /**\n   * Loads all the versions of the protocol codebase.\n   */\n  public async initialize(\n    blockchain: IBlockchain,\n    cas: ICas,\n    downloadManager: DownloadManager,\n    operationStore: IOperationStore,\n    resolver: Resolver,\n    transactionStore: ITransactionStore\n  ): Promise<void> {\n    // Instantiate rest of the protocol components.\n    // NOTE: In principal each version of the interface implemtnations can have different constructors,\n    // but we currently keep the constructor signature the same as much as possible for simple instance construction,\n    // but it is not inherently \"bad\" if we have to have conditional constructions for each if we have to.\n    for (const protocolVersion of this.protocolVersionsReverseSorted) {\n      const version = protocolVersion.version;\n\n      /* tslint:disable-next-line */\n      const MongoDbOperationQueue = await this.loadDefaultExportsForVersion(\n        version,\n        'MongoDbOperationQueue'\n      );\n      const operationQueue = new MongoDbOperationQueue(\n        this.config.mongoDbConnectionString,\n        this.config.databaseName\n      );\n      await operationQueue.initialize();\n      this.operationQueues.set(version, operationQueue);\n\n      /* tslint:disable-next-line */\n      const TransactionProcessor = await this.loadDefaultExportsForVersion(\n        version,\n        'TransactionProcessor'\n      );\n      const transactionProcessor = new TransactionProcessor(\n        downloadManager,\n        operationStore,\n        blockchain,\n        this\n      );\n      this.transactionProcessors.set(version, transactionProcessor);\n\n      /* tslint:disable-next-line */\n      const TransactionSelector = await this.loadDefaultExportsForVersion(\n        version,\n        'TransactionSelector'\n      );\n      const transactionSelector = new TransactionSelector(transactionStore);\n      this.transactionSelectors.set(version, transactionSelector);\n\n      /* tslint:disable-next-line */\n      const BatchWriter = await this.loadDefaultExportsForVersion(\n        version,\n        'BatchWriter'\n      );\n      const batchWriter = new BatchWriter(\n        operationQueue,\n        blockchain,\n        cas,\n        this\n      );\n      this.batchWriters.set(version, batchWriter);\n\n      /* tslint:disable-next-line */\n      const OperationProcessor = await this.loadDefaultExportsForVersion(\n        version,\n        'OperationProcessor'\n      );\n      const operationProcessor = new OperationProcessor();\n      this.operationProcessors.set(version, operationProcessor);\n\n      /* tslint:disable-next-line */\n      const RequestHandler = await this.loadDefaultExportsForVersion(\n        version,\n        'RequestHandler'\n      );\n      const requestHandler = new RequestHandler(\n        resolver,\n        operationQueue,\n        this.config.didMethodName\n      );\n      this.requestHandlers.set(version, requestHandler);\n\n      /* tslint:disable-next-line */\n      const VersionMetadata = await this.loadDefaultExportsForVersion(\n        version,\n        'VersionMetadata'\n      );\n      const versionMetadata = new VersionMetadata();\n      if (!(versionMetadata instanceof AbstractVersionMetadata)) {\n        throw new SidetreeError(\n          CoreErrorCode.VersionManagerVersionMetadataIncorrectType,\n          `make sure VersionMetaData is properly implemented for version ${version}`\n        );\n      }\n      this.versionMetadatas.set(version, versionMetadata);\n    }\n\n    // Get and cache supported hash algorithms.\n    const hashAlgorithmsWithDuplicates = Array.from(\n      this.versionMetadatas.values(),\n      (value) => value.hashAlgorithmInMultihashCode\n    );\n    this.allSupportedHashAlgorithms = Array.from(\n      new Set(hashAlgorithmsWithDuplicates)\n    ); // This line removes duplicates.\n  }\n\n  /**\n   * Gets the corresponding version of the `IBatchWriter` based on the given blockchain time.\n   */\n  public getBatchWriter(blockchainTime: number): IBatchWriter {\n    const version = this.getVersionString(blockchainTime);\n    const batchWriter = this.batchWriters.get(version);\n\n    if (batchWriter === undefined) {\n      throw new SidetreeError(\n        CoreErrorCode.VersionManagerBatchWriterNotFound,\n        `Batch writer for blockchain time ${blockchainTime} not found.`\n      );\n    }\n\n    return batchWriter;\n  }\n\n  /**\n   * Gets the corresponding version of the `IOperationProcessor` based on the given blockchain time.\n   */\n  public getOperationProcessor(blockchainTime: number): IOperationProcessor {\n    const version = this.getVersionString(blockchainTime);\n    const operationProcessor = this.operationProcessors.get(version);\n\n    if (operationProcessor === undefined) {\n      throw new SidetreeError(\n        CoreErrorCode.VersionManagerOperationProcessorNotFound,\n        `Operation processor for blockchain time ${blockchainTime} not found.`\n      );\n    }\n\n    return operationProcessor;\n  }\n\n  /**\n   * Gets the corresponding version of the `IRequestHandler` based on the given blockchain time.\n   */\n  public getRequestHandler(blockchainTime: number): IRequestHandler {\n    const version = this.getVersionString(blockchainTime);\n    const requestHandler = this.requestHandlers.get(version);\n\n    if (requestHandler === undefined) {\n      throw new SidetreeError(\n        CoreErrorCode.VersionManagerRequestHandlerNotFound,\n        `Request handler for blockchain time ${blockchainTime} not found.`\n      );\n    }\n\n    return requestHandler;\n  }\n\n  /**\n   * Gets the corresponding version of the `TransactionProcessor` based on the given blockchain time.\n   */\n  public getTransactionProcessor(\n    blockchainTime: number\n  ): ITransactionProcessor {\n    const version = this.getVersionString(blockchainTime);\n    const transactionProcessor = this.transactionProcessors.get(version);\n\n    if (transactionProcessor === undefined) {\n      throw new SidetreeError(\n        CoreErrorCode.VersionManagerTransactionProcessorNotFound,\n        `Transaction processor for blockchain time ${blockchainTime} not found.`\n      );\n    }\n\n    return transactionProcessor;\n  }\n\n  /**\n   * Gets the corresponding version of the `TransactionSelector` based on the given blockchain time.\n   */\n  public getTransactionSelector(blockchainTime: number): ITransactionSelector {\n    const version = this.getVersionString(blockchainTime);\n    const transactionSelector = this.transactionSelectors.get(version);\n\n    if (transactionSelector === undefined) {\n      throw new SidetreeError(\n        CoreErrorCode.VersionManagerTransactionSelectorNotFound,\n        `Transaction selector for blockchain time ${blockchainTime} not found.`\n      );\n    }\n\n    return transactionSelector;\n  }\n\n  public getVersionMetadata(blockchainTime: number): AbstractVersionMetadata {\n    const versionString = this.getVersionString(blockchainTime);\n    const versionMetadata = this.versionMetadatas.get(versionString);\n    // this is always be defined because if blockchain time is found, version will be defined\n    return versionMetadata!;\n  }\n\n  public getOperationQueue(blockchainTime: number): IOperationQueue {\n    const versionString = this.getVersionString(blockchainTime);\n    const operationQueue = this.operationQueues.get(versionString);\n    // this is always be defined because if blockchain time is found, version will be defined\n    return operationQueue!;\n  }\n\n  /**\n   * Gets the corresponding protocol version string given the blockchain time.\n   */\n  private getVersionString(blockchainTime: number): string {\n    // Iterate through each version to find the right version.\n    for (const protocolVersion of this.protocolVersionsReverseSorted) {\n      if (blockchainTime >= protocolVersion.startingBlockchainTime) {\n        return protocolVersion.version;\n      }\n    }\n\n    throw new SidetreeError(\n      CoreErrorCode.VersionManagerVersionStringNotFound,\n      `Unable to find version string for blockchain time ${blockchainTime}.`\n    );\n  }\n\n  private async loadDefaultExportsForVersion(\n    version: string,\n    className: string\n  ): Promise<any> {\n    if (version === 'latest') {\n      switch (className) {\n        case 'MongoDbOperationQueue':\n          return MongoDbOperationQueue;\n        case 'TransactionProcessor':\n          return TransactionProcessor;\n        case 'TransactionSelector':\n          return TransactionSelector;\n        case 'BatchWriter':\n          return BatchWriter;\n        case 'OperationProcessor':\n          return OperationProcessor;\n        case 'RequestHandler':\n          return RequestHandler;\n        case 'VersionMetadata':\n          return VersionMetadata;\n        default:\n          return;\n      }\n    }\n    return (await import(`./versions/${version}/${className}`)).default;\n  }\n}\n"],"names":["undefined","ArrayMethods","hasDuplicates","array","uniqueValues","Set","i","length","value","has","add","areMutuallyExclusive","array1","array2","valuesInArray1","pako","require","Compressor","compress","inputAsBuffer","result","deflate","Buffer","from","decompress","inflate","DocumentComposer","transformToExternalDocument","didState","did","nextRecoveryCommitmentHash","status","document","shortFormDid","split","authentication","assertionMethod","capabilityInvocation","capabilityDelegation","keyAgreement","public_keys","Array","isArray","publicKey","id","didDocumentPublicKey","controller","type","publicKeyJwk","jwk","purposeSet","purpose","PublicKeyPurpose","General","push","Auth","AssertionMethod","CapabilityInvocation","CapabilityDelegation","KeyAgreement","service_endpoints","serviceEndpoint","didDocumentServiceEndpoint","endpoint","didDocument","service","didResolutionResult","didDocumentMetadata","recoveryCommitment","updateCommitment","nextUpdateCommitmentHash","JSON","parse","stringify","applyUpdateOperation","operation","resultantDocument","applyPatches","delta","patches","validateDocument","SidetreeError","ErrorCode","DocumentComposerDocumentMissing","allowedProperties","property","DocumentComposerUnknownPropertyInDocument","Object","prototype","hasOwnProperty","call","validatePublicKeys","validateServiceEndpoints","validateDocumentPatches","DocumentComposerUpdateOperationDocumentPatchesNotArray","patch","validatePatch","action","validateAddPublicKeysPatch","validateRemovePublicKeysPatch","validateAddServiceEndpointsPatch","validateRemoveServiceEndpointsPatch","validateIetfJsonPatch","DocumentComposerPatchMissingOrUnknownAction","patchProperties","keys","DocumentComposerPatchMissingOrUnknownProperty","error","jsonpatch","validate","console","warn","name","DocumentComposerPublicKeysNotArray","publicKeyIdSet","publicKeyProperties","DocumentComposerPublicKeyMissingOrUnknownProperty","DocumentComposerPublicKeyJwkMissingOrIncorrectType","DocumentComposerPublicKeyTypeMissingOrIncorrectType","validateId","DocumentComposerPublicKeyIdDuplicated","DocumentComposerPublicKeyPurposeMissingOrUnknown","values","DocumentComposerPublicKeyPurposeExceedsMaxLength","validPurposes","DocumentComposerPublicKeyInvalidPurpose","DocumentComposerPatchPublicKeyIdsNotArray","publicKeyId","DocumentComposerPatchPublicKeyIdNotString","ids","DocumentComposerPatchServiceEndpointIdsNotArray","DocumentComposerPatchServiceEndpointsNotArray","serviceEndpointProperties","DocumentComposerServiceEndpointMissingOrUnknownProperty","DocumentComposerPatchServiceEndpointTypeNotString","DocumentComposerPatchServiceEndpointTypeTooLong","DocumentComposerPatchServiceEndpointServiceEndpointNotString","DocumentComposerPatchServiceEndpointServiceEndpointTooLong","URL","DocumentComposerPatchServiceEndpointServiceEndpointNotValidUrl","DocumentComposerIdNotString","DocumentComposerIdTooLong","Encoder","isBase64UrlString","DocumentComposerIdNotUsingBase64UrlCharacterSet","applyPatchToDidDocument","addPublicKeys","removePublicKeys","addServiceEndpoints","removeServiceEndpoints","applyIetfJsonPatch","res","applyPatch","newDocument","publicKeyMap","Map","map","set","entries","pkm","existingKey","get","idToIndexMapper","idx","idsToRemove","filter","yieldableJson","JsonAsync","jsonData","jsonParsePromise","Promise","resolve","reject","parseAsync","err","data","OperationUtils","parseDelta","deltaEncodedString","DeltaMissingOrNotString","deltaJsonString","decodeAsString","properties","DeltaMissingOrUnknownProperty","OperationDocumentPatchesMissing","nextUpdateCommitment","decodeAsBuffer","update_commitment","Multihash","verifyHashComputedUsingLatestSupportedAlgorithm","CreateOperation","operationBuffer","didUniqueSuffix","encodedSuffixData","suffixData","encodedDelta","OperationType","Create","computeDidUniqueSuffix","suffixDataBuffer","multihash","hash","encodedMultihash","encode","parseOperationFromAnchorFile","input","parseObject","operationJsonString","toString","operationObject","createOperation","anchorFileMode","expectedPropertyCount","CreateOperationMissingOrUnknownProperty","suffix_data","parseSuffixData","CreateOperationTypeIncorrect","suffixDataEncodedString","CreateOperationSuffixDataMissingOrNotString","suffixDataJsonString","CreateOperationSuffixDataMissingOrUnknownProperty","delta_hash","nextRecoveryCommitment","recovery_commitment","Jwk","generateEd25519KeyPair","JWK","generate","keyPair","privateKey","toJWK","getBufferAtIndex","mnemonic","index","bip39","seed","root","hdkey","fromMasterSeed","hdPath","addrNode","derive","generateEd25519KeyPairFromMnemonic","privateKeyBuffer","Ed25519KeyPair","ed25519KeyPair","toJwk","privateKeyJwk","generateSecp256k1KeyPair","generateJwkKeyPairFromMnemonic","keyType","generateSecp256k1KeyPairFromMnemonic","Error","keytoFrom","crv","validatePublicJwk","JwkUndefined","JwkHasUnknownProperty","kty","JwkMissingOrInvalidKty","x","JwkMissingOrInvalidTypeX","y","JwkMissingOrInvalidTypeY","JwkMissingOrInvalidCrv","getCurve25519PublicKey","keyCopy","assign","d","Jws","compactJws","JwsCompactJwsNotString","parts","JwsCompactJwsInvalid","protectedHeader","payload","signature","decodedProtectedHeadJsonString","decodeBase64UrlAsString","decodedProtectedHeader","expectedHeaderPropertyCount","headerProperties","JwsProtectedHeaderMissingOrUnknownProperty","alg","JwsProtectedHeaderMissingOrIncorrectAlg","JwsSignatureNotBase64UrlString","JwsPayloadNotBase64UrlString","toCompactJws","createCompactJws","verifySignature","encodedProtectedHeader","encodedPayload","jwsSigningInput","verifyCompactJws","signatureValid","EdDSA","verify","ES256K","log","createFromError","JwsFailedSignatureValidation","signAsCompactJws","header","sign","parseCompactJws","DeactivateOperation","signedDataJws","signedData","Deactivate","deactivateOperation","DeactivateOperationMissingOrUnknownProperty","did_suffix","DeactivateOperationMissingOrInvalidDidUniqueSuffix","signed_data","parseSignedDataPayload","DeactivateOperationTypeIncorrect","expectedDidUniqueSuffix","signedDataJsonString","DeactivateOperationSignedDataMissingOrUnknownProperty","DeactivateOperationSignedDidUniqueSuffixMismatch","recovery_key","didSuffix","RecoverOperation","Recover","recoverOperation","RecoverOperationMissingOrUnknownProperty","RecoverOperationMissingOrInvalidDidUniqueSuffix","RecoverOperationTypeIncorrect","signedDataEncodedString","RecoverOperationSignedDataMissingOrUnknownProperty","AnchorFile","model","didUniqueSuffixes","createOperations","recoverOperations","deactivateOperations","anchorFileBuffer","anchorFileDecompressedBuffer","AnchorFileDecompressionFailure","anchorFileModel","AnchorFileNotJson","AnchorFileHasUnknownProperty","AnchorFileMapFileHashMissing","AnchorFileMissingOperationsProperty","writer_lock_id","AnchorFileWriterLockIPropertyNotString","mapFileUri","map_file_uri","AnchorFileMapFileHashNotString","allowedOperationsProperties","operations","AnchorFileUnexpectedPropertyInOperations","create","AnchorFileCreatePropertyNotArray","recover","AnchorFileRecoverPropertyNotArray","deactivate","AnchorFileDeactivatePropertyNotArray","AnchorFileMultipleOperationsForTheSameDid","anchorFile","createModel","writerLockId","mapFileHash","createOperationArray","recoverOperationArray","deactivateOperationArray","createBuffer","anchorFileJson","BatchScheduler","versionManager","blockchain","batchingIntervalInSeconds","startPeriodicBatchWriting","continuePeriodicBatchWriting","setImmediate","writeOperationBatch","stopPeriodicBatchWriting","info","endTimer","timeSpan","currentTime","approximateTime","time","batchWriter","getBatchWriter","write","rounded","setTimeout","ChunkFile","chunkFileBuffer","decompressedChunkFileBuffer","chunkFileObject","ChunkFileUnexpectedProperty","validateDeltasProperty","deltas","ChunkFileDeltasPropertyNotArray","ChunkFileDeltasNotArrayOfStrings","deltaBuffer","protocolParameters","maxDeltaSizeInBytes","ChunkFileDeltaSizeExceedsLimit","updateOperations","chunkFileModel","rawData","compressedRawData","DownloadManager","maxConcurrentDownloads","cas","isNaN","defaultmaxConcurrentDownloads","start","completedDownloadHandles","activeDownloads","downloadHandle","downloadInfo","completed","completedDownloads","fetchResult","availableDownloadLanes","size","pendingDownloads","downloadAsync","handle","splice","download","contentHash","maxSizeInBytes","crypto","fetchPromise","content","read","UpdateOperation","Update","parseOperationFromMapFile","updateOperation","mapFileMode","UpdateOperationMissingOrUnknownProperty","UpdateOperationMissingDidUniqueSuffix","signedDataModel","UpdateOperationTypeIncorrect","UpdateOperationSignedDataHasMissingOrUnknownProperty","update_key","MapFile","mapFileBuffer","decompressedBuffer","MapFileDecompressionFailure","mapFileModel","MapFileNotJson","MapFileHasUnknownProperty","validateChunksProperty","chunks","parseOperationsProperty","mapFile","MapFileOperationsPropertyHasMissingOrUnknownProperty","update","MapFileUpdateOperationsNotArray","MapFileMultipleOperationsForTheSameDid","MapFileChunksPropertyMissingOrIncorrectType","MapFileChunksPropertyDoesNotHaveExactlyOneElement","chunk","MapFileChunkHasMissingOrUnknownProperty","chunkFileHash","updateOperationArray","chunk_file_uri","ThroughputLimiter","getQualifiedTransactions","transactions","currentTransactionTime","transactionsGroupedByTransactionTime","transaction","transactionTime","qualifiedTransactions","transactionGroup","transactionSelector","getTransactionSelector","selectQualifiedTransactions","qualifiedTransactionsInCurrentGroup","Observer","operationStore","transactionStore","unresolvableTransactionStore","observingIntervalInSeconds","throughputLimiter","refreshLastKnownTransaction","getLastTransaction","lastKnownTransaction","startPeriodicProcessing","continuePeriodicProcessing","processTransactions","stopPeriodicProcessing","awaitTransactionProcessing","storeConsecutiveTransactionsProcessed","moreTransactions","lastKnownTransactionNumber","transactionNumber","lastKnownTransactionTimeHash","transactionTimeHash","lastKnownTransactionTime","invalidTransactionNumberOrTimeHash","readResult","nextTransactionNumber","code","SharedErrorCode","InvalidTransactionNumberOrTimeHash","sort","a","b","awaitingTransaction","processingStatus","TransactionProcessingStatus","Pending","transactionsUnderProcessing","processTransaction","blockReorganizationDetected","waitUntilCountOfTransactionsUnderProcessingIsLessOrEqualTo","revertInvalidTransactions","processUnresolvableTransactions","count","getUnresolvableTransactionsDueForRetry","unresolvableTransactions","unresolvableTransactionStatus","Processed","addTransaction","transactionUnderProcessing","transactionProcessor","getTransactionProcessor","transactionProcessedSuccessfully","removeUnresolvableTransaction","recordUnresolvableTransactionFetchAttempt","getExponentiallySpacedTransactions","exponentiallySpacedTransactions","getFirstValidTransaction","bestKnownValidRecentTransaction","bestKnownValidRecentTransactionNumber","removeTransactionsLaterThan","removeUnresolvableTransactionsLaterThan","Operation","operationType","isAnchorFileMode","OperationTypeUnknownOrMissing","OperationGenerator","generateRandomHash","randomBuffer","randomHash","generateKeyPair","publicKeyModel","generateAnchoredCreateOperation","generateCreateOperation","createOperationData","anchoredOperationModel","operationIndex","operationRequest","recoveryPublicKey","recoveryPrivateKey","updatePublicKey","updatePrivateKey","signingPublicKey","signingPrivateKey","nextUpdateRevealValueEncodedString","signingKeyId","generateServiceEndpoints","generateCreateOperationRequest","canonicalizeThenHashThenEncode","generateRecoverOperation","newSigningKeyId","newRecoveryPublicKey","newRecoveryPrivateKey","newSigningPublicKey","newSigningPrivateKey","publicKeyToBeInDocument","services","generateRecoverOperationRequest","operationJson","generateUpdateOperation","additionalKeyId","additionalPublicKey","additionalPrivateKey","createUpdateOperationRequestForAddingAKey","nextUpdateKey","createAnchoredOperationModelFromOperationModel","operationModel","otherPublicKeys","generateUpdateOperationRequest","anyNewSigningPublicKeyId","anyNewSigningKey","createUpdateOperationRequest","request","buffer","encodedDeltaString","signedDataPayloadObject","signUsingEd25519","updateOperationRequest","createRecoverOperationRequest","createDeactivateOperationRequest","generateCreateOperationBuffer","newPublicKey","createUpdateOperationRequestForHubEndpoints","idOfServiceEndpointToAdd","idsOfServiceEndpointToRemove","createDeactivateOperation","Resolver","operationsByType","categorizeOperationsByType","applyCreateOperation","recoverAndDeactivateOperations","concat","constructCommitValueToOperationLookupMap","recoveryCommitValueToOperationMap","applyRecoverAndDeactivateOperations","updateCommitValueToOperationMap","applyUpdateOperations","applyOperation","startingDidState","commitValueToOperationMap","operationsWithCorrectRevealValue","applyFirstValidOperation","newDidState","appliedDidState","operationProcessor","getOperationProcessor","apply","originalDidState","lastOperationTransactionNumber","nonCreateOperations","allSupportedHashAlgorithms","hashAlgorithm","getRevealValue","revealValueBuffer","hashOfRevealValue","hashThenEncode","ServiceInfoProvider","serviceName","getServiceVersion","version","packageJson","FeeManager","computeMinimumTransactionFee","normalizedFee","numberOfOperations","OperationCountLessThanZero","feePerOperation","normalizedFeeToPerOperationFeeMultiplier","feeForAllOperations","transactionFee","Math","max","verifyTransactionFeeAndThrowOnError","transactionFeePaid","TransactionFeePaidLessThanNormalizedFee","actualFeePerOperation","expectedFeePerOperation","TransactionFeePaidInvalid","ValueTimeLockVerifier","calculateMaxNumberOfOperationsAllowed","valueTimeLock","versionMetadataFetcher","maxNumberOfOperationsForNoValueTimeLock","versionMetadata","getVersionMetadata","lockTransactionTime","valueTimeLockAmountMultiplier","numberOfOpsAllowed","amountLocked","numberOfOpsAllowedInt","floor","verifyLockAmountAndThrowOnError","sidetreeTransactionTime","sidetreeTransactionWriter","owner","ValueTimeLockVerifierTransactionWriterLockOwnerMismatch","unlockTransactionTime","ValueTimeLockVerifierTransactionTimeOutsideLockRange","maxNumberOfOpsAllowed","ValueTimeLockVerifierInvalidNumberOfOperations","TransactionProcessor","downloadManager","anchoredData","AnchoredDataSerializer","deserialize","anchorString","normalizedTransactionFee","downloadAndVerifyAnchorFile","anchorFileHash","downloadAndVerifyMapFile","downloadAndVerifyChunkFile","composeAnchoredOperationModels","put","CasNotReachable","CasFileNotFound","message","paidOperationCount","maxOperationsPerBatch","TransactionProcessorPaidOperationCountExceedsLimit","maxAnchorFileSizeInBytes","downloadFileFromCas","fileBuffer","operationCountInAnchorFile","AnchorFileOperationCountExceededPaidLimit","getValueTimeLock","writer","maxMapFileSizeInBytes","maxPaidUpdateOperationCount","updateOperationCount","maxChunkFileSizeInBytes","chunkFile","patchedOperationBuffers","operationCountExcludingDeactivates","patchedOperationBuffer","anchoredOperationModels","fileHash","maxFileSizeInBytes","fileFetchResult","FetchResultCode","InvalidHash","CasFileHashNotValid","MaxSizeExceeded","CasFileTooLarge","NotAFile","CasFileNotAFile","NotFound","TransactionSelector","maxNumberOfOperationsPerBlock","maxNumberOfOperationsPerTransactionTime","maxNumberOfTransactionsPerBlock","maxNumberOfTransactionsPerTransactionTime","getTransactionPriorityQueue","comparator","PriorityQueue","transactionsPriorityQueue","validateTransactions","enqueueFirstTransactionFromEachWriter","getNumberOfOperationsAndTransactionsAlreadyInTransactionTime","numberOfTransactions","numberOfOperationsToQualify","numberOfTransactionsToQualify","transactionsToReturn","getHighestFeeTransactionsFromCurrentTransactionTime","TransactionsNotInSameBlock","writerToTransactionNumberMap","acceptedTransactionNumber","getTransactionsStartingFrom","numOfOperationsInCurrentTransaction","e","debug","getOwnPropertyNames","numberOfOperationsSeen","currentTransaction","pop","LogColor","chalk","hex","green","yellow","BatchWriter","operationQueue","getFee","getWriterValueTimeLock","currentLock","getNumberOfOperationsAllowed","peek","queuedOperations","lightBlue","all","queuedOperation","operationModels","identifier","dataToBeAnchored","stringToWriteToBlockchain","serialize","fee","dequeue","maxNumberOfOpsAllowedByProtocol","maxNumberOfOpsAllowedByLock","min","OperationProcessor","previousOperationTransactionNumber","applyRecoverOperation","applyDeactivateOperation","OperationProcessorUnknownOperationType","number","OperationProcessorCreateOperationDoesNotHaveRevealValue","JsonCanonicalizer","canonicalizeAsBuffer","isMatchingDelta","isValidHash","isValidUpdateKey","canonicalizeAndVerify","signatureIsValid","isValidDelta","resultingDocument","isValidRecoveryKey","Did","didMethodName","didPrefix","startsWith","DidIncorrectPrefix","indexOfQuestionMarkChar","indexOf","isShortForm","uniqueSuffix","substring","DidNoUniqueSuffix","shortForm","didString","initialState","getInitialStateFromDidString","constructCreateOperationFromInitialState","suffixDataHashMatchesUniqueSuffix","DidUniqueSuffixFromInitialStateMismatch","methodNameWithNetworkId","didStringUrl","DidInvalidDidString","methodName","queryParamCounter","initialStateValue","searchParams","key","DidLongFormOnlyOneQueryParamAllowed","expectedKey","initialStateParameterSuffix","DidLongFormOnlyInitialStateParameterIsAllowed","DidLongFormNoInitialStateFound","firstIndexOfDot","DidInitialStateValueContainsNoDot","lastIndexOfDot","lastIndexOf","DidInitialStateValueContainsMoreThanOneDot","DidInitialStateValueDoesNotContainTwoParts","initialStateParts","createOperationRequest","createOperationBuffer","RequestHandler","resolver","handleOperationRequest","errorMessage","RequestHandlerDeltaExceedsMaximumSize","contains","QueueingMultipleOperationsPerDidNotAllowed","ResponseStatus","BadRequest","body","handleCreateRequest","response","Succeeded","RequestHandlerUnknownOperationType","enqueue","ServerError","handleResolveRequest","shortOrLongFormDid","resolveLongFormDid","operationWithMockedAnchorTime","VersionMetadata","hashAlgorithmInMultihashCode","AbstractVersionMetadata","VersionManager","config","protocolVersions","protocolVersionsReverseSorted","startingBlockchainTime","batchWriters","operationProcessors","operationQueues","requestHandlers","transactionProcessors","transactionSelectors","versionMetadatas","initialize","protocolVersion","loadDefaultExportsForVersion","MongoDbOperationQueue","mongoDbConnectionString","databaseName","requestHandler","CoreErrorCode","VersionManagerVersionMetadataIncorrectType","hashAlgorithmsWithDuplicates","blockchainTime","getVersionString","VersionManagerBatchWriterNotFound","VersionManagerOperationProcessorNotFound","getRequestHandler","VersionManagerRequestHandlerNotFound","VersionManagerTransactionProcessorNotFound","VersionManagerTransactionSelectorNotFound","versionString","getOperationQueue","VersionManagerVersionStringNotFound","className"],"mappings":"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"}