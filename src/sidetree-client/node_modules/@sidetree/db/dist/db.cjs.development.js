'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mongodb = require('mongodb');
var common = require('@sidetree/common');

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

/**
 * MongoDB related operations.
 */

var MongoDb = /*#__PURE__*/function () {
  function MongoDb() {}

  /**
   * Test if a MongoDB service is running at the specified url.
   */
  MongoDb.isServerAvailable =
  /*#__PURE__*/
  function () {
    var _isServerAvailable = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(serverUrl) {
      var client;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return mongodb.MongoClient.connect(serverUrl, {
                useUnifiedTopology: true,
                useNewUrlParser: true
              });

            case 3:
              client = _context.sent;
              _context.next = 6;
              return client.close();

            case 6:
              _context.next = 12;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              console.log('Mongoclient connect error: ' + _context.t0);
              return _context.abrupt("return", false);

            case 12:
              return _context.abrupt("return", true);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    function isServerAvailable(_x) {
      return _isServerAvailable.apply(this, arguments);
    }

    return isServerAvailable;
  }();

  MongoDb.resetDatabase = /*#__PURE__*/function () {
    var _resetDatabase = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(serverUrl, databaseName) {
      var client, db, res;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return mongodb.MongoClient.connect(serverUrl, {
                useUnifiedTopology: true,
                useNewUrlParser: true
              });

            case 3:
              client = _context2.sent;
              _context2.next = 6;
              return client.db(databaseName);

            case 6:
              db = _context2.sent;
              _context2.next = 9;
              return db.dropDatabase();

            case 9:
              res = _context2.sent;
              _context2.next = 12;
              return client.close();

            case 12:
              return _context2.abrupt("return", res);

            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2["catch"](0);
              console.log('Mongoclient connect error: ' + _context2.t0);
              return _context2.abrupt("return", false);

            case 19:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 15]]);
    }));

    function resetDatabase(_x2, _x3) {
      return _resetDatabase.apply(this, arguments);
    }

    return resetDatabase;
  }();

  MongoDb.createCollectionIfNotExist = /*#__PURE__*/function () {
    var _createCollectionIfNotExist = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(db, collectionName) {
      var collections, collectionNames, collectionExists, collection;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return db.collections();

            case 2:
              collections = _context3.sent;
              collectionNames = collections.map(function (collection) {
                return collection.collectionName;
              });
              collectionExists = collectionNames.find(function (c) {
                return c === collectionName;
              }); // If the collection exists, use it; else create it then use it.

              if (!collectionExists) {
                _context3.next = 10;
                break;
              }

              console.info("Reusing existing collection " + collectionName);
              collection = db.collection(collectionName);
              _context3.next = 14;
              break;

            case 10:
              console.info("Creating new collection " + collectionName);
              _context3.next = 13;
              return db.createCollection(collectionName);

            case 13:
              collection = _context3.sent;

            case 14:
              return _context3.abrupt("return", collection);

            case 15:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function createCollectionIfNotExist(_x4, _x5) {
      return _createCollectionIfNotExist.apply(this, arguments);
    }

    return createCollectionIfNotExist;
  }();

  return MongoDb;
}();

var MongoDbBase = /*#__PURE__*/function () {
  function MongoDbBase(serverUrl, databaseName) {
    this.serverUrl = serverUrl;
    this.databaseName = databaseName;
  }

  var _proto = MongoDbBase.prototype;

  _proto.close = /*#__PURE__*/function () {
    var _close = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.client.close());

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function close() {
      return _close.apply(this, arguments);
    }

    return close;
  }();

  _proto.clearCollection = /*#__PURE__*/function () {
    var _clearCollection = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.collection.deleteMany({});

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function clearCollection() {
      return _clearCollection.apply(this, arguments);
    }

    return clearCollection;
  }();

  _proto.initialize = /*#__PURE__*/function () {
    var _initialize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.t0 = this.client;

              if (_context3.t0) {
                _context3.next = 5;
                break;
              }

              _context3.next = 4;
              return mongodb.MongoClient.connect(this.serverUrl, {
                useUnifiedTopology: true,
                useNewUrlParser: true
              });

            case 4:
              _context3.t0 = _context3.sent;

            case 5:
              this.client = _context3.t0;
              // `useNewUrlParser` addresses nodejs's URL parser deprecation warning.
              this.db = this.client.db(this.databaseName);
              _context3.next = 9;
              return MongoDb.createCollectionIfNotExist(this.db, this.collectionName);

            case 9:
              this.collection = _context3.sent;

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function initialize() {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }();

  return MongoDbBase;
}();

var MongoDbCasCache = /*#__PURE__*/function (_MongoDbBase) {
  _inheritsLoose(MongoDbCasCache, _MongoDbBase);

  function MongoDbCasCache() {
    var _this;

    _this = _MongoDbBase.apply(this, arguments) || this;
    _this.collectionName = 'cas-cache';
    return _this;
  }

  var _proto = MongoDbCasCache.prototype;

  _proto.initialize = /*#__PURE__*/function () {
    var _initialize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _MongoDbBase.prototype.initialize.call(this);

            case 2:
              _context.next = 4;
              return this.collection.createIndex({
                hash: 1
              }, {
                unique: true
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize() {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }();

  _proto.read = /*#__PURE__*/function () {
    var _read = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(hash) {
      var operations, operation;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.collection.find({
                hash: hash
              }).limit(1).toArray();

            case 2:
              operations = _context2.sent;

              if (!(operations.length === 1)) {
                _context2.next = 6;
                break;
              }

              operation = operations.pop();
              return _context2.abrupt("return", {
                code: common.FetchResultCode.Success,
                content: operation.content.buffer
              });

            case 6:
              return _context2.abrupt("return", {
                code: common.FetchResultCode.NotFound
              });

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function read(_x) {
      return _read.apply(this, arguments);
    }

    return read;
  }();

  _proto.write = /*#__PURE__*/function () {
    var _write = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(hash, content) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return this.collection.insertOne({
                hash: hash,
                content: content
              });

            case 3:
              _context3.next = 9;
              break;

            case 5:
              _context3.prev = 5;
              _context3.t0 = _context3["catch"](0);

              if (!(_context3.t0.code !== 11000)) {
                _context3.next = 9;
                break;
              }

              throw _context3.t0;

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 5]]);
    }));

    function write(_x2, _x3) {
      return _write.apply(this, arguments);
    }

    return write;
  }();

  return MongoDbCasCache;
}(MongoDbBase);

/**
 * Operation queue used by the Batch Writer implemented using MongoDB.
 */

var MongoDbOperationQueue = /*#__PURE__*/function (_MongoDbBase) {
  _inheritsLoose(MongoDbOperationQueue, _MongoDbBase);

  function MongoDbOperationQueue() {
    var _this;

    _this = _MongoDbBase.apply(this, arguments) || this;
    _this.collectionName = 'queued-operations';
    return _this;
  }

  var _proto = MongoDbOperationQueue.prototype;

  _proto.initialize = /*#__PURE__*/function () {
    var _initialize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _MongoDbBase.prototype.initialize.call(this);

            case 2:
              _context.next = 4;
              return this.collection.createIndex({
                didUniqueSuffix: 1
              }, {
                unique: true
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize() {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }();

  _proto.enqueue = /*#__PURE__*/function () {
    var _enqueue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(didUniqueSuffix, operationBuffer) {
      var queuedOperation;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              queuedOperation = {
                didUniqueSuffix: didUniqueSuffix,
                operationBufferBsonBinary: new mongodb.Binary(operationBuffer)
              };
              _context2.next = 4;
              return this.collection.insertOne(queuedOperation);

            case 4:
              _context2.next = 11;
              break;

            case 6:
              _context2.prev = 6;
              _context2.t0 = _context2["catch"](0);

              if (!(_context2.t0.code === 11000)) {
                _context2.next = 10;
                break;
              }

              throw new common.SidetreeError(common.ErrorCode.BatchWriterAlreadyHasOperationForDid);

            case 10:
              throw _context2.t0;

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 6]]);
    }));

    function enqueue(_x, _x2) {
      return _enqueue.apply(this, arguments);
    }

    return enqueue;
  }();

  _proto.dequeue = /*#__PURE__*/function () {
    var _dequeue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(count) {
      var queuedOperations, lastOperation;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(count <= 0)) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", []);

            case 2:
              _context3.next = 4;
              return this.collection.find().sort({
                _id: 1
              }).limit(count).toArray();

            case 4:
              queuedOperations = _context3.sent;
              lastOperation = queuedOperations[queuedOperations.length - 1];
              _context3.next = 8;
              return this.collection.deleteMany({
                _id: {
                  $lte: lastOperation._id
                }
              });

            case 8:
              return _context3.abrupt("return", queuedOperations.map(function (operation) {
                return MongoDbOperationQueue.convertToQueuedOperationModel(operation);
              }));

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function dequeue(_x3) {
      return _dequeue.apply(this, arguments);
    }

    return dequeue;
  }();

  _proto.peek = /*#__PURE__*/function () {
    var _peek = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(count) {
      var queuedOperations;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(count <= 0)) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return", []);

            case 2:
              _context4.next = 4;
              return this.collection.find().sort({
                _id: 1
              }).limit(count).toArray();

            case 4:
              queuedOperations = _context4.sent;
              return _context4.abrupt("return", queuedOperations.map(function (operation) {
                return MongoDbOperationQueue.convertToQueuedOperationModel(operation);
              }));

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function peek(_x4) {
      return _peek.apply(this, arguments);
    }

    return peek;
  }()
  /**
   * Checks to see if the queue already contains an operation for the given DID unique suffix.
   */
  ;

  _proto.contains =
  /*#__PURE__*/
  function () {
    var _contains = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(didUniqueSuffix) {
      var operations;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.collection.find({
                didUniqueSuffix: didUniqueSuffix
              }).limit(1).toArray();

            case 2:
              operations = _context5.sent;
              return _context5.abrupt("return", operations.length > 0);

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function contains(_x5) {
      return _contains.apply(this, arguments);
    }

    return contains;
  }();

  MongoDbOperationQueue.convertToQueuedOperationModel = function convertToQueuedOperationModel(mongoQueuedOperation) {
    return {
      didUniqueSuffix: mongoQueuedOperation.didUniqueSuffix,
      operationBuffer: mongoQueuedOperation.operationBufferBsonBinary.buffer
    };
  };

  return MongoDbOperationQueue;
}(MongoDbBase);

/**
 * Implementation of ITransactionStore that stores the transaction data in a MongoDB database.
 */

var MongoDbTransactionStore = /*#__PURE__*/function (_MongoDbBase) {
  _inheritsLoose(MongoDbTransactionStore, _MongoDbBase);

  function MongoDbTransactionStore() {
    var _this;

    _this = _MongoDbBase.apply(this, arguments) || this;
    _this.collectionName = 'transactions';
    return _this;
  }

  var _proto = MongoDbTransactionStore.prototype;

  _proto.initialize = /*#__PURE__*/function () {
    var _initialize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _MongoDbBase.prototype.initialize.call(this);

            case 2:
              _context.next = 4;
              return this.collection.createIndex({
                transactionNumber: 1
              }, {
                unique: true
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize() {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }()
  /**
   * Returns the number of transactions in the store.
   * Mainly used by tests.
   */
  ;

  _proto.getTransactionsCount =
  /*#__PURE__*/
  function () {
    var _getTransactionsCount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var transactionCount;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.collection.countDocuments();

            case 2:
              transactionCount = _context2.sent;
              return _context2.abrupt("return", transactionCount);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getTransactionsCount() {
      return _getTransactionsCount.apply(this, arguments);
    }

    return getTransactionsCount;
  }();

  _proto.getTransaction = /*#__PURE__*/function () {
    var _getTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(transactionNumber) {
      var transactions, transaction;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.collection.find({
                transactionNumber: mongodb.Long.fromNumber(transactionNumber)
              }).toArray();

            case 2:
              transactions = _context3.sent;

              if (!(transactions.length === 0)) {
                _context3.next = 5;
                break;
              }

              return _context3.abrupt("return", undefined);

            case 5:
              transaction = transactions[0];
              return _context3.abrupt("return", transaction);

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getTransaction(_x) {
      return _getTransaction.apply(this, arguments);
    }

    return getTransaction;
  }();

  _proto.getTransactionsLaterThan = /*#__PURE__*/function () {
    var _getTransactionsLaterThan = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(transactionNumber, max) {
      var transactions, dbCursor;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              transactions = [];
              _context4.prev = 1;

              // If given `undefined`, return transactions from the start.
              if (transactionNumber === undefined) {
                dbCursor = this.collection.find();
              } else {
                dbCursor = this.collection.find({
                  transactionNumber: {
                    $gt: mongodb.Long.fromNumber(transactionNumber)
                  }
                });
              } // If a limit is defined then set it.


              if (max) {
                dbCursor = dbCursor.limit(max);
              } // Sort the output


              dbCursor = dbCursor.sort({
                transactionNumber: 1
              }); // Fetch the transactions

              _context4.next = 7;
              return dbCursor.toArray();

            case 7:
              transactions = _context4.sent;
              _context4.next = 13;
              break;

            case 10:
              _context4.prev = 10;
              _context4.t0 = _context4["catch"](1);
              console.error(_context4.t0);

            case 13:
              return _context4.abrupt("return", transactions);

            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[1, 10]]);
    }));

    function getTransactionsLaterThan(_x2, _x3) {
      return _getTransactionsLaterThan.apply(this, arguments);
    }

    return getTransactionsLaterThan;
  }();

  _proto.addTransaction = /*#__PURE__*/function () {
    var _addTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(transaction) {
      var transactionInMongoDb;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              transactionInMongoDb = {
                anchorString: transaction.anchorString,
                // NOTE: MUST force `transactionNumber` to be Int64 in MongoDB.
                transactionNumber: mongodb.Long.fromNumber(transaction.transactionNumber),
                transactionTime: transaction.transactionTime,
                transactionTimeHash: transaction.transactionTimeHash,
                transactionFeePaid: transaction.transactionFeePaid,
                normalizedTransactionFee: transaction.normalizedTransactionFee,
                writer: transaction.writer
              };
              _context5.next = 4;
              return this.collection.insertOne(transactionInMongoDb);

            case 4:
              _context5.next = 10;
              break;

            case 6:
              _context5.prev = 6;
              _context5.t0 = _context5["catch"](0);

              if (!(_context5.t0.code !== 11000)) {
                _context5.next = 10;
                break;
              }

              throw _context5.t0;

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 6]]);
    }));

    function addTransaction(_x4) {
      return _addTransaction.apply(this, arguments);
    }

    return addTransaction;
  }();

  _proto.getLastTransaction = /*#__PURE__*/function () {
    var _getLastTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      var lastTransactions, lastProcessedTransaction;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.collection.find().limit(1).sort({
                transactionNumber: -1
              }).toArray();

            case 2:
              lastTransactions = _context6.sent;

              if (!(lastTransactions.length === 0)) {
                _context6.next = 5;
                break;
              }

              return _context6.abrupt("return", undefined);

            case 5:
              lastProcessedTransaction = lastTransactions[0];
              return _context6.abrupt("return", lastProcessedTransaction);

            case 7:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getLastTransaction() {
      return _getLastTransaction.apply(this, arguments);
    }

    return getLastTransaction;
  }();

  _proto.getExponentiallySpacedTransactions = /*#__PURE__*/function () {
    var _getExponentiallySpacedTransactions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      var exponentiallySpacedTransactions, allTransactions, index, distance;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              exponentiallySpacedTransactions = [];
              _context7.next = 3;
              return this.collection.find().sort({
                transactionNumber: 1
              }).toArray();

            case 3:
              allTransactions = _context7.sent;
              index = allTransactions.length - 1;
              distance = 1;

              while (index >= 0) {
                exponentiallySpacedTransactions.push(allTransactions[index]);
                index -= distance;
                distance *= 2;
              }

              return _context7.abrupt("return", exponentiallySpacedTransactions);

            case 8:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getExponentiallySpacedTransactions() {
      return _getExponentiallySpacedTransactions.apply(this, arguments);
    }

    return getExponentiallySpacedTransactions;
  }();

  _proto.removeTransactionsLaterThan = /*#__PURE__*/function () {
    var _removeTransactionsLaterThan = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(transactionNumber) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (!(transactionNumber === undefined)) {
                _context8.next = 4;
                break;
              }

              _context8.next = 3;
              return this.clearCollection();

            case 3:
              return _context8.abrupt("return");

            case 4:
              _context8.next = 6;
              return this.collection.deleteMany({
                transactionNumber: {
                  $gt: mongodb.Long.fromNumber(transactionNumber)
                }
              });

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function removeTransactionsLaterThan(_x5) {
      return _removeTransactionsLaterThan.apply(this, arguments);
    }

    return removeTransactionsLaterThan;
  }()
  /**
   * Gets the list of processed transactions.
   * Mainly used for test purposes.
   */
  ;

  _proto.getTransactions =
  /*#__PURE__*/
  function () {
    var _getTransactions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      var transactions;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.collection.find().sort({
                transactionNumber: 1
              }).toArray();

            case 2:
              transactions = _context9.sent;
              return _context9.abrupt("return", transactions);

            case 4:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getTransactions() {
      return _getTransactions.apply(this, arguments);
    }

    return getTransactions;
  }()
  /**
   * Gets a list of transactions between the bounds of transaction time. The smaller value will be inclusive while the bigger be exclusive
   * @param inclusiveBeginTransactionTime The first transaction time to begin querying for
   * @param exclusiveEndTransactionTime The transaction time to stop querying for
   */
  ;

  _proto.getTransactionsStartingFrom =
  /*#__PURE__*/
  function () {
    var _getTransactionsStartingFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(inclusiveBeginTransactionTime, exclusiveEndTransactionTime) {
      var cursor, transactions;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (inclusiveBeginTransactionTime === exclusiveEndTransactionTime) {
                // if begin === end, query for 1 transaction time
                cursor = this.collection.find({
                  transactionTime: {
                    $eq: mongodb.Long.fromNumber(inclusiveBeginTransactionTime)
                  }
                });
              } else {
                cursor = this.collection.find({
                  $and: [{
                    transactionTime: {
                      $gte: mongodb.Long.fromNumber(inclusiveBeginTransactionTime)
                    }
                  }, {
                    transactionTime: {
                      $lt: mongodb.Long.fromNumber(exclusiveEndTransactionTime)
                    }
                  }]
                });
              }

              _context10.next = 3;
              return cursor.sort({
                transactionNumber: 1
              }).toArray();

            case 3:
              transactions = _context10.sent;
              return _context10.abrupt("return", transactions);

            case 5:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function getTransactionsStartingFrom(_x6, _x7) {
      return _getTransactionsStartingFrom.apply(this, arguments);
    }

    return getTransactionsStartingFrom;
  }();

  return MongoDbTransactionStore;
}(MongoDbBase);

/**
 * Implementation of `IIUnresolvableTransactionStore` that stores the transaction data in a MongoDB database.
 */

var MongoDbUnresolvableTransactionStore = /*#__PURE__*/function (_MongoDbBase) {
  _inheritsLoose(MongoDbUnresolvableTransactionStore, _MongoDbBase);

  /**
   * Constructs a `MongoDbUnresolvableTransactionStore`;
   * @param retryExponentialDelayFactor
   *   The exponential delay factor in milliseconds for retries of unresolvable transactions.
   *   e.g. if it is set to 1 seconds, then the delays for retries will be 1 second, 2 seconds, 4 seconds... until the transaction can be resolved.
   */
  function MongoDbUnresolvableTransactionStore(serverUrl, databaseName, retryExponentialDelayFactor) {
    var _this;

    _this = _MongoDbBase.call(this, serverUrl, databaseName) || this;
    _this.collectionName = 'unresolvable-transactions';
    _this.exponentialDelayFactorInMilliseconds = 60000;
    _this.maximumUnresolvableTransactionReturnCount = 100;

    if (retryExponentialDelayFactor !== undefined) {
      _this.exponentialDelayFactorInMilliseconds = retryExponentialDelayFactor;
    }

    return _this;
  }

  var _proto = MongoDbUnresolvableTransactionStore.prototype;

  _proto.initialize = /*#__PURE__*/function () {
    var _initialize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _MongoDbBase.prototype.initialize.call(this);

            case 2:
              _context.next = 4;
              return this.collection.createIndex({
                transactionTime: 1,
                transactionNumber: 1
              }, {
                unique: true
              });

            case 4:
              _context.next = 6;
              return this.collection.createIndex({
                nextRetryTime: 1
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize() {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }();

  _proto.recordUnresolvableTransactionFetchAttempt = /*#__PURE__*/function () {
    var _recordUnresolvableTransactionFetchAttempt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(transaction) {
      var transactionTime, transactionNumber, searchFilter, findResults, unresolvableTransaction, newUnresolvableTransaction, retryAttempts, anchorString, requiredElapsedTimeSinceFirstFetchBeforeNextRetry, requiredElapsedTimeInSeconds, nextRetryTime, _searchFilter;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              // Try to get the unresolvable transaction from store.
              transactionTime = transaction.transactionTime;
              transactionNumber = transaction.transactionNumber;
              searchFilter = {
                transactionTime: transactionTime,
                transactionNumber: mongodb.Long.fromNumber(transactionNumber)
              };
              _context2.next = 5;
              return this.collection.find(searchFilter).toArray();

            case 5:
              findResults = _context2.sent;

              if (findResults && findResults.length > 0) {
                unresolvableTransaction = findResults[0];
              } // If unresolvable transaction not found in store, insert a new one; else update the info on retry attempts.


              if (!(unresolvableTransaction === undefined)) {
                _context2.next = 13;
                break;
              }

              newUnresolvableTransaction = {
                transactionTime: transactionTime,
                transactionNumber: mongodb.Long.fromNumber(transactionNumber),
                anchorString: transaction.anchorString,
                transactionTimeHash: transaction.transactionTimeHash,
                firstFetchTime: Date.now(),
                retryAttempts: 0,
                nextRetryTime: Date.now()
              };
              _context2.next = 11;
              return this.collection.insertOne(newUnresolvableTransaction);

            case 11:
              _context2.next = 22;
              break;

            case 13:
              retryAttempts = unresolvableTransaction.retryAttempts + 1; // Exponentially delay the retry the more attempts are done in the past.

              anchorString = transaction.anchorString;
              requiredElapsedTimeSinceFirstFetchBeforeNextRetry = Math.pow(2, unresolvableTransaction.retryAttempts) * this.exponentialDelayFactorInMilliseconds;
              requiredElapsedTimeInSeconds = requiredElapsedTimeSinceFirstFetchBeforeNextRetry / 1000;
              console.info("Record transaction " + transactionNumber + " with anchor string " + anchorString + " to retry after " + requiredElapsedTimeInSeconds + " seconds.");
              nextRetryTime = unresolvableTransaction.firstFetchTime + requiredElapsedTimeSinceFirstFetchBeforeNextRetry;
              _searchFilter = {
                transactionTime: transactionTime,
                transactionNumber: mongodb.Long.fromNumber(transactionNumber)
              };
              _context2.next = 22;
              return this.collection.updateOne(_searchFilter, {
                $set: {
                  retryAttempts: retryAttempts,
                  nextRetryTime: nextRetryTime
                }
              });

            case 22:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function recordUnresolvableTransactionFetchAttempt(_x) {
      return _recordUnresolvableTransactionFetchAttempt.apply(this, arguments);
    }

    return recordUnresolvableTransactionFetchAttempt;
  }();

  _proto.removeUnresolvableTransaction = /*#__PURE__*/function () {
    var _removeUnresolvableTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(transaction) {
      var transactionTime, transactionNumber;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              transactionTime = transaction.transactionTime;
              transactionNumber = transaction.transactionNumber;
              _context3.next = 4;
              return this.collection.deleteOne({
                transactionTime: transactionTime,
                transactionNumber: mongodb.Long.fromNumber(transactionNumber)
              });

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function removeUnresolvableTransaction(_x2) {
      return _removeUnresolvableTransaction.apply(this, arguments);
    }

    return removeUnresolvableTransaction;
  }();

  _proto.getUnresolvableTransactionsDueForRetry = /*#__PURE__*/function () {
    var _getUnresolvableTransactionsDueForRetry = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(maximumReturnCount) {
      var returnCount, now, unresolvableTransactionsToRetry;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              // Override the return count if it is specified.
              returnCount = this.maximumUnresolvableTransactionReturnCount;

              if (maximumReturnCount !== undefined) {
                returnCount = maximumReturnCount;
              }

              now = Date.now();
              _context4.next = 5;
              return this.collection.find({
                nextRetryTime: {
                  $lte: now
                }
              }).sort({
                nextRetryTime: 1
              }).limit(returnCount).toArray();

            case 5:
              unresolvableTransactionsToRetry = _context4.sent;
              return _context4.abrupt("return", unresolvableTransactionsToRetry);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getUnresolvableTransactionsDueForRetry(_x3) {
      return _getUnresolvableTransactionsDueForRetry.apply(this, arguments);
    }

    return getUnresolvableTransactionsDueForRetry;
  }();

  _proto.removeUnresolvableTransactionsLaterThan = /*#__PURE__*/function () {
    var _removeUnresolvableTransactionsLaterThan = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(transactionNumber) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(transactionNumber === undefined)) {
                _context5.next = 4;
                break;
              }

              _context5.next = 3;
              return this.clearCollection();

            case 3:
              return _context5.abrupt("return");

            case 4:
              _context5.next = 6;
              return this.collection.deleteMany({
                transactionNumber: {
                  $gt: mongodb.Long.fromNumber(transactionNumber)
                }
              });

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function removeUnresolvableTransactionsLaterThan(_x4) {
      return _removeUnresolvableTransactionsLaterThan.apply(this, arguments);
    }

    return removeUnresolvableTransactionsLaterThan;
  }()
  /**
   * Gets the list of unresolvable transactions.
   * Mainly used for test purposes.
   */
  ;

  _proto.getUnresolvableTransactions =
  /*#__PURE__*/
  function () {
    var _getUnresolvableTransactions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      var transactions;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.collection.find().sort({
                transactionTime: 1,
                transactionNumber: 1
              }).toArray();

            case 2:
              transactions = _context6.sent;
              return _context6.abrupt("return", transactions);

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getUnresolvableTransactions() {
      return _getUnresolvableTransactions.apply(this, arguments);
    }

    return getUnresolvableTransactions;
  }();

  return MongoDbUnresolvableTransactionStore;
}(MongoDbBase);

var MongoDbOperationStore = /*#__PURE__*/function (_MongoDbBase) {
  _inheritsLoose(MongoDbOperationStore, _MongoDbBase);

  function MongoDbOperationStore() {
    var _this;

    _this = _MongoDbBase.apply(this, arguments) || this;
    _this.collectionName = 'operation';
    return _this;
  }

  var _proto = MongoDbOperationStore.prototype;

  _proto.initialize = /*#__PURE__*/function () {
    var _initialize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _MongoDbBase.prototype.initialize.call(this);

            case 2:
              _context.next = 4;
              return this.collection.createIndex({
                didUniqueSuffix: 1
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize() {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }();

  _proto.put = /*#__PURE__*/function () {
    var _put = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(operations) {
      var _this2 = this;

      var operationsWithoutDuplicates, onlyNewElements, _loop, _iterator, _step;

      return runtime_1.wrap(function _callee2$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              // Remove duplicates (same operationIndex) from the operations array
              operationsWithoutDuplicates = operations.reduce(function (opsWithoutDuplicates, operation) {
                var exists = opsWithoutDuplicates.find(function (op) {
                  return op.operationIndex === operation.operationIndex;
                });

                if (exists) {
                  return opsWithoutDuplicates;
                } else {
                  return [].concat(opsWithoutDuplicates, [operation]);
                }
              }, []); // Only insert new elements

              onlyNewElements = [];
              _loop = /*#__PURE__*/runtime_1.mark(function _loop() {
                var operation, anchoredOperation, res, isDuplicated;
                return runtime_1.wrap(function _loop$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        operation = _step.value;
                        anchoredOperation = operation;
                        _context2.next = 4;
                        return _this2.get(anchoredOperation.didUniqueSuffix);

                      case 4:
                        res = _context2.sent;
                        isDuplicated = res.find(function (op) {
                          return op.operationIndex === anchoredOperation.operationIndex && op.transactionNumber === anchoredOperation.transactionNumber;
                        });

                        if (!isDuplicated) {
                          onlyNewElements.push(anchoredOperation);
                        }

                      case 7:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _loop);
              });
              _iterator = _createForOfIteratorHelperLoose(operationsWithoutDuplicates);

            case 4:
              if ((_step = _iterator()).done) {
                _context3.next = 8;
                break;
              }

              return _context3.delegateYield(_loop(), "t0", 6);

            case 6:
              _context3.next = 4;
              break;

            case 8:
              if (!(onlyNewElements.length > 0)) {
                _context3.next = 11;
                break;
              }

              _context3.next = 11;
              return this.collection.insertMany(onlyNewElements);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee2, this);
    }));

    function put(_x) {
      return _put.apply(this, arguments);
    }

    return put;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(didUniqueSuffix) {
      var results;
      return runtime_1.wrap(function _callee3$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.collection.find({
                didUniqueSuffix: didUniqueSuffix
              }).toArray();

            case 2:
              results = _context4.sent;
              // Ensure operations are sorted by increasing order of operationIndex
              results.sort(function (op1, op2) {
                return op1.operationIndex - op2.operationIndex;
              });
              return _context4.abrupt("return", results);

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee3, this);
    }));

    function get(_x2) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto["delete"] = /*#__PURE__*/function () {
    var _delete2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(transactionNumber) {
      return runtime_1.wrap(function _callee4$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!transactionNumber) {
                _context5.next = 5;
                break;
              }

              _context5.next = 3;
              return this.collection.deleteMany({
                transactionNumber: {
                  $gt: transactionNumber
                }
              });

            case 3:
              _context5.next = 7;
              break;

            case 5:
              _context5.next = 7;
              return this.collection.deleteMany({});

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee4, this);
    }));

    function _delete(_x3) {
      return _delete2.apply(this, arguments);
    }

    return _delete;
  }();

  _proto.deleteUpdatesEarlierThan = /*#__PURE__*/function () {
    var _deleteUpdatesEarlierThan = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(didUniqueSuffix, transactionNumber, operationIndex) {
      return runtime_1.wrap(function _callee5$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.collection.deleteMany({
                $or: [{
                  didUniqueSuffix: didUniqueSuffix,
                  transactionNumber: {
                    $lt: transactionNumber
                  },
                  type: common.OperationType.Update
                }, {
                  didUniqueSuffix: didUniqueSuffix,
                  transactionNumber: transactionNumber,
                  operationIndex: {
                    $lt: operationIndex
                  },
                  type: common.OperationType.Update
                }]
              });

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee5, this);
    }));

    function deleteUpdatesEarlierThan(_x4, _x5, _x6) {
      return _deleteUpdatesEarlierThan.apply(this, arguments);
    }

    return deleteUpdatesEarlierThan;
  }();

  return MongoDbOperationStore;
}(MongoDbBase);

exports.MongoDb = MongoDb;
exports.MongoDbCasCache = MongoDbCasCache;
exports.MongoDbOperationQueue = MongoDbOperationQueue;
exports.MongoDbOperationStore = MongoDbOperationStore;
exports.MongoDbTransactionStore = MongoDbTransactionStore;
exports.MongoDbUnresolvableTransactionStore = MongoDbUnresolvableTransactionStore;
//# sourceMappingURL=db.cjs.development.js.map
