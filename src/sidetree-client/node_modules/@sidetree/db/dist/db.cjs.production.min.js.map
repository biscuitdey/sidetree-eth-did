{"version":3,"file":"db.cjs.production.min.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/MongoDb.ts","../src/MongoDbBase.ts","../src/MongoDbCasCache.ts","../src/MongoDbOperationQueue.ts","../src/MongoDbTransactionStore.ts","../src/MongoDbUnresolvableTransactionStore.ts","../src/MongoDbOperationStore.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Collection, MongoClient, Db } from 'mongodb';\n\n/**\n * MongoDB related operations.\n */\nexport default class MongoDb {\n  /**\n   * Test if a MongoDB service is running at the specified url.\n   */\n  public static async isServerAvailable(serverUrl: string): Promise<boolean> {\n    try {\n      const client = await MongoClient.connect(serverUrl, {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n      });\n      await client.close();\n    } catch (error) {\n      console.log('Mongoclient connect error: ' + error);\n      return false;\n    }\n    return true;\n  }\n\n  public static async resetDatabase(\n    serverUrl: string,\n    databaseName: string\n  ): Promise<boolean> {\n    try {\n      const client = await MongoClient.connect(serverUrl, {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n      });\n      const db = await client.db(databaseName);\n      const res = await db.dropDatabase();\n      await client.close();\n      return res;\n    } catch (error) {\n      console.log('Mongoclient connect error: ' + error);\n      return false;\n    }\n  }\n\n  public static async createCollectionIfNotExist(\n    db: Db,\n    collectionName: string\n  ): Promise<Collection<any>> {\n    // Get the names of existing collections.\n    const collections = await db.collections();\n    const collectionNames = collections.map(\n      (collection) => collection.collectionName\n    );\n    const collectionExists = collectionNames.find((c) => c === collectionName);\n\n    // If the collection exists, use it; else create it then use it.\n    let collection;\n    if (collectionExists) {\n      console.info(`Reusing existing collection ${collectionName}`);\n      collection = db.collection(collectionName);\n    } else {\n      console.info(`Creating new collection ${collectionName}`);\n      collection = await db.createCollection(collectionName);\n    }\n    return collection;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Collection, MongoClient, Db } from 'mongodb';\nimport MongoDb from './MongoDb';\n\nexport default abstract class MongoDbBase {\n  abstract collectionName: string;\n  private serverUrl: string;\n  public databaseName: string;\n  private client: MongoClient | undefined;\n  protected db: Db | undefined;\n  protected collection: Collection<any> | undefined;\n\n  constructor(serverUrl: string, databaseName: string) {\n    this.serverUrl = serverUrl;\n    this.databaseName = databaseName;\n  }\n\n  public async close(): Promise<void> {\n    return this.client!.close();\n  }\n\n  public async clearCollection(): Promise<void> {\n    await this.collection!.deleteMany({});\n  }\n\n  public async initialize(): Promise<void> {\n    this.client =\n      this.client ||\n      (await MongoClient.connect(this.serverUrl, {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n      })); // `useNewUrlParser` addresses nodejs's URL parser deprecation warning.\n    this.db = this.client.db(this.databaseName);\n    this.collection = await MongoDb.createCollectionIfNotExist(\n      this.db!,\n      this.collectionName\n    );\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchResult, FetchResultCode } from '@sidetree/common';\nimport MongoDbBase from './MongoDbBase';\n\nexport default class MongoDbCasCache extends MongoDbBase {\n  readonly collectionName = 'cas-cache';\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex({ hash: 1 }, { unique: true });\n  }\n\n  async read(hash: string): Promise<FetchResult> {\n    const operations = await this.collection!.find({ hash })\n      .limit(1)\n      .toArray();\n    if (operations.length === 1) {\n      const operation = operations.pop();\n      return {\n        code: FetchResultCode.Success,\n        content: operation!.content.buffer as Buffer,\n      };\n    }\n    return {\n      code: FetchResultCode.NotFound,\n    };\n  }\n\n  async write(hash: string, content: Buffer): Promise<void> {\n    try {\n      await this.collection!.insertOne({ hash, content });\n    } catch (error) {\n      // Duplicate insert errors (error code 11000).\n      if (error.code !== 11000) {\n        throw error;\n      }\n    }\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorCode,\n  IOperationQueue,\n  SidetreeError,\n  QueuedOperationModel,\n} from '@sidetree/common';\nimport { Binary, ObjectId } from 'mongodb';\nimport MongoDbBase from './MongoDbBase';\n\n/**\n * Sidetree operation stored in MongoDb.\n * Note: we use the shorter property name \"opIndex\" instead of \"operationIndex\" due to a constraint imposed by CosmosDB/MongoDB:\n * the sum of property names of a unique index keys need to be less than 40 characters.\n * Note: We represent opIndex, transactionNumber, and transactionTime as long instead of number (double) to avoid some floating\n * point comparison quirks.\n */\ninterface IMongoQueuedOperation {\n  _id?: ObjectId;\n  didUniqueSuffix: string;\n  operationBufferBsonBinary: Binary;\n}\n\n/**\n * Operation queue used by the Batch Writer implemented using MongoDB.\n */\nexport default class MongoDbOperationQueue extends MongoDbBase\n  implements IOperationQueue {\n  readonly collectionName = 'queued-operations';\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex(\n      { didUniqueSuffix: 1 },\n      { unique: true }\n    );\n  }\n\n  async enqueue(\n    didUniqueSuffix: string,\n    operationBuffer: Buffer\n  ): Promise<void> {\n    try {\n      const queuedOperation: IMongoQueuedOperation = {\n        didUniqueSuffix,\n        operationBufferBsonBinary: new Binary(operationBuffer),\n      };\n\n      await this.collection!.insertOne(queuedOperation);\n    } catch (error) {\n      // Duplicate insert errors (error code 11000).\n      if (error.code === 11000) {\n        throw new SidetreeError(ErrorCode.BatchWriterAlreadyHasOperationForDid);\n      }\n\n      throw error;\n    }\n  }\n\n  async dequeue(count: number): Promise<QueuedOperationModel[]> {\n    if (count <= 0) {\n      return [];\n    }\n\n    const queuedOperations = await this.collection!.find()\n      .sort({ _id: 1 })\n      .limit(count)\n      .toArray();\n    const lastOperation = queuedOperations[queuedOperations.length - 1];\n    await this.collection!.deleteMany({ _id: { $lte: lastOperation._id } });\n\n    return queuedOperations.map((operation) =>\n      MongoDbOperationQueue.convertToQueuedOperationModel(operation)\n    );\n  }\n\n  async peek(count: number): Promise<QueuedOperationModel[]> {\n    if (count <= 0) {\n      return [];\n    }\n\n    // NOTE: `_id` is the default index that is sorted based by create time.\n    const queuedOperations = await this.collection!.find()\n      .sort({ _id: 1 })\n      .limit(count)\n      .toArray();\n\n    return queuedOperations.map((operation) =>\n      MongoDbOperationQueue.convertToQueuedOperationModel(operation)\n    );\n  }\n\n  /**\n   * Checks to see if the queue already contains an operation for the given DID unique suffix.\n   */\n  async contains(didUniqueSuffix: string): Promise<boolean> {\n    const operations = await this.collection!.find({ didUniqueSuffix })\n      .limit(1)\n      .toArray();\n    return operations.length > 0;\n  }\n\n  private static convertToQueuedOperationModel(\n    mongoQueuedOperation: IMongoQueuedOperation\n  ): QueuedOperationModel {\n    return {\n      didUniqueSuffix: mongoQueuedOperation.didUniqueSuffix,\n      operationBuffer: mongoQueuedOperation.operationBufferBsonBinary.buffer,\n    };\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ITransactionStore, TransactionModel } from '@sidetree/common';\nimport { Cursor, Long } from 'mongodb';\nimport MongoDbBase from './MongoDbBase';\n\n/**\n * Implementation of ITransactionStore that stores the transaction data in a MongoDB database.\n */\nexport default class MongoDbTransactionStore extends MongoDbBase\n  implements ITransactionStore {\n  readonly collectionName = 'transactions';\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex(\n      { transactionNumber: 1 },\n      { unique: true }\n    );\n  }\n\n  /**\n   * Returns the number of transactions in the store.\n   * Mainly used by tests.\n   */\n  public async getTransactionsCount(): Promise<number> {\n    const transactionCount = await this.collection!.countDocuments();\n    return transactionCount;\n  }\n\n  public async getTransaction(\n    transactionNumber: number\n  ): Promise<TransactionModel | undefined> {\n    const transactions = await this.collection!.find({\n      transactionNumber: Long.fromNumber(transactionNumber),\n    }).toArray();\n    if (transactions.length === 0) {\n      return undefined;\n    }\n\n    const transaction = transactions[0];\n    return transaction;\n  }\n\n  public async getTransactionsLaterThan(\n    transactionNumber: number | undefined,\n    max: number | undefined\n  ): Promise<TransactionModel[]> {\n    let transactions = [];\n\n    try {\n      let dbCursor: Cursor<any>;\n\n      // If given `undefined`, return transactions from the start.\n      if (transactionNumber === undefined) {\n        dbCursor = this.collection!.find();\n      } else {\n        dbCursor = this.collection!.find({\n          transactionNumber: { $gt: Long.fromNumber(transactionNumber) },\n        });\n      }\n\n      // If a limit is defined then set it.\n      if (max) {\n        dbCursor = dbCursor.limit(max);\n      }\n\n      // Sort the output\n      dbCursor = dbCursor.sort({ transactionNumber: 1 });\n\n      // Fetch the transactions\n      transactions = await dbCursor.toArray();\n    } catch (error) {\n      console.error(error);\n    }\n\n    return transactions;\n  }\n\n  async addTransaction(transaction: TransactionModel): Promise<void> {\n    try {\n      const transactionInMongoDb = {\n        anchorString: transaction.anchorString,\n        // NOTE: MUST force `transactionNumber` to be Int64 in MongoDB.\n        transactionNumber: Long.fromNumber(transaction.transactionNumber),\n        transactionTime: transaction.transactionTime,\n        transactionTimeHash: transaction.transactionTimeHash,\n        transactionFeePaid: transaction.transactionFeePaid,\n        normalizedTransactionFee: transaction.normalizedTransactionFee,\n        writer: transaction.writer,\n      };\n      await this.collection!.insertOne(transactionInMongoDb);\n    } catch (error) {\n      // Swallow duplicate insert errors (error code 11000) as no-op; rethrow others\n      if (error.code !== 11000) {\n        throw error;\n      }\n    }\n  }\n\n  async getLastTransaction(): Promise<TransactionModel | undefined> {\n    const lastTransactions = await this.collection!.find()\n      .limit(1)\n      .sort({ transactionNumber: -1 })\n      .toArray();\n    if (lastTransactions.length === 0) {\n      return undefined;\n    }\n\n    const lastProcessedTransaction = lastTransactions[0];\n    return lastProcessedTransaction;\n  }\n\n  async getExponentiallySpacedTransactions(): Promise<TransactionModel[]> {\n    const exponentiallySpacedTransactions: TransactionModel[] = [];\n    const allTransactions = await this.collection!.find()\n      .sort({ transactionNumber: 1 })\n      .toArray();\n\n    let index = allTransactions.length - 1;\n    let distance = 1;\n    while (index >= 0) {\n      exponentiallySpacedTransactions.push(allTransactions[index]);\n      index -= distance;\n      distance *= 2;\n    }\n    return exponentiallySpacedTransactions;\n  }\n\n  async removeTransactionsLaterThan(transactionNumber?: number): Promise<void> {\n    // If given `undefined`, remove all transactions.\n    if (transactionNumber === undefined) {\n      await this.clearCollection();\n      return;\n    }\n\n    await this.collection!.deleteMany({\n      transactionNumber: { $gt: Long.fromNumber(transactionNumber) },\n    });\n  }\n\n  /**\n   * Gets the list of processed transactions.\n   * Mainly used for test purposes.\n   */\n  public async getTransactions(): Promise<TransactionModel[]> {\n    const transactions = await this.collection!.find()\n      .sort({ transactionNumber: 1 })\n      .toArray();\n    return transactions;\n  }\n\n  /**\n   * Gets a list of transactions between the bounds of transaction time. The smaller value will be inclusive while the bigger be exclusive\n   * @param inclusiveBeginTransactionTime The first transaction time to begin querying for\n   * @param exclusiveEndTransactionTime The transaction time to stop querying for\n   */\n  public async getTransactionsStartingFrom(\n    inclusiveBeginTransactionTime: number,\n    exclusiveEndTransactionTime: number\n  ): Promise<TransactionModel[]> {\n    let cursor: Cursor<any>;\n    if (inclusiveBeginTransactionTime === exclusiveEndTransactionTime) {\n      // if begin === end, query for 1 transaction time\n      cursor = this.collection!.find({\n        transactionTime: {\n          $eq: Long.fromNumber(inclusiveBeginTransactionTime),\n        },\n      });\n    } else {\n      cursor = this.collection!.find({\n        $and: [\n          {\n            transactionTime: {\n              $gte: Long.fromNumber(inclusiveBeginTransactionTime),\n            },\n          },\n          {\n            transactionTime: {\n              $lt: Long.fromNumber(exclusiveEndTransactionTime),\n            },\n          },\n        ],\n      });\n    }\n\n    const transactions: TransactionModel[] = await cursor\n      .sort({ transactionNumber: 1 })\n      .toArray();\n    return transactions;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  IUnresolvableTransactionStore,\n  TransactionModel,\n} from '@sidetree/common';\nimport { Long } from 'mongodb';\nimport MongoDbBase from './MongoDbBase';\n\ninterface IUnresolvableTransaction extends TransactionModel {\n  firstFetchTime: number;\n  retryAttempts: number;\n  nextRetryTime: number;\n}\n\n/**\n * Implementation of `IIUnresolvableTransactionStore` that stores the transaction data in a MongoDB database.\n */\n\nexport default class MongoDbUnresolvableTransactionStore extends MongoDbBase\n  implements IUnresolvableTransactionStore {\n  public readonly collectionName: string = 'unresolvable-transactions';\n\n  private exponentialDelayFactorInMilliseconds = 60000;\n  private maximumUnresolvableTransactionReturnCount = 100;\n\n  /**\n   * Constructs a `MongoDbUnresolvableTransactionStore`;\n   * @param retryExponentialDelayFactor\n   *   The exponential delay factor in milliseconds for retries of unresolvable transactions.\n   *   e.g. if it is set to 1 seconds, then the delays for retries will be 1 second, 2 seconds, 4 seconds... until the transaction can be resolved.\n   */\n  constructor(\n    serverUrl: string,\n    databaseName: string,\n    retryExponentialDelayFactor?: number\n  ) {\n    super(serverUrl, databaseName);\n\n    if (retryExponentialDelayFactor !== undefined) {\n      this.exponentialDelayFactorInMilliseconds = retryExponentialDelayFactor;\n    }\n  }\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex(\n      { transactionTime: 1, transactionNumber: 1 },\n      { unique: true }\n    );\n    await this.collection!.createIndex({\n      nextRetryTime: 1,\n    });\n  }\n\n  async recordUnresolvableTransactionFetchAttempt(\n    transaction: TransactionModel\n  ): Promise<void> {\n    // Try to get the unresolvable transaction from store.\n    const transactionTime = transaction.transactionTime;\n    const transactionNumber = transaction.transactionNumber;\n    const searchFilter = {\n      transactionTime,\n      transactionNumber: Long.fromNumber(transactionNumber),\n    };\n    const findResults = await this.collection!.find(searchFilter).toArray();\n    let unresolvableTransaction: IUnresolvableTransaction | undefined;\n    if (findResults && findResults.length > 0) {\n      unresolvableTransaction = findResults[0];\n    }\n\n    // If unresolvable transaction not found in store, insert a new one; else update the info on retry attempts.\n    if (unresolvableTransaction === undefined) {\n      const newUnresolvableTransaction = {\n        transactionTime,\n        transactionNumber: Long.fromNumber(transactionNumber),\n        anchorString: transaction.anchorString,\n        transactionTimeHash: transaction.transactionTimeHash,\n        firstFetchTime: Date.now(),\n        retryAttempts: 0,\n        nextRetryTime: Date.now(),\n      };\n\n      await this.collection!.insertOne(newUnresolvableTransaction);\n    } else {\n      const retryAttempts = unresolvableTransaction.retryAttempts + 1;\n\n      // Exponentially delay the retry the more attempts are done in the past.\n      const anchorString = transaction.anchorString;\n      const requiredElapsedTimeSinceFirstFetchBeforeNextRetry =\n        Math.pow(2, unresolvableTransaction.retryAttempts) *\n        this.exponentialDelayFactorInMilliseconds;\n      const requiredElapsedTimeInSeconds =\n        requiredElapsedTimeSinceFirstFetchBeforeNextRetry / 1000;\n      console.info(\n        `Record transaction ${transactionNumber} with anchor string ${anchorString} to retry after ${requiredElapsedTimeInSeconds} seconds.`\n      );\n      const nextRetryTime =\n        unresolvableTransaction.firstFetchTime +\n        requiredElapsedTimeSinceFirstFetchBeforeNextRetry;\n\n      const searchFilter = {\n        transactionTime,\n        transactionNumber: Long.fromNumber(transactionNumber),\n      };\n      await this.collection!.updateOne(searchFilter, {\n        $set: { retryAttempts, nextRetryTime },\n      });\n    }\n  }\n\n  async removeUnresolvableTransaction(\n    transaction: TransactionModel\n  ): Promise<void> {\n    const transactionTime = transaction.transactionTime;\n    const transactionNumber = transaction.transactionNumber;\n    await this.collection!.deleteOne({\n      transactionTime,\n      transactionNumber: Long.fromNumber(transactionNumber),\n    });\n  }\n\n  async getUnresolvableTransactionsDueForRetry(\n    maximumReturnCount?: number\n  ): Promise<TransactionModel[]> {\n    // Override the return count if it is specified.\n    let returnCount = this.maximumUnresolvableTransactionReturnCount;\n    if (maximumReturnCount !== undefined) {\n      returnCount = maximumReturnCount;\n    }\n\n    const now = Date.now();\n    const unresolvableTransactionsToRetry = await this.collection!.find({\n      nextRetryTime: { $lte: now },\n    })\n      .sort({ nextRetryTime: 1 })\n      .limit(returnCount)\n      .toArray();\n\n    return unresolvableTransactionsToRetry;\n  }\n\n  async removeUnresolvableTransactionsLaterThan(\n    transactionNumber?: number\n  ): Promise<void> {\n    // If given `undefined`, remove all transactions.\n    if (transactionNumber === undefined) {\n      await this.clearCollection();\n      return;\n    }\n\n    await this.collection!.deleteMany({\n      transactionNumber: { $gt: Long.fromNumber(transactionNumber) },\n    });\n  }\n\n  /**\n   * Gets the list of unresolvable transactions.\n   * Mainly used for test purposes.\n   */\n  public async getUnresolvableTransactions(): Promise<\n    IUnresolvableTransaction[]\n  > {\n    const transactions = await this.collection!.find()\n      .sort({ transactionTime: 1, transactionNumber: 1 })\n      .toArray();\n    return transactions;\n  }\n}\n","/*\n * The code in this file originated from\n * @see https://github.com/decentralized-identity/sidetree\n * For the list of changes that was made to the original code\n * @see https://github.com/transmute-industries/sidetree.js/blob/main/reference-implementation-changes.md\n *\n * Copyright 2020 - Transmute Industries Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnchoredOperationModel,\n  IOperationStore,\n  OperationType,\n} from '@sidetree/common';\nimport MongoDbBase from './MongoDbBase';\n\nexport default class MongoDbOperationStore extends MongoDbBase\n  implements IOperationStore {\n  readonly collectionName = 'operation';\n\n  public async initialize(): Promise<void> {\n    await super.initialize();\n    await this.collection!.createIndex({ didUniqueSuffix: 1 });\n  }\n\n  public async put(operations: AnchoredOperationModel[]): Promise<void> {\n    // Remove duplicates (same operationIndex) from the operations array\n    const operationsWithoutDuplicates = operations.reduce(\n      (opsWithoutDuplicates: AnchoredOperationModel[], operation) => {\n        const exists = opsWithoutDuplicates.find(\n          (op) => op.operationIndex === operation.operationIndex\n        );\n        if (exists) {\n          return opsWithoutDuplicates;\n        } else {\n          return [...opsWithoutDuplicates, operation];\n        }\n      },\n      []\n    );\n    // Only insert new elements\n    const onlyNewElements: AnchoredOperationModel[] = [];\n    for (const operation of operationsWithoutDuplicates) {\n      const anchoredOperation: AnchoredOperationModel = operation;\n      const res = await this.get(anchoredOperation.didUniqueSuffix);\n      const isDuplicated = res.find(\n        (op) =>\n          op.operationIndex === anchoredOperation.operationIndex &&\n          op.transactionNumber === anchoredOperation.transactionNumber\n      );\n      if (!isDuplicated) {\n        onlyNewElements.push(anchoredOperation);\n      }\n    }\n    if (onlyNewElements.length > 0) {\n      await this.collection!.insertMany(onlyNewElements);\n    }\n  }\n\n  public async get(didUniqueSuffix: string): Promise<AnchoredOperationModel[]> {\n    const results = await this.collection!.find({\n      didUniqueSuffix,\n    }).toArray();\n    // Ensure operations are sorted by increasing order of operationIndex\n    results.sort((op1, op2) => op1.operationIndex - op2.operationIndex);\n    return results;\n  }\n\n  public async delete(transactionNumber?: number): Promise<void> {\n    if (transactionNumber) {\n      await this.collection!.deleteMany({\n        transactionNumber: { $gt: transactionNumber },\n      });\n    } else {\n      await this.collection!.deleteMany({});\n    }\n  }\n\n  public async deleteUpdatesEarlierThan(\n    didUniqueSuffix: string,\n    transactionNumber: number,\n    operationIndex: number\n  ): Promise<void> {\n    await this.collection!.deleteMany({\n      $or: [\n        {\n          didUniqueSuffix,\n          transactionNumber: { $lt: transactionNumber },\n          type: OperationType.Update,\n        },\n        {\n          didUniqueSuffix,\n          transactionNumber,\n          operationIndex: { $lt: operationIndex },\n          type: OperationType.Update,\n        },\n      ],\n    });\n  }\n}\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","MongoDb","isServerAvailable","serverUrl","MongoClient","connect","useUnifiedTopology","useNewUrlParser","client","close","console","log","resetDatabase","databaseName","db","dropDatabase","res","createCollectionIfNotExist","collectionName","collections","map","collection","find","c","createCollection","MongoDbBase","clearCollection","deleteMany","initialize","MongoDbCasCache","createIndex","hash","unique","read","limit","toArray","operations","operation","code","FetchResultCode","Success","content","buffer","NotFound","write","insertOne","_context3","MongoDbOperationQueue","didUniqueSuffix","enqueue","operationBuffer","queuedOperation","operationBufferBsonBinary","Binary","_context2","SidetreeError","ErrorCode","BatchWriterAlreadyHasOperationForDid","dequeue","count","sort","_id","lastOperation","queuedOperations","$lte","convertToQueuedOperationModel","peek","contains","mongoQueuedOperation","MongoDbTransactionStore","transactionNumber","getTransactionsCount","countDocuments","getTransaction","Long","fromNumber","transactions","getTransactionsLaterThan","max","dbCursor","$gt","addTransaction","transaction","transactionInMongoDb","anchorString","transactionTime","transactionTimeHash","transactionFeePaid","normalizedTransactionFee","writer","_context5","getLastTransaction","lastTransactions","getExponentiallySpacedTransactions","exponentiallySpacedTransactions","index","allTransactions","distance","removeTransactionsLaterThan","getTransactions","getTransactionsStartingFrom","inclusiveBeginTransactionTime","exclusiveEndTransactionTime","cursor","$eq","$and","$gte","$lt","MongoDbUnresolvableTransactionStore","retryExponentialDelayFactor","exponentialDelayFactorInMilliseconds","nextRetryTime","recordUnresolvableTransactionFetchAttempt","searchFilter","findResults","unresolvableTransaction","newUnresolvableTransaction","firstFetchTime","Date","now","retryAttempts","requiredElapsedTimeSinceFirstFetchBeforeNextRetry","Math","pow","updateOne","$set","removeUnresolvableTransaction","deleteOne","getUnresolvableTransactionsDueForRetry","maximumReturnCount","returnCount","maximumUnresolvableTransactionReturnCount","removeUnresolvableTransactionsLaterThan","getUnresolvableTransactions","MongoDbOperationStore","put","operationsWithoutDuplicates","reduce","opsWithoutDuplicates","op","operationIndex","onlyNewElements","anchoredOperation","_this2","get","insertMany","results","op1","op2","deleteUpdatesEarlierThan","$or","OperationType","Update"],"mappings":"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"}