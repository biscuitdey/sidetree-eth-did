import * as Factory from 'factory.ts';
import { SidetreePlugin } from './types';
declare const factoryDefaults: {
    toMnemonic: (mnemonic?: string | undefined) => Promise<import("./types").Mnemonic>;
    toKeyPair: (mnemonic: string, index: number, type?: string) => Promise<any>;
    toDidDocForProfile: (mnemonic: string, index: number, didMethodName: string, profile?: string, options?: import("./types").SidetreeReplaceOptions) => Promise<import("./types").DidDocument>;
    getCreateOperationForProfile: (mnemonic: string, index: number, profile?: string, options?: import("./types").SidetreeReplaceOptions) => Promise<import("./types").SidetreeCreateOperation>;
    getRecoverOperationForProfile: (mnemonic: string, index: number, didUniqueSuffix: string, profile?: string, options?: import("./types").SidetreeReplaceOptions) => Promise<import("./types").SidetreeRecoverOperation>;
};
declare const pluginFactory: Factory.Sync.Factory<SidetreePlugin, "toMnemonic" | "toKeyPair" | "toDidDocForProfile" | "getCreateOperationForProfile" | "getRecoverOperationForProfile">;
declare const plugin: SidetreePlugin;
export { SidetreePlugin, pluginFactory, factoryDefaults, plugin };
