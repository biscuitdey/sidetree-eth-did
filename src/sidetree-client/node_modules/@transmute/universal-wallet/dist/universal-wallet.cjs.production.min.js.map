{"version":3,"file":"universal-wallet.cjs.production.min.js","sources":["../src/types/index.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/security.ts","../src/walletFactory.ts"],"sourcesContent":["export enum WalletStatus {\n  Locked = 'LOCKED',\n  Unlocked = 'UNLOCKED',\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { Cipher } from 'minimal-cipher';\n\nimport crypto from 'isomorphic-webcrypto';\nimport { X25519KeyPair } from '@transmute/did-key-x25519';\nimport { Ed25519KeyPair, driver } from '@transmute/did-key-ed25519';\n\nexport const seedToId = async (seed: Uint8Array) => {\n  const buffer = await crypto.subtle.digest('SHA-256', seed);\n  return `urn:digest:${Buffer.from(new Int8Array(buffer)).toString('hex')}`;\n};\n\nexport const passwordToKey = async (\n  password: string,\n  salt: string = 'salt',\n  iterations: number = 100000,\n  digest: string = 'SHA-256'\n): Promise<Uint8Array> => {\n  var saltBuffer = Buffer.from(salt);\n  var passphraseKey = Buffer.from(password);\n  return crypto.subtle\n    .importKey('raw', passphraseKey, { name: 'PBKDF2' }, false, [\n      'deriveBits',\n      'deriveKey',\n    ])\n    .then(function(key: any) {\n      return crypto.subtle.deriveKey(\n        {\n          name: 'PBKDF2',\n          salt: saltBuffer,\n          iterations: iterations,\n          hash: digest,\n        },\n        key,\n        // Note: we don't actually need a cipher suite,\n        // but the api requires that it must be specified.\n        // For AES the length required to be 128 or 256 bits (not bytes)\n        { name: 'AES-CBC', length: 256 },\n        // Whether or not the key is extractable (less secure) or not (more secure)\n        // when false, the key can only be passed as a web crypto object, not inspected\n        true,\n        // this web crypto object will only be allowed for these functions\n        ['encrypt', 'decrypt']\n      );\n    })\n    .then((webKey: any) => {\n      return crypto.subtle.exportKey('raw', webKey);\n    })\n    .then((buffer: any) => {\n      return new Uint8Array(buffer);\n    });\n};\n\nexport const unlockDidKey = async (seed: Uint8Array): Promise<any> => {\n  const ed25519Key = await Ed25519KeyPair.generate({\n    secureRandom: ()=> {\n      return seed;\n    },\n  });\n  const result = await driver.resolve(ed25519Key.controller);\n  const unlockedDIDDocument = {\n    ...result.didDocument,\n  };\n  \n  const x25519Key = ed25519Key.toX25519KeyPair(true);\n\n  unlockedDIDDocument.verificationMethod[0].privateKeyBase58 =\n    ed25519Key.toKeyPair(true).privateKeyBase58;\n  unlockedDIDDocument.verificationMethod[1].privateKeyBase58 =\n    x25519Key.toKeyPair(true).privateKeyBase58;\n  return unlockedDIDDocument;\n};\n\nexport const lockDidKey = (unlockedDIDDocument: any): any => {\n  delete unlockedDIDDocument.verificationMethod[0].privateKeyBase58;\n  delete unlockedDIDDocument.verificationMethod[1].privateKeyBase58;\n  const didDocument = { ...unlockedDIDDocument };\n  return didDocument;\n};\n\nexport const getKeyResolver = (didDocument: any) => {\n  let keyAgreementKey: any = didDocument.verificationMethod[1];\n  const keyResolver = ({ id }: any) => {\n    if (keyAgreementKey.id === id) {\n      return keyAgreementKey;\n    }\n    throw new Error(`Key ${id} not found in ${didDocument.id}`);\n  };\n  return keyResolver;\n};\n\nexport const lockContent = async ({\n  content,\n  cipher,\n  recipients,\n  keyResolver,\n}: any) => {\n  const jwe = await cipher.encryptObject({\n    obj: content,\n    recipients,\n    keyResolver,\n  });\n  return jwe;\n};\n\nexport const unlockContent = async ({\n  content,\n  cipher,\n  keyAgreementKey,\n}: any) => {\n  return cipher.decryptObject({\n    jwe: content,\n    keyAgreementKey: new X25519KeyPair(keyAgreementKey),\n  });\n};\n\nexport const lockContents = async (\n  password: string,\n  contents: any[]\n): Promise<any[]> => {\n  const derivedKey = await passwordToKey(password);\n  const unlockedDidKey = await unlockDidKey(derivedKey);\n  const lockedDidKey = lockDidKey(unlockedDidKey);\n  const keyAgreementKey = lockedDidKey.verificationMethod[1];\n  if (keyAgreementKey.id.indexOf('#') === 0) {\n    keyAgreementKey.id = keyAgreementKey.controller + keyAgreementKey.id;\n  }\n  const recipient = {\n    header: {\n      kid: keyAgreementKey.id,\n      alg: 'ECDH-ES+A256KW',\n    },\n  };\n  const recipients = [recipient];\n  const keyResolver = getKeyResolver(lockedDidKey);\n  const cipher = new Cipher();\n  return Promise.all(\n    contents.map(content => {\n      return lockContent({\n        content: { ...content },\n        cipher,\n        recipients: [...recipients],\n        keyResolver,\n      });\n    })\n  );\n};\n\nexport const unlockContents = async (\n  password: string,\n  contents: any[]\n): Promise<any[]> => {\n  const derivedKey = await passwordToKey(password);\n  const unlockedDidKey = await unlockDidKey(derivedKey);\n  const keyAgreementKey = unlockedDidKey.verificationMethod[1];\n  if (keyAgreementKey.id.indexOf('#') === 0) {\n    keyAgreementKey.id = keyAgreementKey.controller + keyAgreementKey.id;\n  }\n  const cipher = new Cipher();\n  let decryptedContents = [];\n  for (let i = 0; i < contents.length; i++) {\n    const content = contents[i];\n    const decryptedContent = await unlockContent({\n      content,\n      cipher,\n      keyAgreementKey,\n    });\n    decryptedContents.push(decryptedContent);\n  }\n  return decryptedContents;\n};\n","import * as Factory from 'factory.ts';\n\nimport { WalletStatus } from './types';\n\nimport {\n  lockContents,\n  unlockContents,\n  passwordToKey,\n  seedToId,\n  unlockDidKey,\n} from './security';\n\ninterface Wallet {\n  status: WalletStatus;\n  contents: any[];\n  passwordToKey: (password: string) => Promise<Uint8Array>;\n  seedToId: (seed: Uint8Array) => Promise<string>;\n  add: (content: any) => Wallet;\n  remove: (contentId: string) => Wallet;\n  lock: (password: string) => Promise<Wallet>;\n  unlock: (password: string) => Promise<Wallet>;\n  export: (password: string) => Promise<any>;\n  import: (encryptedWalletCredential: any, password: string) => Promise<Wallet>;\n  query: (map: any, reduce: any, initialValue: any) => any;\n}\n\nconst walletDefaults = {\n  status: WalletStatus.Unlocked,\n  contents: [],\n  passwordToKey,\n  seedToId,\n  add: function (content: any): Wallet {\n    (this as Wallet).contents.push(content);\n    return this;\n  },\n  remove: function (contentId: string): any {\n    let contents = JSON.parse(JSON.stringify(this.contents));\n    let index = contents.findIndex((c: any) => {\n      return c.id === contentId;\n    });\n    let content = contents[index];\n    this.contents = contents.filter((i: any) => {\n      return i.id !== content.id;\n    });\n\n    return content;\n  },\n  lock: async function (password: string): Promise<Wallet> {\n    (this as Wallet).contents = await lockContents(\n      password,\n      (this as Wallet).contents\n    );\n    (this as Wallet).status = WalletStatus.Locked;\n    return this;\n  },\n  unlock: async function (password: string): Promise<Wallet> {\n    (this as Wallet).contents = await unlockContents(\n      password,\n      (this as Wallet).contents\n    );\n    (this as Wallet).status = WalletStatus.Unlocked;\n    return this;\n  },\n  export: async function (password: string): Promise<any> {\n    const seed = await passwordToKey(password);\n    const didDoc = await unlockDidKey(seed);\n    // we don't want to leak number of wallet contents...\n    // so we push them into a single object before encrypting.\n    const lockedContents = await lockContents(password, [\n      {\n        contents: (this as Wallet).contents,\n      },\n    ]);\n    const encryptedWallet = {\n      '@context': [\n        'https://www.w3.org/2018/credentials/v1',\n        'http://w3id.org/wallet/v1',\n      ],\n      // consider using content id of ciphertext here...\n      id: didDoc.id + '#encrypted-wallet',\n      type: ['VerifiableCredential', 'EncryptedWallet'],\n      issuer: didDoc.id,\n      issuanceDate: new Date().toISOString(),\n      credentialSubject: {\n        id: didDoc.id,\n        encryptedWalletContents: lockedContents[0],\n      },\n    };\n    return encryptedWallet;\n  },\n  import: async function (\n    encryptedWalletCredential: any,\n    password: string\n  ): Promise<any> {\n    if (this.contents.length) {\n      throw new Error('Cannot import over existing wallet content.');\n    }\n    const unlockedContents = await unlockContents(password, [\n      encryptedWalletCredential.credentialSubject.encryptedWalletContents,\n    ]);\n    this.contents = unlockedContents[0].contents;\n    this.status = WalletStatus.Unlocked;\n    return this;\n  },\n  query: function (map: any, reduce: any, initialValue: any) {\n    if (this.status !== WalletStatus.Unlocked) {\n      throw new Error('You can only query an unlocked wallet.');\n    }\n    let results = this.contents.map(map);\n    if (reduce) {\n      return results.reduce(reduce, initialValue);\n    }\n    return results;\n  },\n};\n\nconst walletFactory = Factory.Sync.makeFactory<Wallet>(walletDefaults);\n\nconst wallet = walletFactory.build();\n\nexport { Wallet, walletFactory, walletDefaults, wallet };\n"],"names":["WalletStatus","_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","Symbol","iterator","asyncIterator","seedToId","seed","crypto","subtle","digest","buffer","Buffer","from","Int8Array","toString","passwordToKey","password","salt","iterations","saltBuffer","passphraseKey","importKey","name","key","deriveKey","hash","length","webKey","exportKey","Uint8Array","unlockDidKey","Ed25519KeyPair","generate","secureRandom","ed25519Key","driver","resolve","controller","unlockedDIDDocument","didDocument","x25519Key","toX25519KeyPair","verificationMethod","privateKeyBase58","toKeyPair","lockDidKey","getKeyResolver","keyAgreementKey","id","Error","lockContent","content","cipher","recipients","keyResolver","encryptObject","obj","unlockContent","decryptObject","jwe","X25519KeyPair","lockContents","contents","derivedKey","unlockedDidKey","lockedDidKey","indexOf","header","kid","alg","Cipher","Promise","all","map","unlockContents","decryptedContents","array","body","check","reject","i","_cycle","thenable","decryptedContent","push","walletDefaults","status","Unlocked","add","remove","contentId","JSON","parse","stringify","index","findIndex","c","filter","lock","_this2","Locked","unlock","_this4","didDoc","_this6","lockedContents","type","issuer","issuanceDate","Date","toISOString","credentialSubject","encryptedWalletContents","encryptedWalletCredential","_this8","unlockedContents","query","reduce","initialValue","results","walletFactory","Factory","makeFactory"],"mappings":"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"}