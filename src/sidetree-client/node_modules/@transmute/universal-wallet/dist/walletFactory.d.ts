import * as Factory from 'factory.ts';
import { WalletStatus } from './types';
interface Wallet {
    status: WalletStatus;
    contents: any[];
    passwordToKey: (password: string) => Promise<Uint8Array>;
    seedToId: (seed: Uint8Array) => Promise<string>;
    add: (content: any) => Wallet;
    remove: (contentId: string) => Wallet;
    lock: (password: string) => Promise<Wallet>;
    unlock: (password: string) => Promise<Wallet>;
    export: (password: string) => Promise<any>;
    import: (encryptedWalletCredential: any, password: string) => Promise<Wallet>;
    query: (map: any, reduce: any, initialValue: any) => any;
}
declare const walletDefaults: {
    status: WalletStatus;
    contents: never[];
    passwordToKey: (password: string, salt?: string, iterations?: number, digest?: string) => Promise<Uint8Array>;
    seedToId: (seed: Uint8Array) => Promise<string>;
    add: (content: any) => Wallet;
    remove: (contentId: string) => any;
    lock: (password: string) => Promise<Wallet>;
    unlock: (password: string) => Promise<Wallet>;
    export: (password: string) => Promise<any>;
    import: (encryptedWalletCredential: any, password: string) => Promise<any>;
    query: (map: any, reduce: any, initialValue: any) => unknown;
};
declare const walletFactory: Factory.Sync.Factory<Wallet, "status" | "contents" | "passwordToKey" | "seedToId" | "add" | "remove" | "lock" | "unlock" | "export" | "import" | "query">;
declare const wallet: Wallet;
export { Wallet, walletFactory, walletDefaults, wallet };
